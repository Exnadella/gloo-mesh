syntax = "proto3";
package networking.enterprise.mesh.gloo.solo.io;

option go_package = "github.com/solo-io/gloo-mesh/pkg/api/networking.enterprise.mesh.gloo.solo.io/v1beta1";

import "github.com/solo-io/gloo-mesh/api/common/v1/selectors.proto";
import "github.com/solo-io/gloo-mesh/api/common/v1/route.proto";

import "extproto/ext.proto";
option (extproto.equal_all) = true;

/*
    A `RouteTable` is used to configure routes. It is selected by a `FederatedGateway`, and may be attached
    to more than one gateway. The `RouteTable` contains the top-level configuration and route options, such
    as domains to match against, and any options to be shared by its routes. Routes can send traffic directly
    to a service, or can delegate to a `DelegatedRouteTable` to perform further routing decisions.
*/
message RouteTableSpec {

    // The list of domains (i.e.: matching the `Host` header of a request) that belong to this virtual host.
    // Note that the wildcard will not match the empty string. e.g. “*-bar.foo.com” will match “baz-bar.foo.com”
    // but not “-bar.foo.com”. Additionally, a special entry “*” is allowed which will match any host/authority header.
    // Only a single virtual host on a gateway can match on “*”. A domain must be unique across all
    // virtual hosts on a gateway or the config will be invalidated by Gloo
    // Domains on virtual hosts obey the same rules as [Envoy Virtual Hosts](https://github.com/envoyproxy/envoy/blob/master/api/envoy/api/v2/route/route.proto)
    repeated string domains = 1;

    // The list of HTTP routes define routing actions to be taken for incoming HTTP requests whose host header matches
    // this virtual host. If the request matches more than one route in the list, the first route matched will be selected.
    // If the list of routes is empty, the virtual host will be ignored by Gloo.
    repeated .common.mesh.gloo.solo.io.Route routes = 2;

    // Route table options contain additional configuration to be applied to all traffic served by the route table.
    // Some configuration here can be overridden by Route Options.
    RouteTableOptions route_table_options = 3;

    // TODO: Fill / maybe replace with traffic policy?
    message RouteTableOptions {
        // see message VirtualHostOptions in options.proto

        // options shared from TrafficPolicy
        // OutlierDetection  and TrafficShift isn't supported on the route level.
        // TrafficPolicySpec.Policy traffic_policy = 1;

        string todo_add_options = 1;
    }
}

message RouteTableStatus {
    // TODO: Fill in status
}