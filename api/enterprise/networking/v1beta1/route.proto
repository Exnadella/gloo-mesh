syntax = "proto3";

package networking.enterprise.mesh.gloo.solo.io;
option go_package = "github.com/solo-io/gloo-mesh/pkg/api/networking.enterprise.mesh.gloo.solo.io/v1beta1";

import "google/protobuf/wrappers.proto";
import "github.com/solo-io/skv2/api/core/v1/core.proto";
import "github.com/solo-io/gloo-mesh/api/common/v1/selectors.proto";
import "github.com/solo-io/gloo-mesh/api/networking/v1/weighed_destination.proto";
import "github.com/solo-io/gloo-mesh/api/common/v1/request_matchers.proto";

import "extproto/ext.proto";
option (extproto.equal_all) = true;

/*
* A route specifies how to match a request and what action to take when the request is matched.
*
* When a request matches on a route, the route can perform one of the following actions:
* - *Route* the request to a destination
* - Reply with a *Direct Response*
* - Send a *Redirect* response to the client
* - *Delegate* the action for the request to one or more top-level [`VirtualHost`]({{< ref "/reference/api/github.com/solo-io/gloo/projects/gateway/api/v1/route_table.proto.sk.md" >}}) resources
* DelegateActions can be used to delegate the behavior for a set out routes with a given *prefix* to
* top-level `VirtualHost` resources.
*/
message Route {
    // The name provides a convenience for users to be able to refer to a route by name.
    // It includes names of vs, route, and route table ancestors of the route.
    string name = 1;
    
    // Matchers contain parameters for matching requests (i.e., based on HTTP path, headers, etc.).
    // If empty, the route will match all requests (i.e, a single "/" path prefix matcher).
    // For delegated routes, any parent matcher must have a `prefix` path matcher.
    repeated .common.mesh.gloo.solo.io.HttpMatcher matchers = 2;


    // // TODO: Verify that we need these, and see if there's a cleaner now that we can make breaking changes.
    // // Whether this route as a child should inherit headers, methods, and query parameter matchers from the parent.
    // // Defaults to value of parent; for virtual services (no parent) defaults to false.
    // google.protobuf.BoolValue inheritable_matchers = 3;

    // // Whether this route as a child should inherit path matchers (i.e., path itself, case-sensitive setting) from
    // // the parent. Defaults to value of parent; for virtual services (no parent) defaults to false.
    // google.protobuf.BoolValue inheritable_path_matchers = 4;

    // Top level /apiv2 -> some-virtualHost
    // Top level /apiv1 -> some-virtualHost
    // VirtualHost /foo -> foo-service

    // The Route Action Defines what action the proxy should take when a request matches the route.
    oneof action {
        // This action is the primary action to be selected for most routes. The RouteAction tells the proxy to
        // route requests to an upstream.
        RouteAction route_action = 5;

        // Redirect actions tell the proxy to return a redirect response to the downstream client.
        RedirectAction redirect_action = 6;

        // Return an arbitrary HTTP response directly, without proxying.
        DirectResponseAction direct_response_action = 7;

        // Delegate routing actions for the given matcher to one or more RouteTables.
        DelegateAction delegate_action = 8;

    }

    // Route Options extend the behavior of routes.
    // Route options include configuration such as retries, rate limiting, and request/response transformation.
    // RouteOption behavior will be inherited by delegated routes which do not specify their own `options`
    RouteOptions options = 9;

    message RouteOptions {
        // TODO: Route Options
    }

    // RouteActions are used to route matched requests to upstreams.
    message RouteAction {
        // Defines the destination upstream for routing
        // Some destinations require additional configuration for the route (e.g. AWS upstreams require a function name
        // to be specified).
        repeated Destinations destinations = 1;
    
        message Destinations {
            oneof destination_type {
                // Reference to a gloo mesh Static Destination
                .core.skv2.solo.io.ObjectRef static  = 1;
        
                // Reference to a gloo mesh VirtualDestination
                .core.skv2.solo.io.ObjectRef virtual  = 2;
        
                // Reference to a Kubernetes Service. Note that the service must exist in the same mesh or virtual mesh (with federation enabled) as 
                // each gateway workload which routes to this destination.
                .core.skv2.solo.io.ClusterObjectRef kube  = 3;
        
                // Envoy will determine the cluster to route to by reading the value of the HTTP header named by cluster_header from the request headers.
                // If the header is not found or the referenced cluster does not exist, Envoy will return a 404 response.
                // Avoid using this whenever possible, it does not allow for custom filter configuration based on Virtual Host.
                string cluster_header = 4;
        
        
                // TODO:
                // - Consul service destination type
                // - Allow routing to an Istio VirtualService?
                //     - Might be problematic with domain names, exposing underlying Istio objects.
            } 
            // Relative weight of this destination to others in the same route.
            // If omitted, all destinations in the route will be load balanced between evenly.
            uint32 weight = 5;
        
            // options applied when this destination is selected from a list of multiple destinations
            DestinationOptions destination_options = 6;
            
            message DestinationOptions {
                // TODO: Some subset of traffic policy (whatever Istio supports)
                // TODO: Use correct type for header_modification
                string header_modification = 7;
            }
        }
    }

}

// Note: This message needs to be at this level (rather than nested) due to cue restrictions.
// Notice: RedirectAction is copied directly from https://github.com/envoyproxy/envoy/blob/master/api/envoy/api/v2/route/route.proto
message RedirectAction {
    // The host portion of the URL will be swapped with this value.
    string host_redirect = 1;

    oneof path_rewrite_specifier {
        // The path portion of the URL will be swapped with this value.
        string path_redirect = 2;

        // Indicates that during redirection, the matched prefix (or path)
        // should be swapped with this value. This option allows redirect URLs be dynamically created
        // based on the request.
        //
        //   Pay attention to the use of trailing slashes as mentioned in
        //   `RouteAction`'s `prefix_rewrite`.
        string prefix_rewrite = 3;
    }
    
    // The HTTP status code to use in the redirect response. The default response
    // code is MOVED_PERMANENTLY (301).
    RedirectResponseCode response_code = 4;
    
    // The scheme portion of the URL will be swapped with "https".
    bool https_redirect = 5;
    
    // Indicates that during redirection, the query portion of the URL will
    // be removed. Default value is false.
    bool strip_query = 6;

    enum RedirectResponseCode {
        // Moved Permanently HTTP Status Code - 301.
        MOVED_PERMANENTLY = 0;

        // Found HTTP Status Code - 302.
        FOUND = 1;

        // See Other HTTP Status Code - 303.
        SEE_OTHER = 2;

        // Temporary Redirect HTTP Status Code - 307.
        TEMPORARY_REDIRECT = 3;

        // Permanent Redirect HTTP Status Code - 308.
        PERMANENT_REDIRECT = 4;
    }
}

// TODO: Shuold we be using v4alpha now? https://github.com/envoyproxy/envoy/blob/5a8bfa20dc3c85ecb61826d122696ecaa75dffa0/api/envoy/config/route/v4alpha/route_components.proto#L1396
// Note: This message needs to be at this level (rather than nested) due to cue restrictions.
// DirectResponseAction is copied directly from https://github.com/envoyproxy/envoy/blob/master/api/envoy/api/v2/route/route.proto
message DirectResponseAction {
    // Specifies the HTTP response status to be returned.
    uint32 status = 1;

    // Specifies the content of the response body. If this setting is omitted,
    // no body is included in the generated response.
    //
    //   Note: Headers can be specified using the Header Modification feature in the enclosing
    //   Route, ConnectionHandler, or Gateway options.
    string body = 2;
}

// Note: This message needs to be at this level (rather than nested) due to cue restrictions.
// DelegateActions are used to delegate routing decisions to other resources, for example Route Tables.
message DelegateAction {
    
    oneof delegation_type {
        // Delegate to the Route Table resource with the given `name` and `namespace.
        .core.skv2.solo.io.ObjectRef ref = 1;

        // Delegate to the Route Tables that match the given selector.
        .common.mesh.gloo.solo.io.ObjectSelector selector = 2;
    }

    // If set to true, `passFullPath` will send the full path for the delegated child route
    // to match on. When false, the part of the path matched in this resource will be
    // removed, and the delegated child resource will only match on the remainder of the
    // path. Default value is false.
    bool pass_full_path = 3;
}