syntax = "proto3";
package networking.enterprise.mesh.gloo.solo.io;

option go_package = "github.com/solo-io/gloo-mesh/pkg/api/networking.enterprise.mesh.gloo.solo.io/v1alpha1";

import "github.com/solo-io/skv2/api/core/v1/core.proto";
import "github.com/solo-io/gloo-mesh/api/networking/v1alpha2/selectors.proto";
import "github.com/solo-io/gloo-mesh/api/networking/v1alpha2/validation_state.proto";

import "extproto/ext.proto";
option (extproto.equal_all) = true;

/*
    A GlobalService creates a new hostname to which services can send requests.
    Requests will be routed based on a list of backing traffic targets ordered by
    decreasing priority. When outlier detection detects that a traffic target in the list is
    in an unhealthy state, requests sent to the GlobalService will be routed
    to the next healthy traffic target in the list. For each traffic target referenced in the
    GlobalService's BackingServices list, outlier detection must be configured using a TrafficPolicy.

    Currently this feature only supports Services backed by Istio.
*/
message GlobalServiceSpec {
  // The DNS name of the GlobalService. Must be unique within the service mesh instance
  // since it is used as the hostname with which clients communicate.
  string hostname = 1;

  // The port on which the GlobalService listens.
  Port port = 2;

  // Selectors for the services backing the GlobalService. The selected services are considered
  // equivalent, and Gloo Mesh will route to the optimal service instance based on the locality
  // failover configuration.
  repeated .networking.mesh.gloo.solo.io.TrafficTargetSelector traffic_target_selectors = 3;

  // The GlobalService can be made visible to either a mesh, a VirtualMesh, or multiple meshes that are
  // in the same VirtualMesh.
  oneof export_to {
    // The VirtualMesh that this GlobalService will be visible to.
    .core.skv2.solo.io.ObjectRef virtual_mesh = 4;
    // The meshes that this GlobalService will be visible to. If multiple meshes are specified, they must
    // all belong to the same VirtualMesh.
    MeshList meshes = 5;
  }

  oneof failover_config {
    BackingServiceList backing_services = 6;
    // Locality Failover configuration.
    LocalityConfig locality_config = 7;
  }

  message MeshList {
    repeated .core.skv2.solo.io.ObjectRef mesh_refs = 1;
  }

  message BackingServiceList {
    // The list of services backing the GlobalService, ordered by decreasing priority.
    // All services must be backed by either the same service mesh instance or
    // backed by service meshes that are grouped under a common VirtualMesh.
    repeated BackingService backing_services = 1;
  }

  message LocalityConfig {
    repeated Locality localities = 2;
  }

  message Locality {
    string from = 1;
    repeated string to = 2;
  }

  // The port on which the GlobalService listens.
  message Port {
    // Port number.
    uint32 number = 1;
    // Protocol of the requests sent to the GlobalService, must be one of HTTP, HTTPS, GRPC, HTTP2, MONGO, TCP, TLS.
    string protocol = 2;
  }

  // The traffic targets that comprise the GlobalService.
  message BackingService {
    // Different traffic target types can be selected as backing services.
    oneof backing_service_type {
      // Name/namespace/cluster of a kubernetes service.
      .core.skv2.solo.io.ClusterObjectRef kube_service = 1;
    }
  }
}

message GlobalServiceStatus {
  // The most recent generation observed in the the GlobalService metadata.
  // If the observedGeneration does not match generation, the controller has not received the most
  // recent version of this resource.
  int64 observed_generation = 1;

  // The state of the overall resource, will only show accepted if it has been successfully
  // applied to all target meshes.
  .networking.mesh.gloo.solo.io.ApprovalState state = 2;

  // The status of the GlobalService for each Mesh to which it has been applied.
  map<string, .networking.mesh.gloo.solo.io.ApprovalStatus> meshes = 3;

  // Any errors found while processing this generation of the resource.
  repeated string errors = 4;
}
