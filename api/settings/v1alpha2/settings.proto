syntax = "proto3";
package settings.mesh.gloo.solo.io;
option go_package = "github.com/solo-io/gloo-mesh/pkg/api/settings.mesh.gloo.solo.io/v1alpha2";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

import "gloo-mesh/api/networking/v1alpha2/validation_state.proto";
import "gloo-mesh/api/networking/v1alpha2/traffic_policy.proto";

// Configure global settings and defaults.
message SettingsSpec {

    // Configure default mTLS settings for TrafficTargets (MTLS declared in TrafficPolicies take precedence)
    .networking.mesh.gloo.solo.io.TrafficPolicySpec.MTLS mtls = 1;

    // Configure Gloo Mesh networking to communicate with one or more external gRPC NetworkingExtensions servers.
    // Updates will be applied by the servers in the order they are listed (servers towards the end of the list take precedence).
    // Note: Extension Servers have full write access to the output objects written by Gloo Mesh.
    repeated NetworkingExtensionsServer networking_extension_servers = 2;

    // Istio-specific discovery settings
    Istio istio = 3;

    message Istio {
        // The workload labels used during discovery to detect ingress gateways for a mesh.
        // If not specified, will default to `{"istio": "ingressgateway"}`.
        // To override the labels for a specific cluster, use `override_workload_labels`.
        map<string, string> gateway_workload_labels = 1;

        // Override the gateway workload labels on a per-cluster basis.
        // The key to the map is a k8s cluster name, and the value is a labels map.
        // If an entry is found for a given cluster, it will be used, otherwise we will fall back to
        // `gateway_workload_labels`.
        map<string, WorkloadLabel> override_workload_labels = 2;

        // The name of the TLS port used to detect ingress gateways. Services must have a port with this name
        // in order to be recognized as an ingress gateway during discovery.
        // If not specified, will default to `tls`.
        string gateway_tls_port_name = 3;

        // Wrapper for a set of labels.
        message WorkloadLabel {
            map<string,string> labels = 1;
        }
    }
}

// Options for connecting to an external gRPC NetworkingExternsions server
message NetworkingExtensionsServer {
    // TCP address of the Networking Extensions Server (including port)
    string address = 1;

    // Communicate over HTTP rather than HTTPS
    bool insecure = 2;

    // Instruct Gloo Mesh to automatically reconnect to the server on network failures
    bool reconnect_on_network_failures = 3;
}

message SettingsStatus {
    // The most recent generation observed in the the Settings metadata.
    // If the observedGeneration does not match generation, the controller has not processed the most
    // recent version of this resource.
    int64 observed_generation = 1;

    // The state of the overall resource.
    // It will only show accepted if no processing errors encountered.
    .networking.mesh.gloo.solo.io.ApprovalState state = 2;

    // Any errors encountered while processing Settings object.
    repeated string errors = 3;
}
