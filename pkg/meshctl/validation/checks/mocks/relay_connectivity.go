// Code generated by MockGen. DO NOT EDIT.
// Source: ./relay_connectivity.go

// Package mock_checks is a generated GoMock package.
package mock_checks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/solo-io/external-apis/pkg/api/k8s/core/v1"
	grpcutils "github.com/solo-io/go-utils/grpcutils"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockRelayDialer is a mock of RelayDialer interface.
type MockRelayDialer struct {
	ctrl     *gomock.Controller
	recorder *MockRelayDialerMockRecorder
}

// MockRelayDialerMockRecorder is the mock recorder for MockRelayDialer.
type MockRelayDialerMockRecorder struct {
	mock *MockRelayDialer
}

// NewMockRelayDialer creates a new mock instance.
func NewMockRelayDialer(ctrl *gomock.Controller) *MockRelayDialer {
	mock := &MockRelayDialer{ctrl: ctrl}
	mock.recorder = &MockRelayDialerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelayDialer) EXPECT() *MockRelayDialerMockRecorder {
	return m.recorder
}

// DialIdentity mocks base method.
func (m *MockRelayDialer) DialIdentity(ctx context.Context, relayServerDialOpts grpcutils.DialOpts, secretClient v1.SecretClient, rootCertSecretRef client.ObjectKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DialIdentity", ctx, relayServerDialOpts, secretClient, rootCertSecretRef)
	ret0, _ := ret[0].(error)
	return ret0
}

// DialIdentity indicates an expected call of DialIdentity.
func (mr *MockRelayDialerMockRecorder) DialIdentity(ctx, relayServerDialOpts, secretClient, rootCertSecretRef interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialIdentity", reflect.TypeOf((*MockRelayDialer)(nil).DialIdentity), ctx, relayServerDialOpts, secretClient, rootCertSecretRef)
}

// DialServer mocks base method.
func (m *MockRelayDialer) DialServer(ctx context.Context, relayServerDialOpts grpcutils.DialOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DialServer", ctx, relayServerDialOpts)
	ret0, _ := ret[0].(error)
	return ret0
}

// DialServer indicates an expected call of DialServer.
func (mr *MockRelayDialerMockRecorder) DialServer(ctx, relayServerDialOpts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialServer", reflect.TypeOf((*MockRelayDialer)(nil).DialServer), ctx, relayServerDialOpts)
}
