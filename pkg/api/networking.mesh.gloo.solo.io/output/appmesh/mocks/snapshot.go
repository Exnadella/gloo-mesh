// Code generated by MockGen. DO NOT EDIT.
// Source: ./snapshot.go

// Package mock_appmesh is a generated GoMock package.
package mock_appmesh

import (
	context "context"
	reflect "reflect"

	v1beta2 "github.com/aws/aws-app-mesh-controller-for-k8s/apis/appmesh/v1beta2"
	gomock "github.com/golang/mock/gomock"
	v1beta2sets "github.com/solo-io/external-apis/pkg/api/appmesh/appmesh.k8s.aws/v1beta2/sets"
	appmesh "github.com/solo-io/gloo-mesh/pkg/api/networking.mesh.gloo.solo.io/output/appmesh"
	output "github.com/solo-io/skv2/contrib/pkg/output"
	multicluster "github.com/solo-io/skv2/pkg/multicluster"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockSnapshot is a mock of Snapshot interface
type MockSnapshot struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotMockRecorder
}

// MockSnapshotMockRecorder is the mock recorder for MockSnapshot
type MockSnapshotMockRecorder struct {
	mock *MockSnapshot
}

// NewMockSnapshot creates a new mock instance
func NewMockSnapshot(ctrl *gomock.Controller) *MockSnapshot {
	mock := &MockSnapshot{ctrl: ctrl}
	mock.recorder = &MockSnapshotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSnapshot) EXPECT() *MockSnapshotMockRecorder {
	return m.recorder
}

// AppmeshK8SAwsv1Beta2VirtualServices mocks base method
func (m *MockSnapshot) AppmeshK8SAwsv1Beta2VirtualServices() []appmesh.LabeledAppmeshK8SAwsv1Beta2VirtualServiceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppmeshK8SAwsv1Beta2VirtualServices")
	ret0, _ := ret[0].([]appmesh.LabeledAppmeshK8SAwsv1Beta2VirtualServiceSet)
	return ret0
}

// AppmeshK8SAwsv1Beta2VirtualServices indicates an expected call of AppmeshK8SAwsv1Beta2VirtualServices
func (mr *MockSnapshotMockRecorder) AppmeshK8SAwsv1Beta2VirtualServices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppmeshK8SAwsv1Beta2VirtualServices", reflect.TypeOf((*MockSnapshot)(nil).AppmeshK8SAwsv1Beta2VirtualServices))
}

// AppmeshK8SAwsv1Beta2VirtualNodes mocks base method
func (m *MockSnapshot) AppmeshK8SAwsv1Beta2VirtualNodes() []appmesh.LabeledAppmeshK8SAwsv1Beta2VirtualNodeSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppmeshK8SAwsv1Beta2VirtualNodes")
	ret0, _ := ret[0].([]appmesh.LabeledAppmeshK8SAwsv1Beta2VirtualNodeSet)
	return ret0
}

// AppmeshK8SAwsv1Beta2VirtualNodes indicates an expected call of AppmeshK8SAwsv1Beta2VirtualNodes
func (mr *MockSnapshotMockRecorder) AppmeshK8SAwsv1Beta2VirtualNodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppmeshK8SAwsv1Beta2VirtualNodes", reflect.TypeOf((*MockSnapshot)(nil).AppmeshK8SAwsv1Beta2VirtualNodes))
}

// AppmeshK8SAwsv1Beta2VirtualRouters mocks base method
func (m *MockSnapshot) AppmeshK8SAwsv1Beta2VirtualRouters() []appmesh.LabeledAppmeshK8SAwsv1Beta2VirtualRouterSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppmeshK8SAwsv1Beta2VirtualRouters")
	ret0, _ := ret[0].([]appmesh.LabeledAppmeshK8SAwsv1Beta2VirtualRouterSet)
	return ret0
}

// AppmeshK8SAwsv1Beta2VirtualRouters indicates an expected call of AppmeshK8SAwsv1Beta2VirtualRouters
func (mr *MockSnapshotMockRecorder) AppmeshK8SAwsv1Beta2VirtualRouters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppmeshK8SAwsv1Beta2VirtualRouters", reflect.TypeOf((*MockSnapshot)(nil).AppmeshK8SAwsv1Beta2VirtualRouters))
}

// ApplyLocalCluster mocks base method
func (m *MockSnapshot) ApplyLocalCluster(ctx context.Context, clusterClient client.Client, errHandler output.ErrorHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ApplyLocalCluster", ctx, clusterClient, errHandler)
}

// ApplyLocalCluster indicates an expected call of ApplyLocalCluster
func (mr *MockSnapshotMockRecorder) ApplyLocalCluster(ctx, clusterClient, errHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyLocalCluster", reflect.TypeOf((*MockSnapshot)(nil).ApplyLocalCluster), ctx, clusterClient, errHandler)
}

// ApplyMultiCluster mocks base method
func (m *MockSnapshot) ApplyMultiCluster(ctx context.Context, multiClusterClient multicluster.Client, errHandler output.ErrorHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ApplyMultiCluster", ctx, multiClusterClient, errHandler)
}

// ApplyMultiCluster indicates an expected call of ApplyMultiCluster
func (mr *MockSnapshotMockRecorder) ApplyMultiCluster(ctx, multiClusterClient, errHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyMultiCluster", reflect.TypeOf((*MockSnapshot)(nil).ApplyMultiCluster), ctx, multiClusterClient, errHandler)
}

// MarshalJSON mocks base method
func (m *MockSnapshot) MarshalJSON() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalJSON")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalJSON indicates an expected call of MarshalJSON
func (mr *MockSnapshotMockRecorder) MarshalJSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalJSON", reflect.TypeOf((*MockSnapshot)(nil).MarshalJSON))
}

// MockLabeledAppmeshK8SAwsv1Beta2VirtualServiceSet is a mock of LabeledAppmeshK8SAwsv1Beta2VirtualServiceSet interface
type MockLabeledAppmeshK8SAwsv1Beta2VirtualServiceSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledAppmeshK8SAwsv1Beta2VirtualServiceSetMockRecorder
}

// MockLabeledAppmeshK8SAwsv1Beta2VirtualServiceSetMockRecorder is the mock recorder for MockLabeledAppmeshK8SAwsv1Beta2VirtualServiceSet
type MockLabeledAppmeshK8SAwsv1Beta2VirtualServiceSetMockRecorder struct {
	mock *MockLabeledAppmeshK8SAwsv1Beta2VirtualServiceSet
}

// NewMockLabeledAppmeshK8SAwsv1Beta2VirtualServiceSet creates a new mock instance
func NewMockLabeledAppmeshK8SAwsv1Beta2VirtualServiceSet(ctrl *gomock.Controller) *MockLabeledAppmeshK8SAwsv1Beta2VirtualServiceSet {
	mock := &MockLabeledAppmeshK8SAwsv1Beta2VirtualServiceSet{ctrl: ctrl}
	mock.recorder = &MockLabeledAppmeshK8SAwsv1Beta2VirtualServiceSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledAppmeshK8SAwsv1Beta2VirtualServiceSet) EXPECT() *MockLabeledAppmeshK8SAwsv1Beta2VirtualServiceSetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledAppmeshK8SAwsv1Beta2VirtualServiceSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledAppmeshK8SAwsv1Beta2VirtualServiceSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledAppmeshK8SAwsv1Beta2VirtualServiceSet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledAppmeshK8SAwsv1Beta2VirtualServiceSet) Set() v1beta2sets.VirtualServiceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1beta2sets.VirtualServiceSet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledAppmeshK8SAwsv1Beta2VirtualServiceSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledAppmeshK8SAwsv1Beta2VirtualServiceSet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledAppmeshK8SAwsv1Beta2VirtualServiceSet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledAppmeshK8SAwsv1Beta2VirtualServiceSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledAppmeshK8SAwsv1Beta2VirtualServiceSet)(nil).Generic))
}

// MockLabeledAppmeshK8SAwsv1Beta2VirtualNodeSet is a mock of LabeledAppmeshK8SAwsv1Beta2VirtualNodeSet interface
type MockLabeledAppmeshK8SAwsv1Beta2VirtualNodeSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledAppmeshK8SAwsv1Beta2VirtualNodeSetMockRecorder
}

// MockLabeledAppmeshK8SAwsv1Beta2VirtualNodeSetMockRecorder is the mock recorder for MockLabeledAppmeshK8SAwsv1Beta2VirtualNodeSet
type MockLabeledAppmeshK8SAwsv1Beta2VirtualNodeSetMockRecorder struct {
	mock *MockLabeledAppmeshK8SAwsv1Beta2VirtualNodeSet
}

// NewMockLabeledAppmeshK8SAwsv1Beta2VirtualNodeSet creates a new mock instance
func NewMockLabeledAppmeshK8SAwsv1Beta2VirtualNodeSet(ctrl *gomock.Controller) *MockLabeledAppmeshK8SAwsv1Beta2VirtualNodeSet {
	mock := &MockLabeledAppmeshK8SAwsv1Beta2VirtualNodeSet{ctrl: ctrl}
	mock.recorder = &MockLabeledAppmeshK8SAwsv1Beta2VirtualNodeSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledAppmeshK8SAwsv1Beta2VirtualNodeSet) EXPECT() *MockLabeledAppmeshK8SAwsv1Beta2VirtualNodeSetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledAppmeshK8SAwsv1Beta2VirtualNodeSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledAppmeshK8SAwsv1Beta2VirtualNodeSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledAppmeshK8SAwsv1Beta2VirtualNodeSet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledAppmeshK8SAwsv1Beta2VirtualNodeSet) Set() v1beta2sets.VirtualNodeSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1beta2sets.VirtualNodeSet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledAppmeshK8SAwsv1Beta2VirtualNodeSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledAppmeshK8SAwsv1Beta2VirtualNodeSet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledAppmeshK8SAwsv1Beta2VirtualNodeSet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledAppmeshK8SAwsv1Beta2VirtualNodeSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledAppmeshK8SAwsv1Beta2VirtualNodeSet)(nil).Generic))
}

// MockLabeledAppmeshK8SAwsv1Beta2VirtualRouterSet is a mock of LabeledAppmeshK8SAwsv1Beta2VirtualRouterSet interface
type MockLabeledAppmeshK8SAwsv1Beta2VirtualRouterSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledAppmeshK8SAwsv1Beta2VirtualRouterSetMockRecorder
}

// MockLabeledAppmeshK8SAwsv1Beta2VirtualRouterSetMockRecorder is the mock recorder for MockLabeledAppmeshK8SAwsv1Beta2VirtualRouterSet
type MockLabeledAppmeshK8SAwsv1Beta2VirtualRouterSetMockRecorder struct {
	mock *MockLabeledAppmeshK8SAwsv1Beta2VirtualRouterSet
}

// NewMockLabeledAppmeshK8SAwsv1Beta2VirtualRouterSet creates a new mock instance
func NewMockLabeledAppmeshK8SAwsv1Beta2VirtualRouterSet(ctrl *gomock.Controller) *MockLabeledAppmeshK8SAwsv1Beta2VirtualRouterSet {
	mock := &MockLabeledAppmeshK8SAwsv1Beta2VirtualRouterSet{ctrl: ctrl}
	mock.recorder = &MockLabeledAppmeshK8SAwsv1Beta2VirtualRouterSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledAppmeshK8SAwsv1Beta2VirtualRouterSet) EXPECT() *MockLabeledAppmeshK8SAwsv1Beta2VirtualRouterSetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledAppmeshK8SAwsv1Beta2VirtualRouterSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledAppmeshK8SAwsv1Beta2VirtualRouterSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledAppmeshK8SAwsv1Beta2VirtualRouterSet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledAppmeshK8SAwsv1Beta2VirtualRouterSet) Set() v1beta2sets.VirtualRouterSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1beta2sets.VirtualRouterSet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledAppmeshK8SAwsv1Beta2VirtualRouterSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledAppmeshK8SAwsv1Beta2VirtualRouterSet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledAppmeshK8SAwsv1Beta2VirtualRouterSet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledAppmeshK8SAwsv1Beta2VirtualRouterSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledAppmeshK8SAwsv1Beta2VirtualRouterSet)(nil).Generic))
}

// MockBuilder is a mock of Builder interface
type MockBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockBuilderMockRecorder
}

// MockBuilderMockRecorder is the mock recorder for MockBuilder
type MockBuilderMockRecorder struct {
	mock *MockBuilder
}

// NewMockBuilder creates a new mock instance
func NewMockBuilder(ctrl *gomock.Controller) *MockBuilder {
	mock := &MockBuilder{ctrl: ctrl}
	mock.recorder = &MockBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBuilder) EXPECT() *MockBuilderMockRecorder {
	return m.recorder
}

// AddAppmeshK8SAwsv1Beta2VirtualServices mocks base method
func (m *MockBuilder) AddAppmeshK8SAwsv1Beta2VirtualServices(appmeshK8SAwsv1Beta2VirtualServices ...*v1beta2.VirtualService) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range appmeshK8SAwsv1Beta2VirtualServices {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddAppmeshK8SAwsv1Beta2VirtualServices", varargs...)
}

// AddAppmeshK8SAwsv1Beta2VirtualServices indicates an expected call of AddAppmeshK8SAwsv1Beta2VirtualServices
func (mr *MockBuilderMockRecorder) AddAppmeshK8SAwsv1Beta2VirtualServices(appmeshK8SAwsv1Beta2VirtualServices ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAppmeshK8SAwsv1Beta2VirtualServices", reflect.TypeOf((*MockBuilder)(nil).AddAppmeshK8SAwsv1Beta2VirtualServices), appmeshK8SAwsv1Beta2VirtualServices...)
}

// GetAppmeshK8SAwsv1Beta2VirtualServices mocks base method
func (m *MockBuilder) GetAppmeshK8SAwsv1Beta2VirtualServices() v1beta2sets.VirtualServiceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppmeshK8SAwsv1Beta2VirtualServices")
	ret0, _ := ret[0].(v1beta2sets.VirtualServiceSet)
	return ret0
}

// GetAppmeshK8SAwsv1Beta2VirtualServices indicates an expected call of GetAppmeshK8SAwsv1Beta2VirtualServices
func (mr *MockBuilderMockRecorder) GetAppmeshK8SAwsv1Beta2VirtualServices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppmeshK8SAwsv1Beta2VirtualServices", reflect.TypeOf((*MockBuilder)(nil).GetAppmeshK8SAwsv1Beta2VirtualServices))
}

// AddAppmeshK8SAwsv1Beta2VirtualNodes mocks base method
func (m *MockBuilder) AddAppmeshK8SAwsv1Beta2VirtualNodes(appmeshK8SAwsv1Beta2VirtualNodes ...*v1beta2.VirtualNode) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range appmeshK8SAwsv1Beta2VirtualNodes {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddAppmeshK8SAwsv1Beta2VirtualNodes", varargs...)
}

// AddAppmeshK8SAwsv1Beta2VirtualNodes indicates an expected call of AddAppmeshK8SAwsv1Beta2VirtualNodes
func (mr *MockBuilderMockRecorder) AddAppmeshK8SAwsv1Beta2VirtualNodes(appmeshK8SAwsv1Beta2VirtualNodes ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAppmeshK8SAwsv1Beta2VirtualNodes", reflect.TypeOf((*MockBuilder)(nil).AddAppmeshK8SAwsv1Beta2VirtualNodes), appmeshK8SAwsv1Beta2VirtualNodes...)
}

// GetAppmeshK8SAwsv1Beta2VirtualNodes mocks base method
func (m *MockBuilder) GetAppmeshK8SAwsv1Beta2VirtualNodes() v1beta2sets.VirtualNodeSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppmeshK8SAwsv1Beta2VirtualNodes")
	ret0, _ := ret[0].(v1beta2sets.VirtualNodeSet)
	return ret0
}

// GetAppmeshK8SAwsv1Beta2VirtualNodes indicates an expected call of GetAppmeshK8SAwsv1Beta2VirtualNodes
func (mr *MockBuilderMockRecorder) GetAppmeshK8SAwsv1Beta2VirtualNodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppmeshK8SAwsv1Beta2VirtualNodes", reflect.TypeOf((*MockBuilder)(nil).GetAppmeshK8SAwsv1Beta2VirtualNodes))
}

// AddAppmeshK8SAwsv1Beta2VirtualRouters mocks base method
func (m *MockBuilder) AddAppmeshK8SAwsv1Beta2VirtualRouters(appmeshK8SAwsv1Beta2VirtualRouters ...*v1beta2.VirtualRouter) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range appmeshK8SAwsv1Beta2VirtualRouters {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddAppmeshK8SAwsv1Beta2VirtualRouters", varargs...)
}

// AddAppmeshK8SAwsv1Beta2VirtualRouters indicates an expected call of AddAppmeshK8SAwsv1Beta2VirtualRouters
func (mr *MockBuilderMockRecorder) AddAppmeshK8SAwsv1Beta2VirtualRouters(appmeshK8SAwsv1Beta2VirtualRouters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAppmeshK8SAwsv1Beta2VirtualRouters", reflect.TypeOf((*MockBuilder)(nil).AddAppmeshK8SAwsv1Beta2VirtualRouters), appmeshK8SAwsv1Beta2VirtualRouters...)
}

// GetAppmeshK8SAwsv1Beta2VirtualRouters mocks base method
func (m *MockBuilder) GetAppmeshK8SAwsv1Beta2VirtualRouters() v1beta2sets.VirtualRouterSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppmeshK8SAwsv1Beta2VirtualRouters")
	ret0, _ := ret[0].(v1beta2sets.VirtualRouterSet)
	return ret0
}

// GetAppmeshK8SAwsv1Beta2VirtualRouters indicates an expected call of GetAppmeshK8SAwsv1Beta2VirtualRouters
func (mr *MockBuilderMockRecorder) GetAppmeshK8SAwsv1Beta2VirtualRouters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppmeshK8SAwsv1Beta2VirtualRouters", reflect.TypeOf((*MockBuilder)(nil).GetAppmeshK8SAwsv1Beta2VirtualRouters))
}

// BuildLabelPartitionedSnapshot mocks base method
func (m *MockBuilder) BuildLabelPartitionedSnapshot(labelKey string) (appmesh.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildLabelPartitionedSnapshot", labelKey)
	ret0, _ := ret[0].(appmesh.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildLabelPartitionedSnapshot indicates an expected call of BuildLabelPartitionedSnapshot
func (mr *MockBuilderMockRecorder) BuildLabelPartitionedSnapshot(labelKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildLabelPartitionedSnapshot", reflect.TypeOf((*MockBuilder)(nil).BuildLabelPartitionedSnapshot), labelKey)
}

// BuildSinglePartitionedSnapshot mocks base method
func (m *MockBuilder) BuildSinglePartitionedSnapshot(snapshotLabels map[string]string) (appmesh.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildSinglePartitionedSnapshot", snapshotLabels)
	ret0, _ := ret[0].(appmesh.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildSinglePartitionedSnapshot indicates an expected call of BuildSinglePartitionedSnapshot
func (mr *MockBuilderMockRecorder) BuildSinglePartitionedSnapshot(snapshotLabels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildSinglePartitionedSnapshot", reflect.TypeOf((*MockBuilder)(nil).BuildSinglePartitionedSnapshot), snapshotLabels)
}

// AddCluster mocks base method
func (m *MockBuilder) AddCluster(cluster string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddCluster", cluster)
}

// AddCluster indicates an expected call of AddCluster
func (mr *MockBuilderMockRecorder) AddCluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCluster", reflect.TypeOf((*MockBuilder)(nil).AddCluster), cluster)
}

// Clusters mocks base method
func (m *MockBuilder) Clusters() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clusters")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Clusters indicates an expected call of Clusters
func (mr *MockBuilderMockRecorder) Clusters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clusters", reflect.TypeOf((*MockBuilder)(nil).Clusters))
}

// Merge mocks base method
func (m *MockBuilder) Merge(other appmesh.Builder) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Merge", other)
}

// Merge indicates an expected call of Merge
func (mr *MockBuilderMockRecorder) Merge(other interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MockBuilder)(nil).Merge), other)
}

// Clone mocks base method
func (m *MockBuilder) Clone() appmesh.Builder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(appmesh.Builder)
	return ret0
}

// Clone indicates an expected call of Clone
func (mr *MockBuilderMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockBuilder)(nil).Clone))
}

// Delta mocks base method
func (m *MockBuilder) Delta(newSnap appmesh.Builder) output.SnapshotDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSnap)
	ret0, _ := ret[0].(output.SnapshotDelta)
	return ret0
}

// Delta indicates an expected call of Delta
func (mr *MockBuilderMockRecorder) Delta(newSnap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockBuilder)(nil).Delta), newSnap)
}
