// Code generated by MockGen. DO NOT EDIT.
// Source: ./snapshot.go

// Package mock_smi is a generated GoMock package.
package mock_smi

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha2 "github.com/servicemeshinterface/smi-sdk-go/pkg/apis/access/v1alpha2"
	v1alpha3 "github.com/servicemeshinterface/smi-sdk-go/pkg/apis/specs/v1alpha3"
	v1alpha20 "github.com/servicemeshinterface/smi-sdk-go/pkg/apis/split/v1alpha2"
	v1alpha2sets "github.com/solo-io/external-apis/pkg/api/smi/access.smi-spec.io/v1alpha2/sets"
	v1alpha3sets "github.com/solo-io/external-apis/pkg/api/smi/specs.smi-spec.io/v1alpha3/sets"
	v1alpha2sets0 "github.com/solo-io/external-apis/pkg/api/smi/split.smi-spec.io/v1alpha2/sets"
	smi "github.com/solo-io/gloo-mesh/pkg/api/networking.mesh.gloo.solo.io/output/smi"
	output "github.com/solo-io/skv2/contrib/pkg/output"
	multicluster "github.com/solo-io/skv2/pkg/multicluster"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockSnapshot is a mock of Snapshot interface
type MockSnapshot struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotMockRecorder
}

// MockSnapshotMockRecorder is the mock recorder for MockSnapshot
type MockSnapshotMockRecorder struct {
	mock *MockSnapshot
}

// NewMockSnapshot creates a new mock instance
func NewMockSnapshot(ctrl *gomock.Controller) *MockSnapshot {
	mock := &MockSnapshot{ctrl: ctrl}
	mock.recorder = &MockSnapshotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSnapshot) EXPECT() *MockSnapshotMockRecorder {
	return m.recorder
}

// SplitSmiSpecIo_V1Alpha2_TrafficSplits mocks base method
func (m *MockSnapshot) SplitSmiSpecIo_V1Alpha2_TrafficSplits() []smi.LabeledSplitSmiSpecIo_V1Alpha2_TrafficSplitSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SplitSmiSpecIo_V1Alpha2_TrafficSplits")
	ret0, _ := ret[0].([]smi.LabeledSplitSmiSpecIo_V1Alpha2_TrafficSplitSet)
	return ret0
}

// SplitSmiSpecIo_V1Alpha2_TrafficSplits indicates an expected call of SplitSmiSpecIo_V1Alpha2_TrafficSplits
func (mr *MockSnapshotMockRecorder) SplitSmiSpecIo_V1Alpha2_TrafficSplits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SplitSmiSpecIo_V1Alpha2_TrafficSplits", reflect.TypeOf((*MockSnapshot)(nil).SplitSmiSpecIo_V1Alpha2_TrafficSplits))
}

// AccessSmiSpecIo_V1Alpha2_TrafficTargets mocks base method
func (m *MockSnapshot) AccessSmiSpecIo_V1Alpha2_TrafficTargets() []smi.LabeledAccessSmiSpecIo_V1Alpha2_TrafficTargetSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessSmiSpecIo_V1Alpha2_TrafficTargets")
	ret0, _ := ret[0].([]smi.LabeledAccessSmiSpecIo_V1Alpha2_TrafficTargetSet)
	return ret0
}

// AccessSmiSpecIo_V1Alpha2_TrafficTargets indicates an expected call of AccessSmiSpecIo_V1Alpha2_TrafficTargets
func (mr *MockSnapshotMockRecorder) AccessSmiSpecIo_V1Alpha2_TrafficTargets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessSmiSpecIo_V1Alpha2_TrafficTargets", reflect.TypeOf((*MockSnapshot)(nil).AccessSmiSpecIo_V1Alpha2_TrafficTargets))
}

// SpecsSmiSpecIo_V1Alpha3_HTTPRouteGroups mocks base method
func (m *MockSnapshot) SpecsSmiSpecIo_V1Alpha3_HTTPRouteGroups() []smi.LabeledSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroupSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpecsSmiSpecIo_V1Alpha3_HTTPRouteGroups")
	ret0, _ := ret[0].([]smi.LabeledSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroupSet)
	return ret0
}

// SpecsSmiSpecIo_V1Alpha3_HTTPRouteGroups indicates an expected call of SpecsSmiSpecIo_V1Alpha3_HTTPRouteGroups
func (mr *MockSnapshotMockRecorder) SpecsSmiSpecIo_V1Alpha3_HTTPRouteGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpecsSmiSpecIo_V1Alpha3_HTTPRouteGroups", reflect.TypeOf((*MockSnapshot)(nil).SpecsSmiSpecIo_V1Alpha3_HTTPRouteGroups))
}

// ApplyLocalCluster mocks base method
func (m *MockSnapshot) ApplyLocalCluster(ctx context.Context, clusterClient client.Client, errHandler output.ErrorHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ApplyLocalCluster", ctx, clusterClient, errHandler)
}

// ApplyLocalCluster indicates an expected call of ApplyLocalCluster
func (mr *MockSnapshotMockRecorder) ApplyLocalCluster(ctx, clusterClient, errHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyLocalCluster", reflect.TypeOf((*MockSnapshot)(nil).ApplyLocalCluster), ctx, clusterClient, errHandler)
}

// ApplyMultiCluster mocks base method
func (m *MockSnapshot) ApplyMultiCluster(ctx context.Context, multiClusterClient multicluster.Client, errHandler output.ErrorHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ApplyMultiCluster", ctx, multiClusterClient, errHandler)
}

// ApplyMultiCluster indicates an expected call of ApplyMultiCluster
func (mr *MockSnapshotMockRecorder) ApplyMultiCluster(ctx, multiClusterClient, errHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyMultiCluster", reflect.TypeOf((*MockSnapshot)(nil).ApplyMultiCluster), ctx, multiClusterClient, errHandler)
}

// MarshalJSON mocks base method
func (m *MockSnapshot) MarshalJSON() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalJSON")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalJSON indicates an expected call of MarshalJSON
func (mr *MockSnapshotMockRecorder) MarshalJSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalJSON", reflect.TypeOf((*MockSnapshot)(nil).MarshalJSON))
}

// MockLabeledSplitSmiSpecIo_V1Alpha2_TrafficSplitSet is a mock of LabeledSplitSmiSpecIo_V1Alpha2_TrafficSplitSet interface
type MockLabeledSplitSmiSpecIo_V1Alpha2_TrafficSplitSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledSplitSmiSpecIo_V1Alpha2_TrafficSplitSetMockRecorder
}

// MockLabeledSplitSmiSpecIo_V1Alpha2_TrafficSplitSetMockRecorder is the mock recorder for MockLabeledSplitSmiSpecIo_V1Alpha2_TrafficSplitSet
type MockLabeledSplitSmiSpecIo_V1Alpha2_TrafficSplitSetMockRecorder struct {
	mock *MockLabeledSplitSmiSpecIo_V1Alpha2_TrafficSplitSet
}

// NewMockLabeledSplitSmiSpecIo_V1Alpha2_TrafficSplitSet creates a new mock instance
func NewMockLabeledSplitSmiSpecIo_V1Alpha2_TrafficSplitSet(ctrl *gomock.Controller) *MockLabeledSplitSmiSpecIo_V1Alpha2_TrafficSplitSet {
	mock := &MockLabeledSplitSmiSpecIo_V1Alpha2_TrafficSplitSet{ctrl: ctrl}
	mock.recorder = &MockLabeledSplitSmiSpecIo_V1Alpha2_TrafficSplitSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledSplitSmiSpecIo_V1Alpha2_TrafficSplitSet) EXPECT() *MockLabeledSplitSmiSpecIo_V1Alpha2_TrafficSplitSetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledSplitSmiSpecIo_V1Alpha2_TrafficSplitSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledSplitSmiSpecIo_V1Alpha2_TrafficSplitSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledSplitSmiSpecIo_V1Alpha2_TrafficSplitSet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledSplitSmiSpecIo_V1Alpha2_TrafficSplitSet) Set() v1alpha2sets0.TrafficSplitSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha2sets0.TrafficSplitSet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledSplitSmiSpecIo_V1Alpha2_TrafficSplitSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledSplitSmiSpecIo_V1Alpha2_TrafficSplitSet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledSplitSmiSpecIo_V1Alpha2_TrafficSplitSet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledSplitSmiSpecIo_V1Alpha2_TrafficSplitSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledSplitSmiSpecIo_V1Alpha2_TrafficSplitSet)(nil).Generic))
}

// MockLabeledAccessSmiSpecIo_V1Alpha2_TrafficTargetSet is a mock of LabeledAccessSmiSpecIo_V1Alpha2_TrafficTargetSet interface
type MockLabeledAccessSmiSpecIo_V1Alpha2_TrafficTargetSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledAccessSmiSpecIo_V1Alpha2_TrafficTargetSetMockRecorder
}

// MockLabeledAccessSmiSpecIo_V1Alpha2_TrafficTargetSetMockRecorder is the mock recorder for MockLabeledAccessSmiSpecIo_V1Alpha2_TrafficTargetSet
type MockLabeledAccessSmiSpecIo_V1Alpha2_TrafficTargetSetMockRecorder struct {
	mock *MockLabeledAccessSmiSpecIo_V1Alpha2_TrafficTargetSet
}

// NewMockLabeledAccessSmiSpecIo_V1Alpha2_TrafficTargetSet creates a new mock instance
func NewMockLabeledAccessSmiSpecIo_V1Alpha2_TrafficTargetSet(ctrl *gomock.Controller) *MockLabeledAccessSmiSpecIo_V1Alpha2_TrafficTargetSet {
	mock := &MockLabeledAccessSmiSpecIo_V1Alpha2_TrafficTargetSet{ctrl: ctrl}
	mock.recorder = &MockLabeledAccessSmiSpecIo_V1Alpha2_TrafficTargetSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledAccessSmiSpecIo_V1Alpha2_TrafficTargetSet) EXPECT() *MockLabeledAccessSmiSpecIo_V1Alpha2_TrafficTargetSetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledAccessSmiSpecIo_V1Alpha2_TrafficTargetSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledAccessSmiSpecIo_V1Alpha2_TrafficTargetSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledAccessSmiSpecIo_V1Alpha2_TrafficTargetSet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledAccessSmiSpecIo_V1Alpha2_TrafficTargetSet) Set() v1alpha2sets.TrafficTargetSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha2sets.TrafficTargetSet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledAccessSmiSpecIo_V1Alpha2_TrafficTargetSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledAccessSmiSpecIo_V1Alpha2_TrafficTargetSet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledAccessSmiSpecIo_V1Alpha2_TrafficTargetSet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledAccessSmiSpecIo_V1Alpha2_TrafficTargetSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledAccessSmiSpecIo_V1Alpha2_TrafficTargetSet)(nil).Generic))
}

// MockLabeledSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroupSet is a mock of LabeledSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroupSet interface
type MockLabeledSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroupSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroupSetMockRecorder
}

// MockLabeledSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroupSetMockRecorder is the mock recorder for MockLabeledSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroupSet
type MockLabeledSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroupSetMockRecorder struct {
	mock *MockLabeledSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroupSet
}

// NewMockLabeledSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroupSet creates a new mock instance
func NewMockLabeledSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroupSet(ctrl *gomock.Controller) *MockLabeledSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroupSet {
	mock := &MockLabeledSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroupSet{ctrl: ctrl}
	mock.recorder = &MockLabeledSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroupSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroupSet) EXPECT() *MockLabeledSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroupSetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroupSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroupSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroupSet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroupSet) Set() v1alpha3sets.HTTPRouteGroupSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha3sets.HTTPRouteGroupSet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroupSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroupSet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroupSet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroupSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroupSet)(nil).Generic))
}

// MockBuilder is a mock of Builder interface
type MockBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockBuilderMockRecorder
}

// MockBuilderMockRecorder is the mock recorder for MockBuilder
type MockBuilderMockRecorder struct {
	mock *MockBuilder
}

// NewMockBuilder creates a new mock instance
func NewMockBuilder(ctrl *gomock.Controller) *MockBuilder {
	mock := &MockBuilder{ctrl: ctrl}
	mock.recorder = &MockBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBuilder) EXPECT() *MockBuilderMockRecorder {
	return m.recorder
}

// AddSplitSmiSpecIo_V1Alpha2_TrafficSplits mocks base method
func (m *MockBuilder) AddSplitSmiSpecIo_V1Alpha2_TrafficSplits(splitSmiSpecIoV1Alpha2TrafficSplits ...*v1alpha20.TrafficSplit) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range splitSmiSpecIoV1Alpha2TrafficSplits {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddSplitSmiSpecIo_V1Alpha2_TrafficSplits", varargs...)
}

// AddSplitSmiSpecIo_V1Alpha2_TrafficSplits indicates an expected call of AddSplitSmiSpecIo_V1Alpha2_TrafficSplits
func (mr *MockBuilderMockRecorder) AddSplitSmiSpecIo_V1Alpha2_TrafficSplits(splitSmiSpecIoV1Alpha2TrafficSplits ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSplitSmiSpecIo_V1Alpha2_TrafficSplits", reflect.TypeOf((*MockBuilder)(nil).AddSplitSmiSpecIo_V1Alpha2_TrafficSplits), splitSmiSpecIoV1Alpha2TrafficSplits...)
}

// GetSplitSmiSpecIo_V1Alpha2_TrafficSplits mocks base method
func (m *MockBuilder) GetSplitSmiSpecIo_V1Alpha2_TrafficSplits() v1alpha2sets0.TrafficSplitSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSplitSmiSpecIo_V1Alpha2_TrafficSplits")
	ret0, _ := ret[0].(v1alpha2sets0.TrafficSplitSet)
	return ret0
}

// GetSplitSmiSpecIo_V1Alpha2_TrafficSplits indicates an expected call of GetSplitSmiSpecIo_V1Alpha2_TrafficSplits
func (mr *MockBuilderMockRecorder) GetSplitSmiSpecIo_V1Alpha2_TrafficSplits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSplitSmiSpecIo_V1Alpha2_TrafficSplits", reflect.TypeOf((*MockBuilder)(nil).GetSplitSmiSpecIo_V1Alpha2_TrafficSplits))
}

// AddAccessSmiSpecIo_V1Alpha2_TrafficTargets mocks base method
func (m *MockBuilder) AddAccessSmiSpecIo_V1Alpha2_TrafficTargets(accessSmiSpecIoV1Alpha2TrafficTargets ...*v1alpha2.TrafficTarget) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range accessSmiSpecIoV1Alpha2TrafficTargets {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddAccessSmiSpecIo_V1Alpha2_TrafficTargets", varargs...)
}

// AddAccessSmiSpecIo_V1Alpha2_TrafficTargets indicates an expected call of AddAccessSmiSpecIo_V1Alpha2_TrafficTargets
func (mr *MockBuilderMockRecorder) AddAccessSmiSpecIo_V1Alpha2_TrafficTargets(accessSmiSpecIoV1Alpha2TrafficTargets ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccessSmiSpecIo_V1Alpha2_TrafficTargets", reflect.TypeOf((*MockBuilder)(nil).AddAccessSmiSpecIo_V1Alpha2_TrafficTargets), accessSmiSpecIoV1Alpha2TrafficTargets...)
}

// GetAccessSmiSpecIo_V1Alpha2_TrafficTargets mocks base method
func (m *MockBuilder) GetAccessSmiSpecIo_V1Alpha2_TrafficTargets() v1alpha2sets.TrafficTargetSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessSmiSpecIo_V1Alpha2_TrafficTargets")
	ret0, _ := ret[0].(v1alpha2sets.TrafficTargetSet)
	return ret0
}

// GetAccessSmiSpecIo_V1Alpha2_TrafficTargets indicates an expected call of GetAccessSmiSpecIo_V1Alpha2_TrafficTargets
func (mr *MockBuilderMockRecorder) GetAccessSmiSpecIo_V1Alpha2_TrafficTargets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessSmiSpecIo_V1Alpha2_TrafficTargets", reflect.TypeOf((*MockBuilder)(nil).GetAccessSmiSpecIo_V1Alpha2_TrafficTargets))
}

// AddSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroups mocks base method
func (m *MockBuilder) AddSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroups(specsSmiSpecIoV1Alpha3HTTPRouteGroups ...*v1alpha3.HTTPRouteGroup) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range specsSmiSpecIoV1Alpha3HTTPRouteGroups {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroups", varargs...)
}

// AddSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroups indicates an expected call of AddSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroups
func (mr *MockBuilderMockRecorder) AddSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroups(specsSmiSpecIoV1Alpha3HTTPRouteGroups ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroups", reflect.TypeOf((*MockBuilder)(nil).AddSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroups), specsSmiSpecIoV1Alpha3HTTPRouteGroups...)
}

// GetSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroups mocks base method
func (m *MockBuilder) GetSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroups() v1alpha3sets.HTTPRouteGroupSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroups")
	ret0, _ := ret[0].(v1alpha3sets.HTTPRouteGroupSet)
	return ret0
}

// GetSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroups indicates an expected call of GetSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroups
func (mr *MockBuilderMockRecorder) GetSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroups", reflect.TypeOf((*MockBuilder)(nil).GetSpecsSmiSpecIo_V1Alpha3_HTTPRouteGroups))
}

// BuildLabelPartitionedSnapshot mocks base method
func (m *MockBuilder) BuildLabelPartitionedSnapshot(labelKey string) (smi.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildLabelPartitionedSnapshot", labelKey)
	ret0, _ := ret[0].(smi.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildLabelPartitionedSnapshot indicates an expected call of BuildLabelPartitionedSnapshot
func (mr *MockBuilderMockRecorder) BuildLabelPartitionedSnapshot(labelKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildLabelPartitionedSnapshot", reflect.TypeOf((*MockBuilder)(nil).BuildLabelPartitionedSnapshot), labelKey)
}

// BuildSinglePartitionedSnapshot mocks base method
func (m *MockBuilder) BuildSinglePartitionedSnapshot(snapshotLabels map[string]string) (smi.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildSinglePartitionedSnapshot", snapshotLabels)
	ret0, _ := ret[0].(smi.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildSinglePartitionedSnapshot indicates an expected call of BuildSinglePartitionedSnapshot
func (mr *MockBuilderMockRecorder) BuildSinglePartitionedSnapshot(snapshotLabels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildSinglePartitionedSnapshot", reflect.TypeOf((*MockBuilder)(nil).BuildSinglePartitionedSnapshot), snapshotLabels)
}

// AddCluster mocks base method
func (m *MockBuilder) AddCluster(cluster string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddCluster", cluster)
}

// AddCluster indicates an expected call of AddCluster
func (mr *MockBuilderMockRecorder) AddCluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCluster", reflect.TypeOf((*MockBuilder)(nil).AddCluster), cluster)
}

// Clusters mocks base method
func (m *MockBuilder) Clusters() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clusters")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Clusters indicates an expected call of Clusters
func (mr *MockBuilderMockRecorder) Clusters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clusters", reflect.TypeOf((*MockBuilder)(nil).Clusters))
}

// Merge mocks base method
func (m *MockBuilder) Merge(other smi.Builder) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Merge", other)
}

// Merge indicates an expected call of Merge
func (mr *MockBuilderMockRecorder) Merge(other interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MockBuilder)(nil).Merge), other)
}

// Clone mocks base method
func (m *MockBuilder) Clone() smi.Builder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(smi.Builder)
	return ret0
}

// Clone indicates an expected call of Clone
func (mr *MockBuilderMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockBuilder)(nil).Clone))
}

// Delta mocks base method
func (m *MockBuilder) Delta(newSnap smi.Builder) output.SnapshotDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSnap)
	ret0, _ := ret[0].(output.SnapshotDelta)
	return ret0
}

// Delta indicates an expected call of Delta
func (mr *MockBuilderMockRecorder) Delta(newSnap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockBuilder)(nil).Delta), newSnap)
}
