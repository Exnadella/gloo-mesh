// Code generated by MockGen. DO NOT EDIT.
// Source: ./snapshot.go

// Package mock_smi is a generated GoMock package.
package mock_smi

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha2 "github.com/servicemeshinterface/smi-sdk-go/pkg/apis/access/v1alpha2"
	v1alpha3 "github.com/servicemeshinterface/smi-sdk-go/pkg/apis/specs/v1alpha3"
	v1alpha20 "github.com/servicemeshinterface/smi-sdk-go/pkg/apis/split/v1alpha2"
	v1alpha2sets "github.com/solo-io/external-apis/pkg/api/smi/access.smi-spec.io/v1alpha2/sets"
	v1alpha3sets "github.com/solo-io/external-apis/pkg/api/smi/specs.smi-spec.io/v1alpha3/sets"
	v1alpha2sets0 "github.com/solo-io/external-apis/pkg/api/smi/split.smi-spec.io/v1alpha2/sets"
	smi "github.com/solo-io/gloo-mesh/pkg/api/networking.mesh.gloo.solo.io/output/smi"
	output "github.com/solo-io/skv2/contrib/pkg/output"
	multicluster "github.com/solo-io/skv2/pkg/multicluster"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockSnapshot is a mock of Snapshot interface
type MockSnapshot struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotMockRecorder
}

// MockSnapshotMockRecorder is the mock recorder for MockSnapshot
type MockSnapshotMockRecorder struct {
	mock *MockSnapshot
}

// NewMockSnapshot creates a new mock instance
func NewMockSnapshot(ctrl *gomock.Controller) *MockSnapshot {
	mock := &MockSnapshot{ctrl: ctrl}
	mock.recorder = &MockSnapshotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSnapshot) EXPECT() *MockSnapshotMockRecorder {
	return m.recorder
}

// SplitSmiSpecIov1Alpha2TrafficSplits mocks base method
func (m *MockSnapshot) SplitSmiSpecIov1Alpha2TrafficSplits() []smi.LabeledSplitSmiSpecIov1Alpha2TrafficSplitSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SplitSmiSpecIov1Alpha2TrafficSplits")
	ret0, _ := ret[0].([]smi.LabeledSplitSmiSpecIov1Alpha2TrafficSplitSet)
	return ret0
}

// SplitSmiSpecIov1Alpha2TrafficSplits indicates an expected call of SplitSmiSpecIov1Alpha2TrafficSplits
func (mr *MockSnapshotMockRecorder) SplitSmiSpecIov1Alpha2TrafficSplits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SplitSmiSpecIov1Alpha2TrafficSplits", reflect.TypeOf((*MockSnapshot)(nil).SplitSmiSpecIov1Alpha2TrafficSplits))
}

// AccessSmiSpecIov1Alpha2TrafficTargets mocks base method
func (m *MockSnapshot) AccessSmiSpecIov1Alpha2TrafficTargets() []smi.LabeledAccessSmiSpecIov1Alpha2TrafficTargetSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessSmiSpecIov1Alpha2TrafficTargets")
	ret0, _ := ret[0].([]smi.LabeledAccessSmiSpecIov1Alpha2TrafficTargetSet)
	return ret0
}

// AccessSmiSpecIov1Alpha2TrafficTargets indicates an expected call of AccessSmiSpecIov1Alpha2TrafficTargets
func (mr *MockSnapshotMockRecorder) AccessSmiSpecIov1Alpha2TrafficTargets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessSmiSpecIov1Alpha2TrafficTargets", reflect.TypeOf((*MockSnapshot)(nil).AccessSmiSpecIov1Alpha2TrafficTargets))
}

// SpecsSmiSpecIov1Alpha3HTTPRouteGroups mocks base method
func (m *MockSnapshot) SpecsSmiSpecIov1Alpha3HTTPRouteGroups() []smi.LabeledSpecsSmiSpecIov1Alpha3HTTPRouteGroupSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpecsSmiSpecIov1Alpha3HTTPRouteGroups")
	ret0, _ := ret[0].([]smi.LabeledSpecsSmiSpecIov1Alpha3HTTPRouteGroupSet)
	return ret0
}

// SpecsSmiSpecIov1Alpha3HTTPRouteGroups indicates an expected call of SpecsSmiSpecIov1Alpha3HTTPRouteGroups
func (mr *MockSnapshotMockRecorder) SpecsSmiSpecIov1Alpha3HTTPRouteGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpecsSmiSpecIov1Alpha3HTTPRouteGroups", reflect.TypeOf((*MockSnapshot)(nil).SpecsSmiSpecIov1Alpha3HTTPRouteGroups))
}

// ApplyLocalCluster mocks base method
func (m *MockSnapshot) ApplyLocalCluster(ctx context.Context, clusterClient client.Client, errHandler output.ErrorHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ApplyLocalCluster", ctx, clusterClient, errHandler)
}

// ApplyLocalCluster indicates an expected call of ApplyLocalCluster
func (mr *MockSnapshotMockRecorder) ApplyLocalCluster(ctx, clusterClient, errHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyLocalCluster", reflect.TypeOf((*MockSnapshot)(nil).ApplyLocalCluster), ctx, clusterClient, errHandler)
}

// ApplyMultiCluster mocks base method
func (m *MockSnapshot) ApplyMultiCluster(ctx context.Context, multiClusterClient multicluster.Client, errHandler output.ErrorHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ApplyMultiCluster", ctx, multiClusterClient, errHandler)
}

// ApplyMultiCluster indicates an expected call of ApplyMultiCluster
func (mr *MockSnapshotMockRecorder) ApplyMultiCluster(ctx, multiClusterClient, errHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyMultiCluster", reflect.TypeOf((*MockSnapshot)(nil).ApplyMultiCluster), ctx, multiClusterClient, errHandler)
}

// MarshalJSON mocks base method
func (m *MockSnapshot) MarshalJSON() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalJSON")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalJSON indicates an expected call of MarshalJSON
func (mr *MockSnapshotMockRecorder) MarshalJSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalJSON", reflect.TypeOf((*MockSnapshot)(nil).MarshalJSON))
}

// MockLabeledSplitSmiSpecIov1Alpha2TrafficSplitSet is a mock of LabeledSplitSmiSpecIov1Alpha2TrafficSplitSet interface
type MockLabeledSplitSmiSpecIov1Alpha2TrafficSplitSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledSplitSmiSpecIov1Alpha2TrafficSplitSetMockRecorder
}

// MockLabeledSplitSmiSpecIov1Alpha2TrafficSplitSetMockRecorder is the mock recorder for MockLabeledSplitSmiSpecIov1Alpha2TrafficSplitSet
type MockLabeledSplitSmiSpecIov1Alpha2TrafficSplitSetMockRecorder struct {
	mock *MockLabeledSplitSmiSpecIov1Alpha2TrafficSplitSet
}

// NewMockLabeledSplitSmiSpecIov1Alpha2TrafficSplitSet creates a new mock instance
func NewMockLabeledSplitSmiSpecIov1Alpha2TrafficSplitSet(ctrl *gomock.Controller) *MockLabeledSplitSmiSpecIov1Alpha2TrafficSplitSet {
	mock := &MockLabeledSplitSmiSpecIov1Alpha2TrafficSplitSet{ctrl: ctrl}
	mock.recorder = &MockLabeledSplitSmiSpecIov1Alpha2TrafficSplitSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledSplitSmiSpecIov1Alpha2TrafficSplitSet) EXPECT() *MockLabeledSplitSmiSpecIov1Alpha2TrafficSplitSetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledSplitSmiSpecIov1Alpha2TrafficSplitSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledSplitSmiSpecIov1Alpha2TrafficSplitSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledSplitSmiSpecIov1Alpha2TrafficSplitSet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledSplitSmiSpecIov1Alpha2TrafficSplitSet) Set() v1alpha2sets0.TrafficSplitSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha2sets0.TrafficSplitSet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledSplitSmiSpecIov1Alpha2TrafficSplitSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledSplitSmiSpecIov1Alpha2TrafficSplitSet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledSplitSmiSpecIov1Alpha2TrafficSplitSet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledSplitSmiSpecIov1Alpha2TrafficSplitSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledSplitSmiSpecIov1Alpha2TrafficSplitSet)(nil).Generic))
}

// MockLabeledAccessSmiSpecIov1Alpha2TrafficTargetSet is a mock of LabeledAccessSmiSpecIov1Alpha2TrafficTargetSet interface
type MockLabeledAccessSmiSpecIov1Alpha2TrafficTargetSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledAccessSmiSpecIov1Alpha2TrafficTargetSetMockRecorder
}

// MockLabeledAccessSmiSpecIov1Alpha2TrafficTargetSetMockRecorder is the mock recorder for MockLabeledAccessSmiSpecIov1Alpha2TrafficTargetSet
type MockLabeledAccessSmiSpecIov1Alpha2TrafficTargetSetMockRecorder struct {
	mock *MockLabeledAccessSmiSpecIov1Alpha2TrafficTargetSet
}

// NewMockLabeledAccessSmiSpecIov1Alpha2TrafficTargetSet creates a new mock instance
func NewMockLabeledAccessSmiSpecIov1Alpha2TrafficTargetSet(ctrl *gomock.Controller) *MockLabeledAccessSmiSpecIov1Alpha2TrafficTargetSet {
	mock := &MockLabeledAccessSmiSpecIov1Alpha2TrafficTargetSet{ctrl: ctrl}
	mock.recorder = &MockLabeledAccessSmiSpecIov1Alpha2TrafficTargetSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledAccessSmiSpecIov1Alpha2TrafficTargetSet) EXPECT() *MockLabeledAccessSmiSpecIov1Alpha2TrafficTargetSetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledAccessSmiSpecIov1Alpha2TrafficTargetSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledAccessSmiSpecIov1Alpha2TrafficTargetSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledAccessSmiSpecIov1Alpha2TrafficTargetSet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledAccessSmiSpecIov1Alpha2TrafficTargetSet) Set() v1alpha2sets.TrafficTargetSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha2sets.TrafficTargetSet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledAccessSmiSpecIov1Alpha2TrafficTargetSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledAccessSmiSpecIov1Alpha2TrafficTargetSet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledAccessSmiSpecIov1Alpha2TrafficTargetSet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledAccessSmiSpecIov1Alpha2TrafficTargetSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledAccessSmiSpecIov1Alpha2TrafficTargetSet)(nil).Generic))
}

// MockLabeledSpecsSmiSpecIov1Alpha3HTTPRouteGroupSet is a mock of LabeledSpecsSmiSpecIov1Alpha3HTTPRouteGroupSet interface
type MockLabeledSpecsSmiSpecIov1Alpha3HTTPRouteGroupSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledSpecsSmiSpecIov1Alpha3HTTPRouteGroupSetMockRecorder
}

// MockLabeledSpecsSmiSpecIov1Alpha3HTTPRouteGroupSetMockRecorder is the mock recorder for MockLabeledSpecsSmiSpecIov1Alpha3HTTPRouteGroupSet
type MockLabeledSpecsSmiSpecIov1Alpha3HTTPRouteGroupSetMockRecorder struct {
	mock *MockLabeledSpecsSmiSpecIov1Alpha3HTTPRouteGroupSet
}

// NewMockLabeledSpecsSmiSpecIov1Alpha3HTTPRouteGroupSet creates a new mock instance
func NewMockLabeledSpecsSmiSpecIov1Alpha3HTTPRouteGroupSet(ctrl *gomock.Controller) *MockLabeledSpecsSmiSpecIov1Alpha3HTTPRouteGroupSet {
	mock := &MockLabeledSpecsSmiSpecIov1Alpha3HTTPRouteGroupSet{ctrl: ctrl}
	mock.recorder = &MockLabeledSpecsSmiSpecIov1Alpha3HTTPRouteGroupSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledSpecsSmiSpecIov1Alpha3HTTPRouteGroupSet) EXPECT() *MockLabeledSpecsSmiSpecIov1Alpha3HTTPRouteGroupSetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledSpecsSmiSpecIov1Alpha3HTTPRouteGroupSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledSpecsSmiSpecIov1Alpha3HTTPRouteGroupSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledSpecsSmiSpecIov1Alpha3HTTPRouteGroupSet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledSpecsSmiSpecIov1Alpha3HTTPRouteGroupSet) Set() v1alpha3sets.HTTPRouteGroupSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha3sets.HTTPRouteGroupSet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledSpecsSmiSpecIov1Alpha3HTTPRouteGroupSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledSpecsSmiSpecIov1Alpha3HTTPRouteGroupSet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledSpecsSmiSpecIov1Alpha3HTTPRouteGroupSet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledSpecsSmiSpecIov1Alpha3HTTPRouteGroupSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledSpecsSmiSpecIov1Alpha3HTTPRouteGroupSet)(nil).Generic))
}

// MockBuilder is a mock of Builder interface
type MockBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockBuilderMockRecorder
}

// MockBuilderMockRecorder is the mock recorder for MockBuilder
type MockBuilderMockRecorder struct {
	mock *MockBuilder
}

// NewMockBuilder creates a new mock instance
func NewMockBuilder(ctrl *gomock.Controller) *MockBuilder {
	mock := &MockBuilder{ctrl: ctrl}
	mock.recorder = &MockBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBuilder) EXPECT() *MockBuilderMockRecorder {
	return m.recorder
}

// AddSplitSmiSpecIov1Alpha2TrafficSplits mocks base method
func (m *MockBuilder) AddSplitSmiSpecIov1Alpha2TrafficSplits(splitSmiSpecIov1Alpha2TrafficSplits ...*v1alpha20.TrafficSplit) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range splitSmiSpecIov1Alpha2TrafficSplits {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddSplitSmiSpecIov1Alpha2TrafficSplits", varargs...)
}

// AddSplitSmiSpecIov1Alpha2TrafficSplits indicates an expected call of AddSplitSmiSpecIov1Alpha2TrafficSplits
func (mr *MockBuilderMockRecorder) AddSplitSmiSpecIov1Alpha2TrafficSplits(splitSmiSpecIov1Alpha2TrafficSplits ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSplitSmiSpecIov1Alpha2TrafficSplits", reflect.TypeOf((*MockBuilder)(nil).AddSplitSmiSpecIov1Alpha2TrafficSplits), splitSmiSpecIov1Alpha2TrafficSplits...)
}

// GetSplitSmiSpecIov1Alpha2TrafficSplits mocks base method
func (m *MockBuilder) GetSplitSmiSpecIov1Alpha2TrafficSplits() v1alpha2sets0.TrafficSplitSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSplitSmiSpecIov1Alpha2TrafficSplits")
	ret0, _ := ret[0].(v1alpha2sets0.TrafficSplitSet)
	return ret0
}

// GetSplitSmiSpecIov1Alpha2TrafficSplits indicates an expected call of GetSplitSmiSpecIov1Alpha2TrafficSplits
func (mr *MockBuilderMockRecorder) GetSplitSmiSpecIov1Alpha2TrafficSplits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSplitSmiSpecIov1Alpha2TrafficSplits", reflect.TypeOf((*MockBuilder)(nil).GetSplitSmiSpecIov1Alpha2TrafficSplits))
}

// AddAccessSmiSpecIov1Alpha2TrafficTargets mocks base method
func (m *MockBuilder) AddAccessSmiSpecIov1Alpha2TrafficTargets(accessSmiSpecIov1Alpha2TrafficTargets ...*v1alpha2.TrafficTarget) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range accessSmiSpecIov1Alpha2TrafficTargets {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddAccessSmiSpecIov1Alpha2TrafficTargets", varargs...)
}

// AddAccessSmiSpecIov1Alpha2TrafficTargets indicates an expected call of AddAccessSmiSpecIov1Alpha2TrafficTargets
func (mr *MockBuilderMockRecorder) AddAccessSmiSpecIov1Alpha2TrafficTargets(accessSmiSpecIov1Alpha2TrafficTargets ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccessSmiSpecIov1Alpha2TrafficTargets", reflect.TypeOf((*MockBuilder)(nil).AddAccessSmiSpecIov1Alpha2TrafficTargets), accessSmiSpecIov1Alpha2TrafficTargets...)
}

// GetAccessSmiSpecIov1Alpha2TrafficTargets mocks base method
func (m *MockBuilder) GetAccessSmiSpecIov1Alpha2TrafficTargets() v1alpha2sets.TrafficTargetSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessSmiSpecIov1Alpha2TrafficTargets")
	ret0, _ := ret[0].(v1alpha2sets.TrafficTargetSet)
	return ret0
}

// GetAccessSmiSpecIov1Alpha2TrafficTargets indicates an expected call of GetAccessSmiSpecIov1Alpha2TrafficTargets
func (mr *MockBuilderMockRecorder) GetAccessSmiSpecIov1Alpha2TrafficTargets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessSmiSpecIov1Alpha2TrafficTargets", reflect.TypeOf((*MockBuilder)(nil).GetAccessSmiSpecIov1Alpha2TrafficTargets))
}

// AddSpecsSmiSpecIov1Alpha3HTTPRouteGroups mocks base method
func (m *MockBuilder) AddSpecsSmiSpecIov1Alpha3HTTPRouteGroups(specsSmiSpecIov1Alpha3HTTPRouteGroups ...*v1alpha3.HTTPRouteGroup) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range specsSmiSpecIov1Alpha3HTTPRouteGroups {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddSpecsSmiSpecIov1Alpha3HTTPRouteGroups", varargs...)
}

// AddSpecsSmiSpecIov1Alpha3HTTPRouteGroups indicates an expected call of AddSpecsSmiSpecIov1Alpha3HTTPRouteGroups
func (mr *MockBuilderMockRecorder) AddSpecsSmiSpecIov1Alpha3HTTPRouteGroups(specsSmiSpecIov1Alpha3HTTPRouteGroups ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSpecsSmiSpecIov1Alpha3HTTPRouteGroups", reflect.TypeOf((*MockBuilder)(nil).AddSpecsSmiSpecIov1Alpha3HTTPRouteGroups), specsSmiSpecIov1Alpha3HTTPRouteGroups...)
}

// GetSpecsSmiSpecIov1Alpha3HTTPRouteGroups mocks base method
func (m *MockBuilder) GetSpecsSmiSpecIov1Alpha3HTTPRouteGroups() v1alpha3sets.HTTPRouteGroupSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpecsSmiSpecIov1Alpha3HTTPRouteGroups")
	ret0, _ := ret[0].(v1alpha3sets.HTTPRouteGroupSet)
	return ret0
}

// GetSpecsSmiSpecIov1Alpha3HTTPRouteGroups indicates an expected call of GetSpecsSmiSpecIov1Alpha3HTTPRouteGroups
func (mr *MockBuilderMockRecorder) GetSpecsSmiSpecIov1Alpha3HTTPRouteGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecsSmiSpecIov1Alpha3HTTPRouteGroups", reflect.TypeOf((*MockBuilder)(nil).GetSpecsSmiSpecIov1Alpha3HTTPRouteGroups))
}

// BuildLabelPartitionedSnapshot mocks base method
func (m *MockBuilder) BuildLabelPartitionedSnapshot(labelKey string) (smi.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildLabelPartitionedSnapshot", labelKey)
	ret0, _ := ret[0].(smi.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildLabelPartitionedSnapshot indicates an expected call of BuildLabelPartitionedSnapshot
func (mr *MockBuilderMockRecorder) BuildLabelPartitionedSnapshot(labelKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildLabelPartitionedSnapshot", reflect.TypeOf((*MockBuilder)(nil).BuildLabelPartitionedSnapshot), labelKey)
}

// BuildSinglePartitionedSnapshot mocks base method
func (m *MockBuilder) BuildSinglePartitionedSnapshot(snapshotLabels map[string]string) (smi.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildSinglePartitionedSnapshot", snapshotLabels)
	ret0, _ := ret[0].(smi.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildSinglePartitionedSnapshot indicates an expected call of BuildSinglePartitionedSnapshot
func (mr *MockBuilderMockRecorder) BuildSinglePartitionedSnapshot(snapshotLabels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildSinglePartitionedSnapshot", reflect.TypeOf((*MockBuilder)(nil).BuildSinglePartitionedSnapshot), snapshotLabels)
}

// AddCluster mocks base method
func (m *MockBuilder) AddCluster(cluster string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddCluster", cluster)
}

// AddCluster indicates an expected call of AddCluster
func (mr *MockBuilderMockRecorder) AddCluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCluster", reflect.TypeOf((*MockBuilder)(nil).AddCluster), cluster)
}

// Clusters mocks base method
func (m *MockBuilder) Clusters() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clusters")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Clusters indicates an expected call of Clusters
func (mr *MockBuilderMockRecorder) Clusters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clusters", reflect.TypeOf((*MockBuilder)(nil).Clusters))
}

// Merge mocks base method
func (m *MockBuilder) Merge(other smi.Builder) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Merge", other)
}

// Merge indicates an expected call of Merge
func (mr *MockBuilderMockRecorder) Merge(other interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MockBuilder)(nil).Merge), other)
}

// Clone mocks base method
func (m *MockBuilder) Clone() smi.Builder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(smi.Builder)
	return ret0
}

// Clone indicates an expected call of Clone
func (mr *MockBuilderMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockBuilder)(nil).Clone))
}

// Delta mocks base method
func (m *MockBuilder) Delta(newSnap smi.Builder) output.SnapshotDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSnap)
	ret0, _ := ret[0].(output.SnapshotDelta)
	return ret0
}

// Delta indicates an expected call of Delta
func (mr *MockBuilderMockRecorder) Delta(newSnap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockBuilder)(nil).Delta), newSnap)
}
