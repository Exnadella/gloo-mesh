// Code generated by MockGen. DO NOT EDIT.
// Source: ./snapshot.go

// Package mock_istio is a generated GoMock package.
package mock_istio

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha3sets "github.com/solo-io/external-apis/pkg/api/istio/networking.istio.io/v1alpha3/sets"
	v1beta1sets "github.com/solo-io/external-apis/pkg/api/istio/security.istio.io/v1beta1/sets"
	v1sets "github.com/solo-io/external-apis/pkg/api/k8s/core/v1/sets"
	v1alpha2 "github.com/solo-io/gloo-mesh/pkg/api/certificates.mesh.gloo.solo.io/v1alpha2"
	v1alpha2sets "github.com/solo-io/gloo-mesh/pkg/api/certificates.mesh.gloo.solo.io/v1alpha2/sets"
	istio "github.com/solo-io/gloo-mesh/pkg/api/networking.mesh.gloo.solo.io/output/istio"
	v1alpha1 "github.com/solo-io/gloo-mesh/pkg/api/xds.agent.enterprise.mesh.gloo.solo.io/v1alpha1"
	v1alpha1sets "github.com/solo-io/gloo-mesh/pkg/api/xds.agent.enterprise.mesh.gloo.solo.io/v1alpha1/sets"
	output "github.com/solo-io/skv2/contrib/pkg/output"
	multicluster "github.com/solo-io/skv2/pkg/multicluster"
	v1alpha3 "istio.io/client-go/pkg/apis/networking/v1alpha3"
	v1beta1 "istio.io/client-go/pkg/apis/security/v1beta1"
	v1 "k8s.io/api/core/v1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockSnapshot is a mock of Snapshot interface
type MockSnapshot struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotMockRecorder
}

// MockSnapshotMockRecorder is the mock recorder for MockSnapshot
type MockSnapshotMockRecorder struct {
	mock *MockSnapshot
}

// NewMockSnapshot creates a new mock instance
func NewMockSnapshot(ctrl *gomock.Controller) *MockSnapshot {
	mock := &MockSnapshot{ctrl: ctrl}
	mock.recorder = &MockSnapshotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSnapshot) EXPECT() *MockSnapshotMockRecorder {
	return m.recorder
}

// CertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificates mocks base method
func (m *MockSnapshot) CertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificates() []istio.LabeledCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificateSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificates")
	ret0, _ := ret[0].([]istio.LabeledCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificateSet)
	return ret0
}

// CertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificates indicates an expected call of CertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificates
func (mr *MockSnapshotMockRecorder) CertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificates", reflect.TypeOf((*MockSnapshot)(nil).CertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificates))
}

// CertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectives mocks base method
func (m *MockSnapshot) CertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectives() []istio.LabeledCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectiveSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectives")
	ret0, _ := ret[0].([]istio.LabeledCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectiveSet)
	return ret0
}

// CertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectives indicates an expected call of CertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectives
func (mr *MockSnapshotMockRecorder) CertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectives() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectives", reflect.TypeOf((*MockSnapshot)(nil).CertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectives))
}

// XdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigs mocks base method
func (m *MockSnapshot) XdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigs() []istio.LabeledXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigs")
	ret0, _ := ret[0].([]istio.LabeledXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigSet)
	return ret0
}

// XdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigs indicates an expected call of XdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigs
func (mr *MockSnapshotMockRecorder) XdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigs", reflect.TypeOf((*MockSnapshot)(nil).XdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigs))
}

// NetworkingIstioIo_V1Alpha3_DestinationRules mocks base method
func (m *MockSnapshot) NetworkingIstioIo_V1Alpha3_DestinationRules() []istio.LabeledNetworkingIstioIo_V1Alpha3_DestinationRuleSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkingIstioIo_V1Alpha3_DestinationRules")
	ret0, _ := ret[0].([]istio.LabeledNetworkingIstioIo_V1Alpha3_DestinationRuleSet)
	return ret0
}

// NetworkingIstioIo_V1Alpha3_DestinationRules indicates an expected call of NetworkingIstioIo_V1Alpha3_DestinationRules
func (mr *MockSnapshotMockRecorder) NetworkingIstioIo_V1Alpha3_DestinationRules() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkingIstioIo_V1Alpha3_DestinationRules", reflect.TypeOf((*MockSnapshot)(nil).NetworkingIstioIo_V1Alpha3_DestinationRules))
}

// NetworkingIstioIo_V1Alpha3_EnvoyFilters mocks base method
func (m *MockSnapshot) NetworkingIstioIo_V1Alpha3_EnvoyFilters() []istio.LabeledNetworkingIstioIo_V1Alpha3_EnvoyFilterSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkingIstioIo_V1Alpha3_EnvoyFilters")
	ret0, _ := ret[0].([]istio.LabeledNetworkingIstioIo_V1Alpha3_EnvoyFilterSet)
	return ret0
}

// NetworkingIstioIo_V1Alpha3_EnvoyFilters indicates an expected call of NetworkingIstioIo_V1Alpha3_EnvoyFilters
func (mr *MockSnapshotMockRecorder) NetworkingIstioIo_V1Alpha3_EnvoyFilters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkingIstioIo_V1Alpha3_EnvoyFilters", reflect.TypeOf((*MockSnapshot)(nil).NetworkingIstioIo_V1Alpha3_EnvoyFilters))
}

// NetworkingIstioIo_V1Alpha3_Gateways mocks base method
func (m *MockSnapshot) NetworkingIstioIo_V1Alpha3_Gateways() []istio.LabeledNetworkingIstioIo_V1Alpha3_GatewaySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkingIstioIo_V1Alpha3_Gateways")
	ret0, _ := ret[0].([]istio.LabeledNetworkingIstioIo_V1Alpha3_GatewaySet)
	return ret0
}

// NetworkingIstioIo_V1Alpha3_Gateways indicates an expected call of NetworkingIstioIo_V1Alpha3_Gateways
func (mr *MockSnapshotMockRecorder) NetworkingIstioIo_V1Alpha3_Gateways() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkingIstioIo_V1Alpha3_Gateways", reflect.TypeOf((*MockSnapshot)(nil).NetworkingIstioIo_V1Alpha3_Gateways))
}

// NetworkingIstioIo_V1Alpha3_ServiceEntries mocks base method
func (m *MockSnapshot) NetworkingIstioIo_V1Alpha3_ServiceEntries() []istio.LabeledNetworkingIstioIo_V1Alpha3_ServiceEntrySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkingIstioIo_V1Alpha3_ServiceEntries")
	ret0, _ := ret[0].([]istio.LabeledNetworkingIstioIo_V1Alpha3_ServiceEntrySet)
	return ret0
}

// NetworkingIstioIo_V1Alpha3_ServiceEntries indicates an expected call of NetworkingIstioIo_V1Alpha3_ServiceEntries
func (mr *MockSnapshotMockRecorder) NetworkingIstioIo_V1Alpha3_ServiceEntries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkingIstioIo_V1Alpha3_ServiceEntries", reflect.TypeOf((*MockSnapshot)(nil).NetworkingIstioIo_V1Alpha3_ServiceEntries))
}

// NetworkingIstioIo_V1Alpha3_VirtualServices mocks base method
func (m *MockSnapshot) NetworkingIstioIo_V1Alpha3_VirtualServices() []istio.LabeledNetworkingIstioIo_V1Alpha3_VirtualServiceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkingIstioIo_V1Alpha3_VirtualServices")
	ret0, _ := ret[0].([]istio.LabeledNetworkingIstioIo_V1Alpha3_VirtualServiceSet)
	return ret0
}

// NetworkingIstioIo_V1Alpha3_VirtualServices indicates an expected call of NetworkingIstioIo_V1Alpha3_VirtualServices
func (mr *MockSnapshotMockRecorder) NetworkingIstioIo_V1Alpha3_VirtualServices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkingIstioIo_V1Alpha3_VirtualServices", reflect.TypeOf((*MockSnapshot)(nil).NetworkingIstioIo_V1Alpha3_VirtualServices))
}

// SecurityIstioIo_V1Beta1_AuthorizationPolicies mocks base method
func (m *MockSnapshot) SecurityIstioIo_V1Beta1_AuthorizationPolicies() []istio.LabeledSecurityIstioIo_V1Beta1_AuthorizationPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecurityIstioIo_V1Beta1_AuthorizationPolicies")
	ret0, _ := ret[0].([]istio.LabeledSecurityIstioIo_V1Beta1_AuthorizationPolicySet)
	return ret0
}

// SecurityIstioIo_V1Beta1_AuthorizationPolicies indicates an expected call of SecurityIstioIo_V1Beta1_AuthorizationPolicies
func (mr *MockSnapshotMockRecorder) SecurityIstioIo_V1Beta1_AuthorizationPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecurityIstioIo_V1Beta1_AuthorizationPolicies", reflect.TypeOf((*MockSnapshot)(nil).SecurityIstioIo_V1Beta1_AuthorizationPolicies))
}

// V1_ConfigMaps mocks base method
func (m *MockSnapshot) V1_ConfigMaps() []istio.LabeledV1_ConfigMapSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V1_ConfigMaps")
	ret0, _ := ret[0].([]istio.LabeledV1_ConfigMapSet)
	return ret0
}

// V1_ConfigMaps indicates an expected call of V1_ConfigMaps
func (mr *MockSnapshotMockRecorder) V1_ConfigMaps() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V1_ConfigMaps", reflect.TypeOf((*MockSnapshot)(nil).V1_ConfigMaps))
}

// ApplyLocalCluster mocks base method
func (m *MockSnapshot) ApplyLocalCluster(ctx context.Context, clusterClient client.Client, errHandler output.ErrorHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ApplyLocalCluster", ctx, clusterClient, errHandler)
}

// ApplyLocalCluster indicates an expected call of ApplyLocalCluster
func (mr *MockSnapshotMockRecorder) ApplyLocalCluster(ctx, clusterClient, errHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyLocalCluster", reflect.TypeOf((*MockSnapshot)(nil).ApplyLocalCluster), ctx, clusterClient, errHandler)
}

// ApplyMultiCluster mocks base method
func (m *MockSnapshot) ApplyMultiCluster(ctx context.Context, multiClusterClient multicluster.Client, errHandler output.ErrorHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ApplyMultiCluster", ctx, multiClusterClient, errHandler)
}

// ApplyMultiCluster indicates an expected call of ApplyMultiCluster
func (mr *MockSnapshotMockRecorder) ApplyMultiCluster(ctx, multiClusterClient, errHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyMultiCluster", reflect.TypeOf((*MockSnapshot)(nil).ApplyMultiCluster), ctx, multiClusterClient, errHandler)
}

// MarshalJSON mocks base method
func (m *MockSnapshot) MarshalJSON() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalJSON")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalJSON indicates an expected call of MarshalJSON
func (mr *MockSnapshotMockRecorder) MarshalJSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalJSON", reflect.TypeOf((*MockSnapshot)(nil).MarshalJSON))
}

// MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificateSet is a mock of LabeledCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificateSet interface
type MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificateSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificateSetMockRecorder
}

// MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificateSetMockRecorder is the mock recorder for MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificateSet
type MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificateSetMockRecorder struct {
	mock *MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificateSet
}

// NewMockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificateSet creates a new mock instance
func NewMockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificateSet(ctrl *gomock.Controller) *MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificateSet {
	mock := &MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificateSet{ctrl: ctrl}
	mock.recorder = &MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificateSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificateSet) EXPECT() *MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificateSetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificateSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificateSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificateSet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificateSet) Set() v1alpha2sets.IssuedCertificateSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha2sets.IssuedCertificateSet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificateSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificateSet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificateSet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificateSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificateSet)(nil).Generic))
}

// MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectiveSet is a mock of LabeledCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectiveSet interface
type MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectiveSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectiveSetMockRecorder
}

// MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectiveSetMockRecorder is the mock recorder for MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectiveSet
type MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectiveSetMockRecorder struct {
	mock *MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectiveSet
}

// NewMockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectiveSet creates a new mock instance
func NewMockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectiveSet(ctrl *gomock.Controller) *MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectiveSet {
	mock := &MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectiveSet{ctrl: ctrl}
	mock.recorder = &MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectiveSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectiveSet) EXPECT() *MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectiveSetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectiveSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectiveSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectiveSet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectiveSet) Set() v1alpha2sets.PodBounceDirectiveSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha2sets.PodBounceDirectiveSet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectiveSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectiveSet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectiveSet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectiveSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectiveSet)(nil).Generic))
}

// MockLabeledXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigSet is a mock of LabeledXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigSet interface
type MockLabeledXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigSetMockRecorder
}

// MockLabeledXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigSetMockRecorder is the mock recorder for MockLabeledXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigSet
type MockLabeledXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigSetMockRecorder struct {
	mock *MockLabeledXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigSet
}

// NewMockLabeledXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigSet creates a new mock instance
func NewMockLabeledXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigSet(ctrl *gomock.Controller) *MockLabeledXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigSet {
	mock := &MockLabeledXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigSet{ctrl: ctrl}
	mock.recorder = &MockLabeledXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigSet) EXPECT() *MockLabeledXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigSetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigSet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigSet) Set() v1alpha1sets.XdsConfigSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha1sets.XdsConfigSet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigSet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigSet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigSet)(nil).Generic))
}

// MockLabeledNetworkingIstioIo_V1Alpha3_DestinationRuleSet is a mock of LabeledNetworkingIstioIo_V1Alpha3_DestinationRuleSet interface
type MockLabeledNetworkingIstioIo_V1Alpha3_DestinationRuleSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledNetworkingIstioIo_V1Alpha3_DestinationRuleSetMockRecorder
}

// MockLabeledNetworkingIstioIo_V1Alpha3_DestinationRuleSetMockRecorder is the mock recorder for MockLabeledNetworkingIstioIo_V1Alpha3_DestinationRuleSet
type MockLabeledNetworkingIstioIo_V1Alpha3_DestinationRuleSetMockRecorder struct {
	mock *MockLabeledNetworkingIstioIo_V1Alpha3_DestinationRuleSet
}

// NewMockLabeledNetworkingIstioIo_V1Alpha3_DestinationRuleSet creates a new mock instance
func NewMockLabeledNetworkingIstioIo_V1Alpha3_DestinationRuleSet(ctrl *gomock.Controller) *MockLabeledNetworkingIstioIo_V1Alpha3_DestinationRuleSet {
	mock := &MockLabeledNetworkingIstioIo_V1Alpha3_DestinationRuleSet{ctrl: ctrl}
	mock.recorder = &MockLabeledNetworkingIstioIo_V1Alpha3_DestinationRuleSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledNetworkingIstioIo_V1Alpha3_DestinationRuleSet) EXPECT() *MockLabeledNetworkingIstioIo_V1Alpha3_DestinationRuleSetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledNetworkingIstioIo_V1Alpha3_DestinationRuleSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledNetworkingIstioIo_V1Alpha3_DestinationRuleSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledNetworkingIstioIo_V1Alpha3_DestinationRuleSet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledNetworkingIstioIo_V1Alpha3_DestinationRuleSet) Set() v1alpha3sets.DestinationRuleSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha3sets.DestinationRuleSet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledNetworkingIstioIo_V1Alpha3_DestinationRuleSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledNetworkingIstioIo_V1Alpha3_DestinationRuleSet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledNetworkingIstioIo_V1Alpha3_DestinationRuleSet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledNetworkingIstioIo_V1Alpha3_DestinationRuleSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledNetworkingIstioIo_V1Alpha3_DestinationRuleSet)(nil).Generic))
}

// MockLabeledNetworkingIstioIo_V1Alpha3_EnvoyFilterSet is a mock of LabeledNetworkingIstioIo_V1Alpha3_EnvoyFilterSet interface
type MockLabeledNetworkingIstioIo_V1Alpha3_EnvoyFilterSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledNetworkingIstioIo_V1Alpha3_EnvoyFilterSetMockRecorder
}

// MockLabeledNetworkingIstioIo_V1Alpha3_EnvoyFilterSetMockRecorder is the mock recorder for MockLabeledNetworkingIstioIo_V1Alpha3_EnvoyFilterSet
type MockLabeledNetworkingIstioIo_V1Alpha3_EnvoyFilterSetMockRecorder struct {
	mock *MockLabeledNetworkingIstioIo_V1Alpha3_EnvoyFilterSet
}

// NewMockLabeledNetworkingIstioIo_V1Alpha3_EnvoyFilterSet creates a new mock instance
func NewMockLabeledNetworkingIstioIo_V1Alpha3_EnvoyFilterSet(ctrl *gomock.Controller) *MockLabeledNetworkingIstioIo_V1Alpha3_EnvoyFilterSet {
	mock := &MockLabeledNetworkingIstioIo_V1Alpha3_EnvoyFilterSet{ctrl: ctrl}
	mock.recorder = &MockLabeledNetworkingIstioIo_V1Alpha3_EnvoyFilterSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledNetworkingIstioIo_V1Alpha3_EnvoyFilterSet) EXPECT() *MockLabeledNetworkingIstioIo_V1Alpha3_EnvoyFilterSetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledNetworkingIstioIo_V1Alpha3_EnvoyFilterSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledNetworkingIstioIo_V1Alpha3_EnvoyFilterSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledNetworkingIstioIo_V1Alpha3_EnvoyFilterSet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledNetworkingIstioIo_V1Alpha3_EnvoyFilterSet) Set() v1alpha3sets.EnvoyFilterSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha3sets.EnvoyFilterSet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledNetworkingIstioIo_V1Alpha3_EnvoyFilterSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledNetworkingIstioIo_V1Alpha3_EnvoyFilterSet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledNetworkingIstioIo_V1Alpha3_EnvoyFilterSet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledNetworkingIstioIo_V1Alpha3_EnvoyFilterSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledNetworkingIstioIo_V1Alpha3_EnvoyFilterSet)(nil).Generic))
}

// MockLabeledNetworkingIstioIo_V1Alpha3_GatewaySet is a mock of LabeledNetworkingIstioIo_V1Alpha3_GatewaySet interface
type MockLabeledNetworkingIstioIo_V1Alpha3_GatewaySet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledNetworkingIstioIo_V1Alpha3_GatewaySetMockRecorder
}

// MockLabeledNetworkingIstioIo_V1Alpha3_GatewaySetMockRecorder is the mock recorder for MockLabeledNetworkingIstioIo_V1Alpha3_GatewaySet
type MockLabeledNetworkingIstioIo_V1Alpha3_GatewaySetMockRecorder struct {
	mock *MockLabeledNetworkingIstioIo_V1Alpha3_GatewaySet
}

// NewMockLabeledNetworkingIstioIo_V1Alpha3_GatewaySet creates a new mock instance
func NewMockLabeledNetworkingIstioIo_V1Alpha3_GatewaySet(ctrl *gomock.Controller) *MockLabeledNetworkingIstioIo_V1Alpha3_GatewaySet {
	mock := &MockLabeledNetworkingIstioIo_V1Alpha3_GatewaySet{ctrl: ctrl}
	mock.recorder = &MockLabeledNetworkingIstioIo_V1Alpha3_GatewaySetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledNetworkingIstioIo_V1Alpha3_GatewaySet) EXPECT() *MockLabeledNetworkingIstioIo_V1Alpha3_GatewaySetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledNetworkingIstioIo_V1Alpha3_GatewaySet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledNetworkingIstioIo_V1Alpha3_GatewaySetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledNetworkingIstioIo_V1Alpha3_GatewaySet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledNetworkingIstioIo_V1Alpha3_GatewaySet) Set() v1alpha3sets.GatewaySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha3sets.GatewaySet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledNetworkingIstioIo_V1Alpha3_GatewaySetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledNetworkingIstioIo_V1Alpha3_GatewaySet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledNetworkingIstioIo_V1Alpha3_GatewaySet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledNetworkingIstioIo_V1Alpha3_GatewaySetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledNetworkingIstioIo_V1Alpha3_GatewaySet)(nil).Generic))
}

// MockLabeledNetworkingIstioIo_V1Alpha3_ServiceEntrySet is a mock of LabeledNetworkingIstioIo_V1Alpha3_ServiceEntrySet interface
type MockLabeledNetworkingIstioIo_V1Alpha3_ServiceEntrySet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledNetworkingIstioIo_V1Alpha3_ServiceEntrySetMockRecorder
}

// MockLabeledNetworkingIstioIo_V1Alpha3_ServiceEntrySetMockRecorder is the mock recorder for MockLabeledNetworkingIstioIo_V1Alpha3_ServiceEntrySet
type MockLabeledNetworkingIstioIo_V1Alpha3_ServiceEntrySetMockRecorder struct {
	mock *MockLabeledNetworkingIstioIo_V1Alpha3_ServiceEntrySet
}

// NewMockLabeledNetworkingIstioIo_V1Alpha3_ServiceEntrySet creates a new mock instance
func NewMockLabeledNetworkingIstioIo_V1Alpha3_ServiceEntrySet(ctrl *gomock.Controller) *MockLabeledNetworkingIstioIo_V1Alpha3_ServiceEntrySet {
	mock := &MockLabeledNetworkingIstioIo_V1Alpha3_ServiceEntrySet{ctrl: ctrl}
	mock.recorder = &MockLabeledNetworkingIstioIo_V1Alpha3_ServiceEntrySetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledNetworkingIstioIo_V1Alpha3_ServiceEntrySet) EXPECT() *MockLabeledNetworkingIstioIo_V1Alpha3_ServiceEntrySetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledNetworkingIstioIo_V1Alpha3_ServiceEntrySet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledNetworkingIstioIo_V1Alpha3_ServiceEntrySetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledNetworkingIstioIo_V1Alpha3_ServiceEntrySet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledNetworkingIstioIo_V1Alpha3_ServiceEntrySet) Set() v1alpha3sets.ServiceEntrySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha3sets.ServiceEntrySet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledNetworkingIstioIo_V1Alpha3_ServiceEntrySetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledNetworkingIstioIo_V1Alpha3_ServiceEntrySet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledNetworkingIstioIo_V1Alpha3_ServiceEntrySet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledNetworkingIstioIo_V1Alpha3_ServiceEntrySetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledNetworkingIstioIo_V1Alpha3_ServiceEntrySet)(nil).Generic))
}

// MockLabeledNetworkingIstioIo_V1Alpha3_VirtualServiceSet is a mock of LabeledNetworkingIstioIo_V1Alpha3_VirtualServiceSet interface
type MockLabeledNetworkingIstioIo_V1Alpha3_VirtualServiceSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledNetworkingIstioIo_V1Alpha3_VirtualServiceSetMockRecorder
}

// MockLabeledNetworkingIstioIo_V1Alpha3_VirtualServiceSetMockRecorder is the mock recorder for MockLabeledNetworkingIstioIo_V1Alpha3_VirtualServiceSet
type MockLabeledNetworkingIstioIo_V1Alpha3_VirtualServiceSetMockRecorder struct {
	mock *MockLabeledNetworkingIstioIo_V1Alpha3_VirtualServiceSet
}

// NewMockLabeledNetworkingIstioIo_V1Alpha3_VirtualServiceSet creates a new mock instance
func NewMockLabeledNetworkingIstioIo_V1Alpha3_VirtualServiceSet(ctrl *gomock.Controller) *MockLabeledNetworkingIstioIo_V1Alpha3_VirtualServiceSet {
	mock := &MockLabeledNetworkingIstioIo_V1Alpha3_VirtualServiceSet{ctrl: ctrl}
	mock.recorder = &MockLabeledNetworkingIstioIo_V1Alpha3_VirtualServiceSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledNetworkingIstioIo_V1Alpha3_VirtualServiceSet) EXPECT() *MockLabeledNetworkingIstioIo_V1Alpha3_VirtualServiceSetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledNetworkingIstioIo_V1Alpha3_VirtualServiceSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledNetworkingIstioIo_V1Alpha3_VirtualServiceSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledNetworkingIstioIo_V1Alpha3_VirtualServiceSet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledNetworkingIstioIo_V1Alpha3_VirtualServiceSet) Set() v1alpha3sets.VirtualServiceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha3sets.VirtualServiceSet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledNetworkingIstioIo_V1Alpha3_VirtualServiceSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledNetworkingIstioIo_V1Alpha3_VirtualServiceSet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledNetworkingIstioIo_V1Alpha3_VirtualServiceSet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledNetworkingIstioIo_V1Alpha3_VirtualServiceSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledNetworkingIstioIo_V1Alpha3_VirtualServiceSet)(nil).Generic))
}

// MockLabeledSecurityIstioIo_V1Beta1_AuthorizationPolicySet is a mock of LabeledSecurityIstioIo_V1Beta1_AuthorizationPolicySet interface
type MockLabeledSecurityIstioIo_V1Beta1_AuthorizationPolicySet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledSecurityIstioIo_V1Beta1_AuthorizationPolicySetMockRecorder
}

// MockLabeledSecurityIstioIo_V1Beta1_AuthorizationPolicySetMockRecorder is the mock recorder for MockLabeledSecurityIstioIo_V1Beta1_AuthorizationPolicySet
type MockLabeledSecurityIstioIo_V1Beta1_AuthorizationPolicySetMockRecorder struct {
	mock *MockLabeledSecurityIstioIo_V1Beta1_AuthorizationPolicySet
}

// NewMockLabeledSecurityIstioIo_V1Beta1_AuthorizationPolicySet creates a new mock instance
func NewMockLabeledSecurityIstioIo_V1Beta1_AuthorizationPolicySet(ctrl *gomock.Controller) *MockLabeledSecurityIstioIo_V1Beta1_AuthorizationPolicySet {
	mock := &MockLabeledSecurityIstioIo_V1Beta1_AuthorizationPolicySet{ctrl: ctrl}
	mock.recorder = &MockLabeledSecurityIstioIo_V1Beta1_AuthorizationPolicySetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledSecurityIstioIo_V1Beta1_AuthorizationPolicySet) EXPECT() *MockLabeledSecurityIstioIo_V1Beta1_AuthorizationPolicySetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledSecurityIstioIo_V1Beta1_AuthorizationPolicySet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledSecurityIstioIo_V1Beta1_AuthorizationPolicySetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledSecurityIstioIo_V1Beta1_AuthorizationPolicySet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledSecurityIstioIo_V1Beta1_AuthorizationPolicySet) Set() v1beta1sets.AuthorizationPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1beta1sets.AuthorizationPolicySet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledSecurityIstioIo_V1Beta1_AuthorizationPolicySetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledSecurityIstioIo_V1Beta1_AuthorizationPolicySet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledSecurityIstioIo_V1Beta1_AuthorizationPolicySet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledSecurityIstioIo_V1Beta1_AuthorizationPolicySetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledSecurityIstioIo_V1Beta1_AuthorizationPolicySet)(nil).Generic))
}

// MockLabeledV1_ConfigMapSet is a mock of LabeledV1_ConfigMapSet interface
type MockLabeledV1_ConfigMapSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledV1_ConfigMapSetMockRecorder
}

// MockLabeledV1_ConfigMapSetMockRecorder is the mock recorder for MockLabeledV1_ConfigMapSet
type MockLabeledV1_ConfigMapSetMockRecorder struct {
	mock *MockLabeledV1_ConfigMapSet
}

// NewMockLabeledV1_ConfigMapSet creates a new mock instance
func NewMockLabeledV1_ConfigMapSet(ctrl *gomock.Controller) *MockLabeledV1_ConfigMapSet {
	mock := &MockLabeledV1_ConfigMapSet{ctrl: ctrl}
	mock.recorder = &MockLabeledV1_ConfigMapSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledV1_ConfigMapSet) EXPECT() *MockLabeledV1_ConfigMapSetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledV1_ConfigMapSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledV1_ConfigMapSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledV1_ConfigMapSet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledV1_ConfigMapSet) Set() v1sets.ConfigMapSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1sets.ConfigMapSet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledV1_ConfigMapSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledV1_ConfigMapSet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledV1_ConfigMapSet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledV1_ConfigMapSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledV1_ConfigMapSet)(nil).Generic))
}

// MockBuilder is a mock of Builder interface
type MockBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockBuilderMockRecorder
}

// MockBuilderMockRecorder is the mock recorder for MockBuilder
type MockBuilderMockRecorder struct {
	mock *MockBuilder
}

// NewMockBuilder creates a new mock instance
func NewMockBuilder(ctrl *gomock.Controller) *MockBuilder {
	mock := &MockBuilder{ctrl: ctrl}
	mock.recorder = &MockBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBuilder) EXPECT() *MockBuilderMockRecorder {
	return m.recorder
}

// AddCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificates mocks base method
func (m *MockBuilder) AddCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificates(certificatesMeshGlooSoloIoV1Alpha2IssuedCertificates ...*v1alpha2.IssuedCertificate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range certificatesMeshGlooSoloIoV1Alpha2IssuedCertificates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificates", varargs...)
}

// AddCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificates indicates an expected call of AddCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificates
func (mr *MockBuilderMockRecorder) AddCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificates(certificatesMeshGlooSoloIoV1Alpha2IssuedCertificates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificates", reflect.TypeOf((*MockBuilder)(nil).AddCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificates), certificatesMeshGlooSoloIoV1Alpha2IssuedCertificates...)
}

// GetCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificates mocks base method
func (m *MockBuilder) GetCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificates() v1alpha2sets.IssuedCertificateSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificates")
	ret0, _ := ret[0].(v1alpha2sets.IssuedCertificateSet)
	return ret0
}

// GetCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificates indicates an expected call of GetCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificates
func (mr *MockBuilderMockRecorder) GetCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificates", reflect.TypeOf((*MockBuilder)(nil).GetCertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificates))
}

// AddCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectives mocks base method
func (m *MockBuilder) AddCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectives(certificatesMeshGlooSoloIoV1Alpha2PodBounceDirectives ...*v1alpha2.PodBounceDirective) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range certificatesMeshGlooSoloIoV1Alpha2PodBounceDirectives {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectives", varargs...)
}

// AddCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectives indicates an expected call of AddCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectives
func (mr *MockBuilderMockRecorder) AddCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectives(certificatesMeshGlooSoloIoV1Alpha2PodBounceDirectives ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectives", reflect.TypeOf((*MockBuilder)(nil).AddCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectives), certificatesMeshGlooSoloIoV1Alpha2PodBounceDirectives...)
}

// GetCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectives mocks base method
func (m *MockBuilder) GetCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectives() v1alpha2sets.PodBounceDirectiveSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectives")
	ret0, _ := ret[0].(v1alpha2sets.PodBounceDirectiveSet)
	return ret0
}

// GetCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectives indicates an expected call of GetCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectives
func (mr *MockBuilderMockRecorder) GetCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectives() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectives", reflect.TypeOf((*MockBuilder)(nil).GetCertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectives))
}

// AddXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigs mocks base method
func (m *MockBuilder) AddXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigs(xdsAgentEnterpriseMeshGlooSoloIoV1Alpha1XdsConfigs ...*v1alpha1.XdsConfig) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range xdsAgentEnterpriseMeshGlooSoloIoV1Alpha1XdsConfigs {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigs", varargs...)
}

// AddXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigs indicates an expected call of AddXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigs
func (mr *MockBuilderMockRecorder) AddXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigs(xdsAgentEnterpriseMeshGlooSoloIoV1Alpha1XdsConfigs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigs", reflect.TypeOf((*MockBuilder)(nil).AddXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigs), xdsAgentEnterpriseMeshGlooSoloIoV1Alpha1XdsConfigs...)
}

// GetXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigs mocks base method
func (m *MockBuilder) GetXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigs() v1alpha1sets.XdsConfigSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigs")
	ret0, _ := ret[0].(v1alpha1sets.XdsConfigSet)
	return ret0
}

// GetXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigs indicates an expected call of GetXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigs
func (mr *MockBuilderMockRecorder) GetXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigs", reflect.TypeOf((*MockBuilder)(nil).GetXdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigs))
}

// AddNetworkingIstioIo_V1Alpha3_DestinationRules mocks base method
func (m *MockBuilder) AddNetworkingIstioIo_V1Alpha3_DestinationRules(networkingIstioIoV1Alpha3DestinationRules ...*v1alpha3.DestinationRule) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range networkingIstioIoV1Alpha3DestinationRules {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddNetworkingIstioIo_V1Alpha3_DestinationRules", varargs...)
}

// AddNetworkingIstioIo_V1Alpha3_DestinationRules indicates an expected call of AddNetworkingIstioIo_V1Alpha3_DestinationRules
func (mr *MockBuilderMockRecorder) AddNetworkingIstioIo_V1Alpha3_DestinationRules(networkingIstioIoV1Alpha3DestinationRules ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNetworkingIstioIo_V1Alpha3_DestinationRules", reflect.TypeOf((*MockBuilder)(nil).AddNetworkingIstioIo_V1Alpha3_DestinationRules), networkingIstioIoV1Alpha3DestinationRules...)
}

// GetNetworkingIstioIo_V1Alpha3_DestinationRules mocks base method
func (m *MockBuilder) GetNetworkingIstioIo_V1Alpha3_DestinationRules() v1alpha3sets.DestinationRuleSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkingIstioIo_V1Alpha3_DestinationRules")
	ret0, _ := ret[0].(v1alpha3sets.DestinationRuleSet)
	return ret0
}

// GetNetworkingIstioIo_V1Alpha3_DestinationRules indicates an expected call of GetNetworkingIstioIo_V1Alpha3_DestinationRules
func (mr *MockBuilderMockRecorder) GetNetworkingIstioIo_V1Alpha3_DestinationRules() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkingIstioIo_V1Alpha3_DestinationRules", reflect.TypeOf((*MockBuilder)(nil).GetNetworkingIstioIo_V1Alpha3_DestinationRules))
}

// AddNetworkingIstioIo_V1Alpha3_EnvoyFilters mocks base method
func (m *MockBuilder) AddNetworkingIstioIo_V1Alpha3_EnvoyFilters(networkingIstioIoV1Alpha3EnvoyFilters ...*v1alpha3.EnvoyFilter) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range networkingIstioIoV1Alpha3EnvoyFilters {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddNetworkingIstioIo_V1Alpha3_EnvoyFilters", varargs...)
}

// AddNetworkingIstioIo_V1Alpha3_EnvoyFilters indicates an expected call of AddNetworkingIstioIo_V1Alpha3_EnvoyFilters
func (mr *MockBuilderMockRecorder) AddNetworkingIstioIo_V1Alpha3_EnvoyFilters(networkingIstioIoV1Alpha3EnvoyFilters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNetworkingIstioIo_V1Alpha3_EnvoyFilters", reflect.TypeOf((*MockBuilder)(nil).AddNetworkingIstioIo_V1Alpha3_EnvoyFilters), networkingIstioIoV1Alpha3EnvoyFilters...)
}

// GetNetworkingIstioIo_V1Alpha3_EnvoyFilters mocks base method
func (m *MockBuilder) GetNetworkingIstioIo_V1Alpha3_EnvoyFilters() v1alpha3sets.EnvoyFilterSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkingIstioIo_V1Alpha3_EnvoyFilters")
	ret0, _ := ret[0].(v1alpha3sets.EnvoyFilterSet)
	return ret0
}

// GetNetworkingIstioIo_V1Alpha3_EnvoyFilters indicates an expected call of GetNetworkingIstioIo_V1Alpha3_EnvoyFilters
func (mr *MockBuilderMockRecorder) GetNetworkingIstioIo_V1Alpha3_EnvoyFilters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkingIstioIo_V1Alpha3_EnvoyFilters", reflect.TypeOf((*MockBuilder)(nil).GetNetworkingIstioIo_V1Alpha3_EnvoyFilters))
}

// AddNetworkingIstioIo_V1Alpha3_Gateways mocks base method
func (m *MockBuilder) AddNetworkingIstioIo_V1Alpha3_Gateways(networkingIstioIoV1Alpha3Gateways ...*v1alpha3.Gateway) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range networkingIstioIoV1Alpha3Gateways {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddNetworkingIstioIo_V1Alpha3_Gateways", varargs...)
}

// AddNetworkingIstioIo_V1Alpha3_Gateways indicates an expected call of AddNetworkingIstioIo_V1Alpha3_Gateways
func (mr *MockBuilderMockRecorder) AddNetworkingIstioIo_V1Alpha3_Gateways(networkingIstioIoV1Alpha3Gateways ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNetworkingIstioIo_V1Alpha3_Gateways", reflect.TypeOf((*MockBuilder)(nil).AddNetworkingIstioIo_V1Alpha3_Gateways), networkingIstioIoV1Alpha3Gateways...)
}

// GetNetworkingIstioIo_V1Alpha3_Gateways mocks base method
func (m *MockBuilder) GetNetworkingIstioIo_V1Alpha3_Gateways() v1alpha3sets.GatewaySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkingIstioIo_V1Alpha3_Gateways")
	ret0, _ := ret[0].(v1alpha3sets.GatewaySet)
	return ret0
}

// GetNetworkingIstioIo_V1Alpha3_Gateways indicates an expected call of GetNetworkingIstioIo_V1Alpha3_Gateways
func (mr *MockBuilderMockRecorder) GetNetworkingIstioIo_V1Alpha3_Gateways() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkingIstioIo_V1Alpha3_Gateways", reflect.TypeOf((*MockBuilder)(nil).GetNetworkingIstioIo_V1Alpha3_Gateways))
}

// AddNetworkingIstioIo_V1Alpha3_ServiceEntries mocks base method
func (m *MockBuilder) AddNetworkingIstioIo_V1Alpha3_ServiceEntries(networkingIstioIoV1Alpha3ServiceEntries ...*v1alpha3.ServiceEntry) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range networkingIstioIoV1Alpha3ServiceEntries {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddNetworkingIstioIo_V1Alpha3_ServiceEntries", varargs...)
}

// AddNetworkingIstioIo_V1Alpha3_ServiceEntries indicates an expected call of AddNetworkingIstioIo_V1Alpha3_ServiceEntries
func (mr *MockBuilderMockRecorder) AddNetworkingIstioIo_V1Alpha3_ServiceEntries(networkingIstioIoV1Alpha3ServiceEntries ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNetworkingIstioIo_V1Alpha3_ServiceEntries", reflect.TypeOf((*MockBuilder)(nil).AddNetworkingIstioIo_V1Alpha3_ServiceEntries), networkingIstioIoV1Alpha3ServiceEntries...)
}

// GetNetworkingIstioIo_V1Alpha3_ServiceEntries mocks base method
func (m *MockBuilder) GetNetworkingIstioIo_V1Alpha3_ServiceEntries() v1alpha3sets.ServiceEntrySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkingIstioIo_V1Alpha3_ServiceEntries")
	ret0, _ := ret[0].(v1alpha3sets.ServiceEntrySet)
	return ret0
}

// GetNetworkingIstioIo_V1Alpha3_ServiceEntries indicates an expected call of GetNetworkingIstioIo_V1Alpha3_ServiceEntries
func (mr *MockBuilderMockRecorder) GetNetworkingIstioIo_V1Alpha3_ServiceEntries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkingIstioIo_V1Alpha3_ServiceEntries", reflect.TypeOf((*MockBuilder)(nil).GetNetworkingIstioIo_V1Alpha3_ServiceEntries))
}

// AddNetworkingIstioIo_V1Alpha3_VirtualServices mocks base method
func (m *MockBuilder) AddNetworkingIstioIo_V1Alpha3_VirtualServices(networkingIstioIoV1Alpha3VirtualServices ...*v1alpha3.VirtualService) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range networkingIstioIoV1Alpha3VirtualServices {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddNetworkingIstioIo_V1Alpha3_VirtualServices", varargs...)
}

// AddNetworkingIstioIo_V1Alpha3_VirtualServices indicates an expected call of AddNetworkingIstioIo_V1Alpha3_VirtualServices
func (mr *MockBuilderMockRecorder) AddNetworkingIstioIo_V1Alpha3_VirtualServices(networkingIstioIoV1Alpha3VirtualServices ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNetworkingIstioIo_V1Alpha3_VirtualServices", reflect.TypeOf((*MockBuilder)(nil).AddNetworkingIstioIo_V1Alpha3_VirtualServices), networkingIstioIoV1Alpha3VirtualServices...)
}

// GetNetworkingIstioIo_V1Alpha3_VirtualServices mocks base method
func (m *MockBuilder) GetNetworkingIstioIo_V1Alpha3_VirtualServices() v1alpha3sets.VirtualServiceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkingIstioIo_V1Alpha3_VirtualServices")
	ret0, _ := ret[0].(v1alpha3sets.VirtualServiceSet)
	return ret0
}

// GetNetworkingIstioIo_V1Alpha3_VirtualServices indicates an expected call of GetNetworkingIstioIo_V1Alpha3_VirtualServices
func (mr *MockBuilderMockRecorder) GetNetworkingIstioIo_V1Alpha3_VirtualServices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkingIstioIo_V1Alpha3_VirtualServices", reflect.TypeOf((*MockBuilder)(nil).GetNetworkingIstioIo_V1Alpha3_VirtualServices))
}

// AddSecurityIstioIo_V1Beta1_AuthorizationPolicies mocks base method
func (m *MockBuilder) AddSecurityIstioIo_V1Beta1_AuthorizationPolicies(securityIstioIoV1Beta1AuthorizationPolicies ...*v1beta1.AuthorizationPolicy) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range securityIstioIoV1Beta1AuthorizationPolicies {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddSecurityIstioIo_V1Beta1_AuthorizationPolicies", varargs...)
}

// AddSecurityIstioIo_V1Beta1_AuthorizationPolicies indicates an expected call of AddSecurityIstioIo_V1Beta1_AuthorizationPolicies
func (mr *MockBuilderMockRecorder) AddSecurityIstioIo_V1Beta1_AuthorizationPolicies(securityIstioIoV1Beta1AuthorizationPolicies ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSecurityIstioIo_V1Beta1_AuthorizationPolicies", reflect.TypeOf((*MockBuilder)(nil).AddSecurityIstioIo_V1Beta1_AuthorizationPolicies), securityIstioIoV1Beta1AuthorizationPolicies...)
}

// GetSecurityIstioIo_V1Beta1_AuthorizationPolicies mocks base method
func (m *MockBuilder) GetSecurityIstioIo_V1Beta1_AuthorizationPolicies() v1beta1sets.AuthorizationPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityIstioIo_V1Beta1_AuthorizationPolicies")
	ret0, _ := ret[0].(v1beta1sets.AuthorizationPolicySet)
	return ret0
}

// GetSecurityIstioIo_V1Beta1_AuthorizationPolicies indicates an expected call of GetSecurityIstioIo_V1Beta1_AuthorizationPolicies
func (mr *MockBuilderMockRecorder) GetSecurityIstioIo_V1Beta1_AuthorizationPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityIstioIo_V1Beta1_AuthorizationPolicies", reflect.TypeOf((*MockBuilder)(nil).GetSecurityIstioIo_V1Beta1_AuthorizationPolicies))
}

// AddV1_ConfigMaps mocks base method
func (m *MockBuilder) AddV1_ConfigMaps(v1ConfigMaps ...*v1.ConfigMap) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range v1ConfigMaps {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddV1_ConfigMaps", varargs...)
}

// AddV1_ConfigMaps indicates an expected call of AddV1_ConfigMaps
func (mr *MockBuilderMockRecorder) AddV1_ConfigMaps(v1ConfigMaps ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddV1_ConfigMaps", reflect.TypeOf((*MockBuilder)(nil).AddV1_ConfigMaps), v1ConfigMaps...)
}

// GetV1_ConfigMaps mocks base method
func (m *MockBuilder) GetV1_ConfigMaps() v1sets.ConfigMapSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV1_ConfigMaps")
	ret0, _ := ret[0].(v1sets.ConfigMapSet)
	return ret0
}

// GetV1_ConfigMaps indicates an expected call of GetV1_ConfigMaps
func (mr *MockBuilderMockRecorder) GetV1_ConfigMaps() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV1_ConfigMaps", reflect.TypeOf((*MockBuilder)(nil).GetV1_ConfigMaps))
}

// BuildLabelPartitionedSnapshot mocks base method
func (m *MockBuilder) BuildLabelPartitionedSnapshot(labelKey string) (istio.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildLabelPartitionedSnapshot", labelKey)
	ret0, _ := ret[0].(istio.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildLabelPartitionedSnapshot indicates an expected call of BuildLabelPartitionedSnapshot
func (mr *MockBuilderMockRecorder) BuildLabelPartitionedSnapshot(labelKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildLabelPartitionedSnapshot", reflect.TypeOf((*MockBuilder)(nil).BuildLabelPartitionedSnapshot), labelKey)
}

// BuildSinglePartitionedSnapshot mocks base method
func (m *MockBuilder) BuildSinglePartitionedSnapshot(snapshotLabels map[string]string) (istio.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildSinglePartitionedSnapshot", snapshotLabels)
	ret0, _ := ret[0].(istio.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildSinglePartitionedSnapshot indicates an expected call of BuildSinglePartitionedSnapshot
func (mr *MockBuilderMockRecorder) BuildSinglePartitionedSnapshot(snapshotLabels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildSinglePartitionedSnapshot", reflect.TypeOf((*MockBuilder)(nil).BuildSinglePartitionedSnapshot), snapshotLabels)
}

// AddCluster mocks base method
func (m *MockBuilder) AddCluster(cluster string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddCluster", cluster)
}

// AddCluster indicates an expected call of AddCluster
func (mr *MockBuilderMockRecorder) AddCluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCluster", reflect.TypeOf((*MockBuilder)(nil).AddCluster), cluster)
}

// Clusters mocks base method
func (m *MockBuilder) Clusters() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clusters")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Clusters indicates an expected call of Clusters
func (mr *MockBuilderMockRecorder) Clusters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clusters", reflect.TypeOf((*MockBuilder)(nil).Clusters))
}

// Merge mocks base method
func (m *MockBuilder) Merge(other istio.Builder) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Merge", other)
}

// Merge indicates an expected call of Merge
func (mr *MockBuilderMockRecorder) Merge(other interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MockBuilder)(nil).Merge), other)
}

// Clone mocks base method
func (m *MockBuilder) Clone() istio.Builder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(istio.Builder)
	return ret0
}

// Clone indicates an expected call of Clone
func (mr *MockBuilderMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockBuilder)(nil).Clone))
}

// Delta mocks base method
func (m *MockBuilder) Delta(newSnap istio.Builder) output.SnapshotDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSnap)
	ret0, _ := ret[0].(output.SnapshotDelta)
	return ret0
}

// Delta indicates an expected call of Delta
func (mr *MockBuilderMockRecorder) Delta(newSnap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockBuilder)(nil).Delta), newSnap)
}
