// Code generated by MockGen. DO NOT EDIT.
// Source: ./snapshot.go

// Package mock_istio is a generated GoMock package.
package mock_istio

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha3sets "github.com/solo-io/external-apis/pkg/api/istio/networking.istio.io/v1alpha3/sets"
	v1beta1sets "github.com/solo-io/external-apis/pkg/api/istio/security.istio.io/v1beta1/sets"
	v1sets "github.com/solo-io/external-apis/pkg/api/k8s/core/v1/sets"
	v1alpha2 "github.com/solo-io/gloo-mesh/pkg/api/certificates.mesh.gloo.solo.io/v1alpha2"
	v1alpha2sets "github.com/solo-io/gloo-mesh/pkg/api/certificates.mesh.gloo.solo.io/v1alpha2/sets"
	istio "github.com/solo-io/gloo-mesh/pkg/api/networking.mesh.gloo.solo.io/output/istio"
	v1alpha1 "github.com/solo-io/gloo-mesh/pkg/api/xds.agent.enterprise.mesh.gloo.solo.io/v1alpha1"
	v1alpha1sets "github.com/solo-io/gloo-mesh/pkg/api/xds.agent.enterprise.mesh.gloo.solo.io/v1alpha1/sets"
	output "github.com/solo-io/skv2/contrib/pkg/output"
	multicluster "github.com/solo-io/skv2/pkg/multicluster"
	v1alpha3 "istio.io/client-go/pkg/apis/networking/v1alpha3"
	v1beta1 "istio.io/client-go/pkg/apis/security/v1beta1"
	v1 "k8s.io/api/core/v1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockSnapshot is a mock of Snapshot interface
type MockSnapshot struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotMockRecorder
}

// MockSnapshotMockRecorder is the mock recorder for MockSnapshot
type MockSnapshotMockRecorder struct {
	mock *MockSnapshot
}

// NewMockSnapshot creates a new mock instance
func NewMockSnapshot(ctrl *gomock.Controller) *MockSnapshot {
	mock := &MockSnapshot{ctrl: ctrl}
	mock.recorder = &MockSnapshotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSnapshot) EXPECT() *MockSnapshotMockRecorder {
	return m.recorder
}

// CertificatesMeshGlooSoloIov1Alpha2IssuedCertificates mocks base method
func (m *MockSnapshot) CertificatesMeshGlooSoloIov1Alpha2IssuedCertificates() []istio.LabeledCertificatesMeshGlooSoloIov1Alpha2IssuedCertificateSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertificatesMeshGlooSoloIov1Alpha2IssuedCertificates")
	ret0, _ := ret[0].([]istio.LabeledCertificatesMeshGlooSoloIov1Alpha2IssuedCertificateSet)
	return ret0
}

// CertificatesMeshGlooSoloIov1Alpha2IssuedCertificates indicates an expected call of CertificatesMeshGlooSoloIov1Alpha2IssuedCertificates
func (mr *MockSnapshotMockRecorder) CertificatesMeshGlooSoloIov1Alpha2IssuedCertificates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertificatesMeshGlooSoloIov1Alpha2IssuedCertificates", reflect.TypeOf((*MockSnapshot)(nil).CertificatesMeshGlooSoloIov1Alpha2IssuedCertificates))
}

// CertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives mocks base method
func (m *MockSnapshot) CertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives() []istio.LabeledCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectiveSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives")
	ret0, _ := ret[0].([]istio.LabeledCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectiveSet)
	return ret0
}

// CertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives indicates an expected call of CertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives
func (mr *MockSnapshotMockRecorder) CertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives", reflect.TypeOf((*MockSnapshot)(nil).CertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives))
}

// XdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs mocks base method
func (m *MockSnapshot) XdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs() []istio.LabeledXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs")
	ret0, _ := ret[0].([]istio.LabeledXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigSet)
	return ret0
}

// XdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs indicates an expected call of XdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs
func (mr *MockSnapshotMockRecorder) XdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs", reflect.TypeOf((*MockSnapshot)(nil).XdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs))
}

// NetworkingIstioIov1Alpha3DestinationRules mocks base method
func (m *MockSnapshot) NetworkingIstioIov1Alpha3DestinationRules() []istio.LabeledNetworkingIstioIov1Alpha3DestinationRuleSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkingIstioIov1Alpha3DestinationRules")
	ret0, _ := ret[0].([]istio.LabeledNetworkingIstioIov1Alpha3DestinationRuleSet)
	return ret0
}

// NetworkingIstioIov1Alpha3DestinationRules indicates an expected call of NetworkingIstioIov1Alpha3DestinationRules
func (mr *MockSnapshotMockRecorder) NetworkingIstioIov1Alpha3DestinationRules() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkingIstioIov1Alpha3DestinationRules", reflect.TypeOf((*MockSnapshot)(nil).NetworkingIstioIov1Alpha3DestinationRules))
}

// NetworkingIstioIov1Alpha3EnvoyFilters mocks base method
func (m *MockSnapshot) NetworkingIstioIov1Alpha3EnvoyFilters() []istio.LabeledNetworkingIstioIov1Alpha3EnvoyFilterSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkingIstioIov1Alpha3EnvoyFilters")
	ret0, _ := ret[0].([]istio.LabeledNetworkingIstioIov1Alpha3EnvoyFilterSet)
	return ret0
}

// NetworkingIstioIov1Alpha3EnvoyFilters indicates an expected call of NetworkingIstioIov1Alpha3EnvoyFilters
func (mr *MockSnapshotMockRecorder) NetworkingIstioIov1Alpha3EnvoyFilters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkingIstioIov1Alpha3EnvoyFilters", reflect.TypeOf((*MockSnapshot)(nil).NetworkingIstioIov1Alpha3EnvoyFilters))
}

// NetworkingIstioIov1Alpha3Gateways mocks base method
func (m *MockSnapshot) NetworkingIstioIov1Alpha3Gateways() []istio.LabeledNetworkingIstioIov1Alpha3GatewaySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkingIstioIov1Alpha3Gateways")
	ret0, _ := ret[0].([]istio.LabeledNetworkingIstioIov1Alpha3GatewaySet)
	return ret0
}

// NetworkingIstioIov1Alpha3Gateways indicates an expected call of NetworkingIstioIov1Alpha3Gateways
func (mr *MockSnapshotMockRecorder) NetworkingIstioIov1Alpha3Gateways() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkingIstioIov1Alpha3Gateways", reflect.TypeOf((*MockSnapshot)(nil).NetworkingIstioIov1Alpha3Gateways))
}

// NetworkingIstioIov1Alpha3ServiceEntries mocks base method
func (m *MockSnapshot) NetworkingIstioIov1Alpha3ServiceEntries() []istio.LabeledNetworkingIstioIov1Alpha3ServiceEntrySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkingIstioIov1Alpha3ServiceEntries")
	ret0, _ := ret[0].([]istio.LabeledNetworkingIstioIov1Alpha3ServiceEntrySet)
	return ret0
}

// NetworkingIstioIov1Alpha3ServiceEntries indicates an expected call of NetworkingIstioIov1Alpha3ServiceEntries
func (mr *MockSnapshotMockRecorder) NetworkingIstioIov1Alpha3ServiceEntries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkingIstioIov1Alpha3ServiceEntries", reflect.TypeOf((*MockSnapshot)(nil).NetworkingIstioIov1Alpha3ServiceEntries))
}

// NetworkingIstioIov1Alpha3VirtualServices mocks base method
func (m *MockSnapshot) NetworkingIstioIov1Alpha3VirtualServices() []istio.LabeledNetworkingIstioIov1Alpha3VirtualServiceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkingIstioIov1Alpha3VirtualServices")
	ret0, _ := ret[0].([]istio.LabeledNetworkingIstioIov1Alpha3VirtualServiceSet)
	return ret0
}

// NetworkingIstioIov1Alpha3VirtualServices indicates an expected call of NetworkingIstioIov1Alpha3VirtualServices
func (mr *MockSnapshotMockRecorder) NetworkingIstioIov1Alpha3VirtualServices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkingIstioIov1Alpha3VirtualServices", reflect.TypeOf((*MockSnapshot)(nil).NetworkingIstioIov1Alpha3VirtualServices))
}

// SecurityIstioIov1Beta1AuthorizationPolicies mocks base method
func (m *MockSnapshot) SecurityIstioIov1Beta1AuthorizationPolicies() []istio.LabeledSecurityIstioIov1Beta1AuthorizationPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecurityIstioIov1Beta1AuthorizationPolicies")
	ret0, _ := ret[0].([]istio.LabeledSecurityIstioIov1Beta1AuthorizationPolicySet)
	return ret0
}

// SecurityIstioIov1Beta1AuthorizationPolicies indicates an expected call of SecurityIstioIov1Beta1AuthorizationPolicies
func (mr *MockSnapshotMockRecorder) SecurityIstioIov1Beta1AuthorizationPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecurityIstioIov1Beta1AuthorizationPolicies", reflect.TypeOf((*MockSnapshot)(nil).SecurityIstioIov1Beta1AuthorizationPolicies))
}

// V1ConfigMaps mocks base method
func (m *MockSnapshot) V1ConfigMaps() []istio.LabeledV1ConfigMapSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V1ConfigMaps")
	ret0, _ := ret[0].([]istio.LabeledV1ConfigMapSet)
	return ret0
}

// V1ConfigMaps indicates an expected call of V1ConfigMaps
func (mr *MockSnapshotMockRecorder) V1ConfigMaps() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V1ConfigMaps", reflect.TypeOf((*MockSnapshot)(nil).V1ConfigMaps))
}

// ApplyLocalCluster mocks base method
func (m *MockSnapshot) ApplyLocalCluster(ctx context.Context, clusterClient client.Client, errHandler output.ErrorHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ApplyLocalCluster", ctx, clusterClient, errHandler)
}

// ApplyLocalCluster indicates an expected call of ApplyLocalCluster
func (mr *MockSnapshotMockRecorder) ApplyLocalCluster(ctx, clusterClient, errHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyLocalCluster", reflect.TypeOf((*MockSnapshot)(nil).ApplyLocalCluster), ctx, clusterClient, errHandler)
}

// ApplyMultiCluster mocks base method
func (m *MockSnapshot) ApplyMultiCluster(ctx context.Context, multiClusterClient multicluster.Client, errHandler output.ErrorHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ApplyMultiCluster", ctx, multiClusterClient, errHandler)
}

// ApplyMultiCluster indicates an expected call of ApplyMultiCluster
func (mr *MockSnapshotMockRecorder) ApplyMultiCluster(ctx, multiClusterClient, errHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyMultiCluster", reflect.TypeOf((*MockSnapshot)(nil).ApplyMultiCluster), ctx, multiClusterClient, errHandler)
}

// MarshalJSON mocks base method
func (m *MockSnapshot) MarshalJSON() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalJSON")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalJSON indicates an expected call of MarshalJSON
func (mr *MockSnapshotMockRecorder) MarshalJSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalJSON", reflect.TypeOf((*MockSnapshot)(nil).MarshalJSON))
}

// MockLabeledCertificatesMeshGlooSoloIov1Alpha2IssuedCertificateSet is a mock of LabeledCertificatesMeshGlooSoloIov1Alpha2IssuedCertificateSet interface
type MockLabeledCertificatesMeshGlooSoloIov1Alpha2IssuedCertificateSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledCertificatesMeshGlooSoloIov1Alpha2IssuedCertificateSetMockRecorder
}

// MockLabeledCertificatesMeshGlooSoloIov1Alpha2IssuedCertificateSetMockRecorder is the mock recorder for MockLabeledCertificatesMeshGlooSoloIov1Alpha2IssuedCertificateSet
type MockLabeledCertificatesMeshGlooSoloIov1Alpha2IssuedCertificateSetMockRecorder struct {
	mock *MockLabeledCertificatesMeshGlooSoloIov1Alpha2IssuedCertificateSet
}

// NewMockLabeledCertificatesMeshGlooSoloIov1Alpha2IssuedCertificateSet creates a new mock instance
func NewMockLabeledCertificatesMeshGlooSoloIov1Alpha2IssuedCertificateSet(ctrl *gomock.Controller) *MockLabeledCertificatesMeshGlooSoloIov1Alpha2IssuedCertificateSet {
	mock := &MockLabeledCertificatesMeshGlooSoloIov1Alpha2IssuedCertificateSet{ctrl: ctrl}
	mock.recorder = &MockLabeledCertificatesMeshGlooSoloIov1Alpha2IssuedCertificateSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledCertificatesMeshGlooSoloIov1Alpha2IssuedCertificateSet) EXPECT() *MockLabeledCertificatesMeshGlooSoloIov1Alpha2IssuedCertificateSetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledCertificatesMeshGlooSoloIov1Alpha2IssuedCertificateSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledCertificatesMeshGlooSoloIov1Alpha2IssuedCertificateSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledCertificatesMeshGlooSoloIov1Alpha2IssuedCertificateSet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledCertificatesMeshGlooSoloIov1Alpha2IssuedCertificateSet) Set() v1alpha2sets.IssuedCertificateSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha2sets.IssuedCertificateSet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledCertificatesMeshGlooSoloIov1Alpha2IssuedCertificateSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledCertificatesMeshGlooSoloIov1Alpha2IssuedCertificateSet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledCertificatesMeshGlooSoloIov1Alpha2IssuedCertificateSet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledCertificatesMeshGlooSoloIov1Alpha2IssuedCertificateSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledCertificatesMeshGlooSoloIov1Alpha2IssuedCertificateSet)(nil).Generic))
}

// MockLabeledCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectiveSet is a mock of LabeledCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectiveSet interface
type MockLabeledCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectiveSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectiveSetMockRecorder
}

// MockLabeledCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectiveSetMockRecorder is the mock recorder for MockLabeledCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectiveSet
type MockLabeledCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectiveSetMockRecorder struct {
	mock *MockLabeledCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectiveSet
}

// NewMockLabeledCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectiveSet creates a new mock instance
func NewMockLabeledCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectiveSet(ctrl *gomock.Controller) *MockLabeledCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectiveSet {
	mock := &MockLabeledCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectiveSet{ctrl: ctrl}
	mock.recorder = &MockLabeledCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectiveSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectiveSet) EXPECT() *MockLabeledCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectiveSetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectiveSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectiveSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectiveSet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectiveSet) Set() v1alpha2sets.PodBounceDirectiveSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha2sets.PodBounceDirectiveSet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectiveSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectiveSet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectiveSet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectiveSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectiveSet)(nil).Generic))
}

// MockLabeledXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigSet is a mock of LabeledXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigSet interface
type MockLabeledXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigSetMockRecorder
}

// MockLabeledXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigSetMockRecorder is the mock recorder for MockLabeledXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigSet
type MockLabeledXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigSetMockRecorder struct {
	mock *MockLabeledXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigSet
}

// NewMockLabeledXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigSet creates a new mock instance
func NewMockLabeledXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigSet(ctrl *gomock.Controller) *MockLabeledXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigSet {
	mock := &MockLabeledXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigSet{ctrl: ctrl}
	mock.recorder = &MockLabeledXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigSet) EXPECT() *MockLabeledXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigSetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigSet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigSet) Set() v1alpha1sets.XdsConfigSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha1sets.XdsConfigSet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigSet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigSet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigSet)(nil).Generic))
}

// MockLabeledNetworkingIstioIov1Alpha3DestinationRuleSet is a mock of LabeledNetworkingIstioIov1Alpha3DestinationRuleSet interface
type MockLabeledNetworkingIstioIov1Alpha3DestinationRuleSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledNetworkingIstioIov1Alpha3DestinationRuleSetMockRecorder
}

// MockLabeledNetworkingIstioIov1Alpha3DestinationRuleSetMockRecorder is the mock recorder for MockLabeledNetworkingIstioIov1Alpha3DestinationRuleSet
type MockLabeledNetworkingIstioIov1Alpha3DestinationRuleSetMockRecorder struct {
	mock *MockLabeledNetworkingIstioIov1Alpha3DestinationRuleSet
}

// NewMockLabeledNetworkingIstioIov1Alpha3DestinationRuleSet creates a new mock instance
func NewMockLabeledNetworkingIstioIov1Alpha3DestinationRuleSet(ctrl *gomock.Controller) *MockLabeledNetworkingIstioIov1Alpha3DestinationRuleSet {
	mock := &MockLabeledNetworkingIstioIov1Alpha3DestinationRuleSet{ctrl: ctrl}
	mock.recorder = &MockLabeledNetworkingIstioIov1Alpha3DestinationRuleSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledNetworkingIstioIov1Alpha3DestinationRuleSet) EXPECT() *MockLabeledNetworkingIstioIov1Alpha3DestinationRuleSetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledNetworkingIstioIov1Alpha3DestinationRuleSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledNetworkingIstioIov1Alpha3DestinationRuleSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledNetworkingIstioIov1Alpha3DestinationRuleSet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledNetworkingIstioIov1Alpha3DestinationRuleSet) Set() v1alpha3sets.DestinationRuleSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha3sets.DestinationRuleSet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledNetworkingIstioIov1Alpha3DestinationRuleSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledNetworkingIstioIov1Alpha3DestinationRuleSet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledNetworkingIstioIov1Alpha3DestinationRuleSet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledNetworkingIstioIov1Alpha3DestinationRuleSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledNetworkingIstioIov1Alpha3DestinationRuleSet)(nil).Generic))
}

// MockLabeledNetworkingIstioIov1Alpha3EnvoyFilterSet is a mock of LabeledNetworkingIstioIov1Alpha3EnvoyFilterSet interface
type MockLabeledNetworkingIstioIov1Alpha3EnvoyFilterSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledNetworkingIstioIov1Alpha3EnvoyFilterSetMockRecorder
}

// MockLabeledNetworkingIstioIov1Alpha3EnvoyFilterSetMockRecorder is the mock recorder for MockLabeledNetworkingIstioIov1Alpha3EnvoyFilterSet
type MockLabeledNetworkingIstioIov1Alpha3EnvoyFilterSetMockRecorder struct {
	mock *MockLabeledNetworkingIstioIov1Alpha3EnvoyFilterSet
}

// NewMockLabeledNetworkingIstioIov1Alpha3EnvoyFilterSet creates a new mock instance
func NewMockLabeledNetworkingIstioIov1Alpha3EnvoyFilterSet(ctrl *gomock.Controller) *MockLabeledNetworkingIstioIov1Alpha3EnvoyFilterSet {
	mock := &MockLabeledNetworkingIstioIov1Alpha3EnvoyFilterSet{ctrl: ctrl}
	mock.recorder = &MockLabeledNetworkingIstioIov1Alpha3EnvoyFilterSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledNetworkingIstioIov1Alpha3EnvoyFilterSet) EXPECT() *MockLabeledNetworkingIstioIov1Alpha3EnvoyFilterSetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledNetworkingIstioIov1Alpha3EnvoyFilterSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledNetworkingIstioIov1Alpha3EnvoyFilterSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledNetworkingIstioIov1Alpha3EnvoyFilterSet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledNetworkingIstioIov1Alpha3EnvoyFilterSet) Set() v1alpha3sets.EnvoyFilterSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha3sets.EnvoyFilterSet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledNetworkingIstioIov1Alpha3EnvoyFilterSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledNetworkingIstioIov1Alpha3EnvoyFilterSet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledNetworkingIstioIov1Alpha3EnvoyFilterSet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledNetworkingIstioIov1Alpha3EnvoyFilterSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledNetworkingIstioIov1Alpha3EnvoyFilterSet)(nil).Generic))
}

// MockLabeledNetworkingIstioIov1Alpha3GatewaySet is a mock of LabeledNetworkingIstioIov1Alpha3GatewaySet interface
type MockLabeledNetworkingIstioIov1Alpha3GatewaySet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledNetworkingIstioIov1Alpha3GatewaySetMockRecorder
}

// MockLabeledNetworkingIstioIov1Alpha3GatewaySetMockRecorder is the mock recorder for MockLabeledNetworkingIstioIov1Alpha3GatewaySet
type MockLabeledNetworkingIstioIov1Alpha3GatewaySetMockRecorder struct {
	mock *MockLabeledNetworkingIstioIov1Alpha3GatewaySet
}

// NewMockLabeledNetworkingIstioIov1Alpha3GatewaySet creates a new mock instance
func NewMockLabeledNetworkingIstioIov1Alpha3GatewaySet(ctrl *gomock.Controller) *MockLabeledNetworkingIstioIov1Alpha3GatewaySet {
	mock := &MockLabeledNetworkingIstioIov1Alpha3GatewaySet{ctrl: ctrl}
	mock.recorder = &MockLabeledNetworkingIstioIov1Alpha3GatewaySetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledNetworkingIstioIov1Alpha3GatewaySet) EXPECT() *MockLabeledNetworkingIstioIov1Alpha3GatewaySetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledNetworkingIstioIov1Alpha3GatewaySet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledNetworkingIstioIov1Alpha3GatewaySetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledNetworkingIstioIov1Alpha3GatewaySet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledNetworkingIstioIov1Alpha3GatewaySet) Set() v1alpha3sets.GatewaySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha3sets.GatewaySet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledNetworkingIstioIov1Alpha3GatewaySetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledNetworkingIstioIov1Alpha3GatewaySet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledNetworkingIstioIov1Alpha3GatewaySet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledNetworkingIstioIov1Alpha3GatewaySetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledNetworkingIstioIov1Alpha3GatewaySet)(nil).Generic))
}

// MockLabeledNetworkingIstioIov1Alpha3ServiceEntrySet is a mock of LabeledNetworkingIstioIov1Alpha3ServiceEntrySet interface
type MockLabeledNetworkingIstioIov1Alpha3ServiceEntrySet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledNetworkingIstioIov1Alpha3ServiceEntrySetMockRecorder
}

// MockLabeledNetworkingIstioIov1Alpha3ServiceEntrySetMockRecorder is the mock recorder for MockLabeledNetworkingIstioIov1Alpha3ServiceEntrySet
type MockLabeledNetworkingIstioIov1Alpha3ServiceEntrySetMockRecorder struct {
	mock *MockLabeledNetworkingIstioIov1Alpha3ServiceEntrySet
}

// NewMockLabeledNetworkingIstioIov1Alpha3ServiceEntrySet creates a new mock instance
func NewMockLabeledNetworkingIstioIov1Alpha3ServiceEntrySet(ctrl *gomock.Controller) *MockLabeledNetworkingIstioIov1Alpha3ServiceEntrySet {
	mock := &MockLabeledNetworkingIstioIov1Alpha3ServiceEntrySet{ctrl: ctrl}
	mock.recorder = &MockLabeledNetworkingIstioIov1Alpha3ServiceEntrySetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledNetworkingIstioIov1Alpha3ServiceEntrySet) EXPECT() *MockLabeledNetworkingIstioIov1Alpha3ServiceEntrySetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledNetworkingIstioIov1Alpha3ServiceEntrySet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledNetworkingIstioIov1Alpha3ServiceEntrySetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledNetworkingIstioIov1Alpha3ServiceEntrySet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledNetworkingIstioIov1Alpha3ServiceEntrySet) Set() v1alpha3sets.ServiceEntrySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha3sets.ServiceEntrySet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledNetworkingIstioIov1Alpha3ServiceEntrySetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledNetworkingIstioIov1Alpha3ServiceEntrySet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledNetworkingIstioIov1Alpha3ServiceEntrySet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledNetworkingIstioIov1Alpha3ServiceEntrySetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledNetworkingIstioIov1Alpha3ServiceEntrySet)(nil).Generic))
}

// MockLabeledNetworkingIstioIov1Alpha3VirtualServiceSet is a mock of LabeledNetworkingIstioIov1Alpha3VirtualServiceSet interface
type MockLabeledNetworkingIstioIov1Alpha3VirtualServiceSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledNetworkingIstioIov1Alpha3VirtualServiceSetMockRecorder
}

// MockLabeledNetworkingIstioIov1Alpha3VirtualServiceSetMockRecorder is the mock recorder for MockLabeledNetworkingIstioIov1Alpha3VirtualServiceSet
type MockLabeledNetworkingIstioIov1Alpha3VirtualServiceSetMockRecorder struct {
	mock *MockLabeledNetworkingIstioIov1Alpha3VirtualServiceSet
}

// NewMockLabeledNetworkingIstioIov1Alpha3VirtualServiceSet creates a new mock instance
func NewMockLabeledNetworkingIstioIov1Alpha3VirtualServiceSet(ctrl *gomock.Controller) *MockLabeledNetworkingIstioIov1Alpha3VirtualServiceSet {
	mock := &MockLabeledNetworkingIstioIov1Alpha3VirtualServiceSet{ctrl: ctrl}
	mock.recorder = &MockLabeledNetworkingIstioIov1Alpha3VirtualServiceSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledNetworkingIstioIov1Alpha3VirtualServiceSet) EXPECT() *MockLabeledNetworkingIstioIov1Alpha3VirtualServiceSetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledNetworkingIstioIov1Alpha3VirtualServiceSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledNetworkingIstioIov1Alpha3VirtualServiceSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledNetworkingIstioIov1Alpha3VirtualServiceSet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledNetworkingIstioIov1Alpha3VirtualServiceSet) Set() v1alpha3sets.VirtualServiceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha3sets.VirtualServiceSet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledNetworkingIstioIov1Alpha3VirtualServiceSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledNetworkingIstioIov1Alpha3VirtualServiceSet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledNetworkingIstioIov1Alpha3VirtualServiceSet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledNetworkingIstioIov1Alpha3VirtualServiceSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledNetworkingIstioIov1Alpha3VirtualServiceSet)(nil).Generic))
}

// MockLabeledSecurityIstioIov1Beta1AuthorizationPolicySet is a mock of LabeledSecurityIstioIov1Beta1AuthorizationPolicySet interface
type MockLabeledSecurityIstioIov1Beta1AuthorizationPolicySet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledSecurityIstioIov1Beta1AuthorizationPolicySetMockRecorder
}

// MockLabeledSecurityIstioIov1Beta1AuthorizationPolicySetMockRecorder is the mock recorder for MockLabeledSecurityIstioIov1Beta1AuthorizationPolicySet
type MockLabeledSecurityIstioIov1Beta1AuthorizationPolicySetMockRecorder struct {
	mock *MockLabeledSecurityIstioIov1Beta1AuthorizationPolicySet
}

// NewMockLabeledSecurityIstioIov1Beta1AuthorizationPolicySet creates a new mock instance
func NewMockLabeledSecurityIstioIov1Beta1AuthorizationPolicySet(ctrl *gomock.Controller) *MockLabeledSecurityIstioIov1Beta1AuthorizationPolicySet {
	mock := &MockLabeledSecurityIstioIov1Beta1AuthorizationPolicySet{ctrl: ctrl}
	mock.recorder = &MockLabeledSecurityIstioIov1Beta1AuthorizationPolicySetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledSecurityIstioIov1Beta1AuthorizationPolicySet) EXPECT() *MockLabeledSecurityIstioIov1Beta1AuthorizationPolicySetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledSecurityIstioIov1Beta1AuthorizationPolicySet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledSecurityIstioIov1Beta1AuthorizationPolicySetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledSecurityIstioIov1Beta1AuthorizationPolicySet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledSecurityIstioIov1Beta1AuthorizationPolicySet) Set() v1beta1sets.AuthorizationPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1beta1sets.AuthorizationPolicySet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledSecurityIstioIov1Beta1AuthorizationPolicySetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledSecurityIstioIov1Beta1AuthorizationPolicySet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledSecurityIstioIov1Beta1AuthorizationPolicySet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledSecurityIstioIov1Beta1AuthorizationPolicySetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledSecurityIstioIov1Beta1AuthorizationPolicySet)(nil).Generic))
}

// MockLabeledV1ConfigMapSet is a mock of LabeledV1ConfigMapSet interface
type MockLabeledV1ConfigMapSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledV1ConfigMapSetMockRecorder
}

// MockLabeledV1ConfigMapSetMockRecorder is the mock recorder for MockLabeledV1ConfigMapSet
type MockLabeledV1ConfigMapSetMockRecorder struct {
	mock *MockLabeledV1ConfigMapSet
}

// NewMockLabeledV1ConfigMapSet creates a new mock instance
func NewMockLabeledV1ConfigMapSet(ctrl *gomock.Controller) *MockLabeledV1ConfigMapSet {
	mock := &MockLabeledV1ConfigMapSet{ctrl: ctrl}
	mock.recorder = &MockLabeledV1ConfigMapSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledV1ConfigMapSet) EXPECT() *MockLabeledV1ConfigMapSetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledV1ConfigMapSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledV1ConfigMapSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledV1ConfigMapSet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledV1ConfigMapSet) Set() v1sets.ConfigMapSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1sets.ConfigMapSet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledV1ConfigMapSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledV1ConfigMapSet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledV1ConfigMapSet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledV1ConfigMapSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledV1ConfigMapSet)(nil).Generic))
}

// MockBuilder is a mock of Builder interface
type MockBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockBuilderMockRecorder
}

// MockBuilderMockRecorder is the mock recorder for MockBuilder
type MockBuilderMockRecorder struct {
	mock *MockBuilder
}

// NewMockBuilder creates a new mock instance
func NewMockBuilder(ctrl *gomock.Controller) *MockBuilder {
	mock := &MockBuilder{ctrl: ctrl}
	mock.recorder = &MockBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBuilder) EXPECT() *MockBuilderMockRecorder {
	return m.recorder
}

// AddCertificatesMeshGlooSoloIov1Alpha2IssuedCertificates mocks base method
func (m *MockBuilder) AddCertificatesMeshGlooSoloIov1Alpha2IssuedCertificates(certificatesMeshGlooSoloIov1Alpha2IssuedCertificates ...*v1alpha2.IssuedCertificate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range certificatesMeshGlooSoloIov1Alpha2IssuedCertificates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddCertificatesMeshGlooSoloIov1Alpha2IssuedCertificates", varargs...)
}

// AddCertificatesMeshGlooSoloIov1Alpha2IssuedCertificates indicates an expected call of AddCertificatesMeshGlooSoloIov1Alpha2IssuedCertificates
func (mr *MockBuilderMockRecorder) AddCertificatesMeshGlooSoloIov1Alpha2IssuedCertificates(certificatesMeshGlooSoloIov1Alpha2IssuedCertificates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCertificatesMeshGlooSoloIov1Alpha2IssuedCertificates", reflect.TypeOf((*MockBuilder)(nil).AddCertificatesMeshGlooSoloIov1Alpha2IssuedCertificates), certificatesMeshGlooSoloIov1Alpha2IssuedCertificates...)
}

// GetCertificatesMeshGlooSoloIov1Alpha2IssuedCertificates mocks base method
func (m *MockBuilder) GetCertificatesMeshGlooSoloIov1Alpha2IssuedCertificates() v1alpha2sets.IssuedCertificateSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificatesMeshGlooSoloIov1Alpha2IssuedCertificates")
	ret0, _ := ret[0].(v1alpha2sets.IssuedCertificateSet)
	return ret0
}

// GetCertificatesMeshGlooSoloIov1Alpha2IssuedCertificates indicates an expected call of GetCertificatesMeshGlooSoloIov1Alpha2IssuedCertificates
func (mr *MockBuilderMockRecorder) GetCertificatesMeshGlooSoloIov1Alpha2IssuedCertificates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificatesMeshGlooSoloIov1Alpha2IssuedCertificates", reflect.TypeOf((*MockBuilder)(nil).GetCertificatesMeshGlooSoloIov1Alpha2IssuedCertificates))
}

// AddCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives mocks base method
func (m *MockBuilder) AddCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives(certificatesMeshGlooSoloIov1Alpha2PodBounceDirectives ...*v1alpha2.PodBounceDirective) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range certificatesMeshGlooSoloIov1Alpha2PodBounceDirectives {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives", varargs...)
}

// AddCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives indicates an expected call of AddCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives
func (mr *MockBuilderMockRecorder) AddCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives(certificatesMeshGlooSoloIov1Alpha2PodBounceDirectives ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives", reflect.TypeOf((*MockBuilder)(nil).AddCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives), certificatesMeshGlooSoloIov1Alpha2PodBounceDirectives...)
}

// GetCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives mocks base method
func (m *MockBuilder) GetCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives() v1alpha2sets.PodBounceDirectiveSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives")
	ret0, _ := ret[0].(v1alpha2sets.PodBounceDirectiveSet)
	return ret0
}

// GetCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives indicates an expected call of GetCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives
func (mr *MockBuilderMockRecorder) GetCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives", reflect.TypeOf((*MockBuilder)(nil).GetCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives))
}

// AddXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs mocks base method
func (m *MockBuilder) AddXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs(xdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs ...*v1alpha1.XdsConfig) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range xdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs", varargs...)
}

// AddXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs indicates an expected call of AddXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs
func (mr *MockBuilderMockRecorder) AddXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs(xdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs", reflect.TypeOf((*MockBuilder)(nil).AddXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs), xdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs...)
}

// GetXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs mocks base method
func (m *MockBuilder) GetXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs() v1alpha1sets.XdsConfigSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs")
	ret0, _ := ret[0].(v1alpha1sets.XdsConfigSet)
	return ret0
}

// GetXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs indicates an expected call of GetXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs
func (mr *MockBuilderMockRecorder) GetXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs", reflect.TypeOf((*MockBuilder)(nil).GetXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs))
}

// AddNetworkingIstioIov1Alpha3DestinationRules mocks base method
func (m *MockBuilder) AddNetworkingIstioIov1Alpha3DestinationRules(networkingIstioIov1Alpha3DestinationRules ...*v1alpha3.DestinationRule) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range networkingIstioIov1Alpha3DestinationRules {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddNetworkingIstioIov1Alpha3DestinationRules", varargs...)
}

// AddNetworkingIstioIov1Alpha3DestinationRules indicates an expected call of AddNetworkingIstioIov1Alpha3DestinationRules
func (mr *MockBuilderMockRecorder) AddNetworkingIstioIov1Alpha3DestinationRules(networkingIstioIov1Alpha3DestinationRules ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNetworkingIstioIov1Alpha3DestinationRules", reflect.TypeOf((*MockBuilder)(nil).AddNetworkingIstioIov1Alpha3DestinationRules), networkingIstioIov1Alpha3DestinationRules...)
}

// GetNetworkingIstioIov1Alpha3DestinationRules mocks base method
func (m *MockBuilder) GetNetworkingIstioIov1Alpha3DestinationRules() v1alpha3sets.DestinationRuleSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkingIstioIov1Alpha3DestinationRules")
	ret0, _ := ret[0].(v1alpha3sets.DestinationRuleSet)
	return ret0
}

// GetNetworkingIstioIov1Alpha3DestinationRules indicates an expected call of GetNetworkingIstioIov1Alpha3DestinationRules
func (mr *MockBuilderMockRecorder) GetNetworkingIstioIov1Alpha3DestinationRules() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkingIstioIov1Alpha3DestinationRules", reflect.TypeOf((*MockBuilder)(nil).GetNetworkingIstioIov1Alpha3DestinationRules))
}

// AddNetworkingIstioIov1Alpha3EnvoyFilters mocks base method
func (m *MockBuilder) AddNetworkingIstioIov1Alpha3EnvoyFilters(networkingIstioIov1Alpha3EnvoyFilters ...*v1alpha3.EnvoyFilter) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range networkingIstioIov1Alpha3EnvoyFilters {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddNetworkingIstioIov1Alpha3EnvoyFilters", varargs...)
}

// AddNetworkingIstioIov1Alpha3EnvoyFilters indicates an expected call of AddNetworkingIstioIov1Alpha3EnvoyFilters
func (mr *MockBuilderMockRecorder) AddNetworkingIstioIov1Alpha3EnvoyFilters(networkingIstioIov1Alpha3EnvoyFilters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNetworkingIstioIov1Alpha3EnvoyFilters", reflect.TypeOf((*MockBuilder)(nil).AddNetworkingIstioIov1Alpha3EnvoyFilters), networkingIstioIov1Alpha3EnvoyFilters...)
}

// GetNetworkingIstioIov1Alpha3EnvoyFilters mocks base method
func (m *MockBuilder) GetNetworkingIstioIov1Alpha3EnvoyFilters() v1alpha3sets.EnvoyFilterSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkingIstioIov1Alpha3EnvoyFilters")
	ret0, _ := ret[0].(v1alpha3sets.EnvoyFilterSet)
	return ret0
}

// GetNetworkingIstioIov1Alpha3EnvoyFilters indicates an expected call of GetNetworkingIstioIov1Alpha3EnvoyFilters
func (mr *MockBuilderMockRecorder) GetNetworkingIstioIov1Alpha3EnvoyFilters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkingIstioIov1Alpha3EnvoyFilters", reflect.TypeOf((*MockBuilder)(nil).GetNetworkingIstioIov1Alpha3EnvoyFilters))
}

// AddNetworkingIstioIov1Alpha3Gateways mocks base method
func (m *MockBuilder) AddNetworkingIstioIov1Alpha3Gateways(networkingIstioIov1Alpha3Gateways ...*v1alpha3.Gateway) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range networkingIstioIov1Alpha3Gateways {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddNetworkingIstioIov1Alpha3Gateways", varargs...)
}

// AddNetworkingIstioIov1Alpha3Gateways indicates an expected call of AddNetworkingIstioIov1Alpha3Gateways
func (mr *MockBuilderMockRecorder) AddNetworkingIstioIov1Alpha3Gateways(networkingIstioIov1Alpha3Gateways ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNetworkingIstioIov1Alpha3Gateways", reflect.TypeOf((*MockBuilder)(nil).AddNetworkingIstioIov1Alpha3Gateways), networkingIstioIov1Alpha3Gateways...)
}

// GetNetworkingIstioIov1Alpha3Gateways mocks base method
func (m *MockBuilder) GetNetworkingIstioIov1Alpha3Gateways() v1alpha3sets.GatewaySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkingIstioIov1Alpha3Gateways")
	ret0, _ := ret[0].(v1alpha3sets.GatewaySet)
	return ret0
}

// GetNetworkingIstioIov1Alpha3Gateways indicates an expected call of GetNetworkingIstioIov1Alpha3Gateways
func (mr *MockBuilderMockRecorder) GetNetworkingIstioIov1Alpha3Gateways() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkingIstioIov1Alpha3Gateways", reflect.TypeOf((*MockBuilder)(nil).GetNetworkingIstioIov1Alpha3Gateways))
}

// AddNetworkingIstioIov1Alpha3ServiceEntries mocks base method
func (m *MockBuilder) AddNetworkingIstioIov1Alpha3ServiceEntries(networkingIstioIov1Alpha3ServiceEntries ...*v1alpha3.ServiceEntry) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range networkingIstioIov1Alpha3ServiceEntries {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddNetworkingIstioIov1Alpha3ServiceEntries", varargs...)
}

// AddNetworkingIstioIov1Alpha3ServiceEntries indicates an expected call of AddNetworkingIstioIov1Alpha3ServiceEntries
func (mr *MockBuilderMockRecorder) AddNetworkingIstioIov1Alpha3ServiceEntries(networkingIstioIov1Alpha3ServiceEntries ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNetworkingIstioIov1Alpha3ServiceEntries", reflect.TypeOf((*MockBuilder)(nil).AddNetworkingIstioIov1Alpha3ServiceEntries), networkingIstioIov1Alpha3ServiceEntries...)
}

// GetNetworkingIstioIov1Alpha3ServiceEntries mocks base method
func (m *MockBuilder) GetNetworkingIstioIov1Alpha3ServiceEntries() v1alpha3sets.ServiceEntrySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkingIstioIov1Alpha3ServiceEntries")
	ret0, _ := ret[0].(v1alpha3sets.ServiceEntrySet)
	return ret0
}

// GetNetworkingIstioIov1Alpha3ServiceEntries indicates an expected call of GetNetworkingIstioIov1Alpha3ServiceEntries
func (mr *MockBuilderMockRecorder) GetNetworkingIstioIov1Alpha3ServiceEntries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkingIstioIov1Alpha3ServiceEntries", reflect.TypeOf((*MockBuilder)(nil).GetNetworkingIstioIov1Alpha3ServiceEntries))
}

// AddNetworkingIstioIov1Alpha3VirtualServices mocks base method
func (m *MockBuilder) AddNetworkingIstioIov1Alpha3VirtualServices(networkingIstioIov1Alpha3VirtualServices ...*v1alpha3.VirtualService) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range networkingIstioIov1Alpha3VirtualServices {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddNetworkingIstioIov1Alpha3VirtualServices", varargs...)
}

// AddNetworkingIstioIov1Alpha3VirtualServices indicates an expected call of AddNetworkingIstioIov1Alpha3VirtualServices
func (mr *MockBuilderMockRecorder) AddNetworkingIstioIov1Alpha3VirtualServices(networkingIstioIov1Alpha3VirtualServices ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNetworkingIstioIov1Alpha3VirtualServices", reflect.TypeOf((*MockBuilder)(nil).AddNetworkingIstioIov1Alpha3VirtualServices), networkingIstioIov1Alpha3VirtualServices...)
}

// GetNetworkingIstioIov1Alpha3VirtualServices mocks base method
func (m *MockBuilder) GetNetworkingIstioIov1Alpha3VirtualServices() v1alpha3sets.VirtualServiceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkingIstioIov1Alpha3VirtualServices")
	ret0, _ := ret[0].(v1alpha3sets.VirtualServiceSet)
	return ret0
}

// GetNetworkingIstioIov1Alpha3VirtualServices indicates an expected call of GetNetworkingIstioIov1Alpha3VirtualServices
func (mr *MockBuilderMockRecorder) GetNetworkingIstioIov1Alpha3VirtualServices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkingIstioIov1Alpha3VirtualServices", reflect.TypeOf((*MockBuilder)(nil).GetNetworkingIstioIov1Alpha3VirtualServices))
}

// AddSecurityIstioIov1Beta1AuthorizationPolicies mocks base method
func (m *MockBuilder) AddSecurityIstioIov1Beta1AuthorizationPolicies(securityIstioIov1Beta1AuthorizationPolicies ...*v1beta1.AuthorizationPolicy) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range securityIstioIov1Beta1AuthorizationPolicies {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddSecurityIstioIov1Beta1AuthorizationPolicies", varargs...)
}

// AddSecurityIstioIov1Beta1AuthorizationPolicies indicates an expected call of AddSecurityIstioIov1Beta1AuthorizationPolicies
func (mr *MockBuilderMockRecorder) AddSecurityIstioIov1Beta1AuthorizationPolicies(securityIstioIov1Beta1AuthorizationPolicies ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSecurityIstioIov1Beta1AuthorizationPolicies", reflect.TypeOf((*MockBuilder)(nil).AddSecurityIstioIov1Beta1AuthorizationPolicies), securityIstioIov1Beta1AuthorizationPolicies...)
}

// GetSecurityIstioIov1Beta1AuthorizationPolicies mocks base method
func (m *MockBuilder) GetSecurityIstioIov1Beta1AuthorizationPolicies() v1beta1sets.AuthorizationPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityIstioIov1Beta1AuthorizationPolicies")
	ret0, _ := ret[0].(v1beta1sets.AuthorizationPolicySet)
	return ret0
}

// GetSecurityIstioIov1Beta1AuthorizationPolicies indicates an expected call of GetSecurityIstioIov1Beta1AuthorizationPolicies
func (mr *MockBuilderMockRecorder) GetSecurityIstioIov1Beta1AuthorizationPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityIstioIov1Beta1AuthorizationPolicies", reflect.TypeOf((*MockBuilder)(nil).GetSecurityIstioIov1Beta1AuthorizationPolicies))
}

// AddV1ConfigMaps mocks base method
func (m *MockBuilder) AddV1ConfigMaps(v1ConfigMaps ...*v1.ConfigMap) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range v1ConfigMaps {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddV1ConfigMaps", varargs...)
}

// AddV1ConfigMaps indicates an expected call of AddV1ConfigMaps
func (mr *MockBuilderMockRecorder) AddV1ConfigMaps(v1ConfigMaps ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddV1ConfigMaps", reflect.TypeOf((*MockBuilder)(nil).AddV1ConfigMaps), v1ConfigMaps...)
}

// GetV1ConfigMaps mocks base method
func (m *MockBuilder) GetV1ConfigMaps() v1sets.ConfigMapSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV1ConfigMaps")
	ret0, _ := ret[0].(v1sets.ConfigMapSet)
	return ret0
}

// GetV1ConfigMaps indicates an expected call of GetV1ConfigMaps
func (mr *MockBuilderMockRecorder) GetV1ConfigMaps() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV1ConfigMaps", reflect.TypeOf((*MockBuilder)(nil).GetV1ConfigMaps))
}

// BuildLabelPartitionedSnapshot mocks base method
func (m *MockBuilder) BuildLabelPartitionedSnapshot(labelKey string) (istio.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildLabelPartitionedSnapshot", labelKey)
	ret0, _ := ret[0].(istio.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildLabelPartitionedSnapshot indicates an expected call of BuildLabelPartitionedSnapshot
func (mr *MockBuilderMockRecorder) BuildLabelPartitionedSnapshot(labelKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildLabelPartitionedSnapshot", reflect.TypeOf((*MockBuilder)(nil).BuildLabelPartitionedSnapshot), labelKey)
}

// BuildSinglePartitionedSnapshot mocks base method
func (m *MockBuilder) BuildSinglePartitionedSnapshot(snapshotLabels map[string]string) (istio.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildSinglePartitionedSnapshot", snapshotLabels)
	ret0, _ := ret[0].(istio.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildSinglePartitionedSnapshot indicates an expected call of BuildSinglePartitionedSnapshot
func (mr *MockBuilderMockRecorder) BuildSinglePartitionedSnapshot(snapshotLabels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildSinglePartitionedSnapshot", reflect.TypeOf((*MockBuilder)(nil).BuildSinglePartitionedSnapshot), snapshotLabels)
}

// AddCluster mocks base method
func (m *MockBuilder) AddCluster(cluster string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddCluster", cluster)
}

// AddCluster indicates an expected call of AddCluster
func (mr *MockBuilderMockRecorder) AddCluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCluster", reflect.TypeOf((*MockBuilder)(nil).AddCluster), cluster)
}

// Clusters mocks base method
func (m *MockBuilder) Clusters() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clusters")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Clusters indicates an expected call of Clusters
func (mr *MockBuilderMockRecorder) Clusters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clusters", reflect.TypeOf((*MockBuilder)(nil).Clusters))
}

// Merge mocks base method
func (m *MockBuilder) Merge(other istio.Builder) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Merge", other)
}

// Merge indicates an expected call of Merge
func (mr *MockBuilderMockRecorder) Merge(other interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MockBuilder)(nil).Merge), other)
}

// Clone mocks base method
func (m *MockBuilder) Clone() istio.Builder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(istio.Builder)
	return ret0
}

// Clone indicates an expected call of Clone
func (mr *MockBuilderMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockBuilder)(nil).Clone))
}

// Delta mocks base method
func (m *MockBuilder) Delta(newSnap istio.Builder) output.SnapshotDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSnap)
	ret0, _ := ret[0].(output.SnapshotDelta)
	return ret0
}

// Delta indicates an expected call of Delta
func (mr *MockBuilderMockRecorder) Delta(newSnap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockBuilder)(nil).Delta), newSnap)
}
