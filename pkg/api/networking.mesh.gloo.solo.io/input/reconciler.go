// Code generated by skv2. DO NOT EDIT.

package input

import (
	"context"
	"time"

	"github.com/solo-io/skv2/contrib/pkg/input"
	sk_core_v1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
	"github.com/solo-io/skv2/pkg/multicluster"
	"github.com/solo-io/skv2/pkg/reconcile"

	networking_istio_io_v1alpha3_controllers "github.com/solo-io/external-apis/pkg/api/istio/networking.istio.io/v1alpha3/controller"
	security_istio_io_v1beta1_controllers "github.com/solo-io/external-apis/pkg/api/istio/security.istio.io/v1beta1/controller"
	v1_controllers "github.com/solo-io/external-apis/pkg/api/k8s/core/v1/controller"
	certificates_mesh_gloo_solo_io_v1alpha2 "github.com/solo-io/gloo-mesh/pkg/api/certificates.mesh.gloo.solo.io/v1alpha2"
	certificates_mesh_gloo_solo_io_v1alpha2_controllers "github.com/solo-io/gloo-mesh/pkg/api/certificates.mesh.gloo.solo.io/v1alpha2/controller"
	discovery_mesh_gloo_solo_io_v1alpha2 "github.com/solo-io/gloo-mesh/pkg/api/discovery.mesh.gloo.solo.io/v1alpha2"
	discovery_mesh_gloo_solo_io_v1alpha2_controllers "github.com/solo-io/gloo-mesh/pkg/api/discovery.mesh.gloo.solo.io/v1alpha2/controller"
	networking_enterprise_mesh_gloo_solo_io_v1alpha1 "github.com/solo-io/gloo-mesh/pkg/api/networking.enterprise.mesh.gloo.solo.io/v1alpha1"
	networking_enterprise_mesh_gloo_solo_io_v1alpha1_controllers "github.com/solo-io/gloo-mesh/pkg/api/networking.enterprise.mesh.gloo.solo.io/v1alpha1/controller"
	networking_mesh_gloo_solo_io_v1alpha2 "github.com/solo-io/gloo-mesh/pkg/api/networking.mesh.gloo.solo.io/v1alpha2"
	networking_mesh_gloo_solo_io_v1alpha2_controllers "github.com/solo-io/gloo-mesh/pkg/api/networking.mesh.gloo.solo.io/v1alpha2/controller"
	observability_enterprise_mesh_gloo_solo_io_v1alpha1 "github.com/solo-io/gloo-mesh/pkg/api/observability.enterprise.mesh.gloo.solo.io/v1alpha1"
	observability_enterprise_mesh_gloo_solo_io_v1alpha1_controllers "github.com/solo-io/gloo-mesh/pkg/api/observability.enterprise.mesh.gloo.solo.io/v1alpha1/controller"
	settings_mesh_gloo_solo_io_v1alpha2 "github.com/solo-io/gloo-mesh/pkg/api/settings.mesh.gloo.solo.io/v1alpha2"
	settings_mesh_gloo_solo_io_v1alpha2_controllers "github.com/solo-io/gloo-mesh/pkg/api/settings.mesh.gloo.solo.io/v1alpha2/controller"
	xds_agent_enterprise_mesh_gloo_solo_io_v1alpha1 "github.com/solo-io/gloo-mesh/pkg/api/xds.agent.enterprise.mesh.gloo.solo.io/v1alpha1"
	xds_agent_enterprise_mesh_gloo_solo_io_v1alpha1_controllers "github.com/solo-io/gloo-mesh/pkg/api/xds.agent.enterprise.mesh.gloo.solo.io/v1alpha1/controller"
	multicluster_solo_io_v1alpha1 "github.com/solo-io/skv2/pkg/api/multicluster.solo.io/v1alpha1"
	multicluster_solo_io_v1alpha1_controllers "github.com/solo-io/skv2/pkg/api/multicluster.solo.io/v1alpha1/controller"
	networking_istio_io_v1alpha3 "istio.io/client-go/pkg/apis/networking/v1alpha3"
	security_istio_io_v1beta1 "istio.io/client-go/pkg/apis/security/v1beta1"
	v1 "k8s.io/api/core/v1"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// The Input Reconciler calls a simple func(id) error whenever a
// storage event is received for any of:
// * CertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificates
// * CertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectives
// * XdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigs
// * NetworkingIstioIo_V1Alpha3_DestinationRules
// * NetworkingIstioIo_V1Alpha3_EnvoyFilters
// * NetworkingIstioIo_V1Alpha3_Gateways
// * NetworkingIstioIo_V1Alpha3_ServiceEntries
// * NetworkingIstioIo_V1Alpha3_VirtualServices
// * SecurityIstioIo_V1Beta1_AuthorizationPolicies
// * V1_ConfigMaps
// from a remote cluster.
// * SettingsMeshGlooSoloIo_V1Alpha2_Settings
// * DiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargets
// * DiscoveryMeshGlooSoloIo_V1Alpha2_Workloads
// * DiscoveryMeshGlooSoloIo_V1Alpha2_Meshes
// * NetworkingMeshGlooSoloIo_V1Alpha2_TrafficPolicies
// * NetworkingMeshGlooSoloIo_V1Alpha2_AccessPolicies
// * NetworkingMeshGlooSoloIo_V1Alpha2_VirtualMeshes
// * NetworkingMeshGlooSoloIo_V1Alpha2_FailoverServices
// * NetworkingEnterpriseMeshGlooSoloIo_V1Alpha1_WasmDeployments
// * ObservabilityEnterpriseMeshGlooSoloIo_V1Alpha1_AccessLogRecords
// * V1_Secrets
// * MulticlusterSoloIo_V1Alpha1_KubernetesClusters
// from the local cluster.

type ReconcileOptions struct {
	Remote RemoteReconcileOptions
	Local  LocalReconcileOptions

	// the ReconcileInterval, if greater than 0, will limit the number of reconciles
	// to one per interval.
	ReconcileInterval time.Duration
}

// register the given multi cluster reconcile func with the cluster watcher
// register the given single cluster reconcile func with the local manager
func RegisterInputReconciler(
	ctx context.Context,
	clusters multicluster.ClusterWatcher,
	multiClusterReconcileFunc input.MultiClusterReconcileFunc,
	mgr manager.Manager,
	singleClusterReconcileFunc input.SingleClusterReconcileFunc,
	options ReconcileOptions,
) (input.InputReconciler, error) {

	base := input.NewInputReconciler(
		ctx,
		multiClusterReconcileFunc,
		singleClusterReconcileFunc,
		options.ReconcileInterval,
	)

	// initialize reconcile loops

	// initialize CertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificates reconcile loop for remote clusters
	certificates_mesh_gloo_solo_io_v1alpha2_controllers.NewMulticlusterIssuedCertificateReconcileLoop("IssuedCertificate", clusters, options.Remote.CertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificates).AddMulticlusterIssuedCertificateReconciler(ctx, &remoteCertificatesMeshGlooSoloIoInputReconciler{base: base}, options.Remote.Predicates...)
	// initialize CertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectives reconcile loop for remote clusters
	certificates_mesh_gloo_solo_io_v1alpha2_controllers.NewMulticlusterPodBounceDirectiveReconcileLoop("PodBounceDirective", clusters, options.Remote.CertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectives).AddMulticlusterPodBounceDirectiveReconciler(ctx, &remoteCertificatesMeshGlooSoloIoInputReconciler{base: base}, options.Remote.Predicates...)

	// initialize XdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigs reconcile loop for remote clusters
	xds_agent_enterprise_mesh_gloo_solo_io_v1alpha1_controllers.NewMulticlusterXdsConfigReconcileLoop("XdsConfig", clusters, options.Remote.XdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigs).AddMulticlusterXdsConfigReconciler(ctx, &remoteXdsAgentEnterpriseMeshGlooSoloIoInputReconciler{base: base}, options.Remote.Predicates...)

	// initialize NetworkingIstioIo_V1Alpha3_DestinationRules reconcile loop for remote clusters
	networking_istio_io_v1alpha3_controllers.NewMulticlusterDestinationRuleReconcileLoop("DestinationRule", clusters, options.Remote.NetworkingIstioIo_V1Alpha3_DestinationRules).AddMulticlusterDestinationRuleReconciler(ctx, &remoteNetworkingIstioIoInputReconciler{base: base}, options.Remote.Predicates...)
	// initialize NetworkingIstioIo_V1Alpha3_EnvoyFilters reconcile loop for remote clusters
	networking_istio_io_v1alpha3_controllers.NewMulticlusterEnvoyFilterReconcileLoop("EnvoyFilter", clusters, options.Remote.NetworkingIstioIo_V1Alpha3_EnvoyFilters).AddMulticlusterEnvoyFilterReconciler(ctx, &remoteNetworkingIstioIoInputReconciler{base: base}, options.Remote.Predicates...)
	// initialize NetworkingIstioIo_V1Alpha3_Gateways reconcile loop for remote clusters
	networking_istio_io_v1alpha3_controllers.NewMulticlusterGatewayReconcileLoop("Gateway", clusters, options.Remote.NetworkingIstioIo_V1Alpha3_Gateways).AddMulticlusterGatewayReconciler(ctx, &remoteNetworkingIstioIoInputReconciler{base: base}, options.Remote.Predicates...)
	// initialize NetworkingIstioIo_V1Alpha3_ServiceEntries reconcile loop for remote clusters
	networking_istio_io_v1alpha3_controllers.NewMulticlusterServiceEntryReconcileLoop("ServiceEntry", clusters, options.Remote.NetworkingIstioIo_V1Alpha3_ServiceEntries).AddMulticlusterServiceEntryReconciler(ctx, &remoteNetworkingIstioIoInputReconciler{base: base}, options.Remote.Predicates...)
	// initialize NetworkingIstioIo_V1Alpha3_VirtualServices reconcile loop for remote clusters
	networking_istio_io_v1alpha3_controllers.NewMulticlusterVirtualServiceReconcileLoop("VirtualService", clusters, options.Remote.NetworkingIstioIo_V1Alpha3_VirtualServices).AddMulticlusterVirtualServiceReconciler(ctx, &remoteNetworkingIstioIoInputReconciler{base: base}, options.Remote.Predicates...)

	// initialize SecurityIstioIo_V1Beta1_AuthorizationPolicies reconcile loop for remote clusters
	security_istio_io_v1beta1_controllers.NewMulticlusterAuthorizationPolicyReconcileLoop("AuthorizationPolicy", clusters, options.Remote.SecurityIstioIo_V1Beta1_AuthorizationPolicies).AddMulticlusterAuthorizationPolicyReconciler(ctx, &remoteSecurityIstioIoInputReconciler{base: base}, options.Remote.Predicates...)

	// initialize V1_ConfigMaps reconcile loop for remote clusters
	v1_controllers.NewMulticlusterConfigMapReconcileLoop("ConfigMap", clusters, options.Remote.V1_ConfigMaps).AddMulticlusterConfigMapReconciler(ctx, &remoteInputReconciler{base: base}, options.Remote.Predicates...)

	// initialize SettingsMeshGlooSoloIo_V1Alpha2_Settings reconcile loop for local cluster
	if err := settings_mesh_gloo_solo_io_v1alpha2_controllers.NewSettingsReconcileLoop("Settings", mgr, options.Local.SettingsMeshGlooSoloIo_V1Alpha2_Settings).RunSettingsReconciler(ctx, &localSettingsMeshGlooSoloIoInputReconciler{base: base}, options.Local.Predicates...); err != nil {
		return nil, err
	}

	// initialize DiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargets reconcile loop for local cluster
	if err := discovery_mesh_gloo_solo_io_v1alpha2_controllers.NewTrafficTargetReconcileLoop("TrafficTarget", mgr, options.Local.DiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargets).RunTrafficTargetReconciler(ctx, &localDiscoveryMeshGlooSoloIoInputReconciler{base: base}, options.Local.Predicates...); err != nil {
		return nil, err
	}
	// initialize DiscoveryMeshGlooSoloIo_V1Alpha2_Workloads reconcile loop for local cluster
	if err := discovery_mesh_gloo_solo_io_v1alpha2_controllers.NewWorkloadReconcileLoop("Workload", mgr, options.Local.DiscoveryMeshGlooSoloIo_V1Alpha2_Workloads).RunWorkloadReconciler(ctx, &localDiscoveryMeshGlooSoloIoInputReconciler{base: base}, options.Local.Predicates...); err != nil {
		return nil, err
	}
	// initialize DiscoveryMeshGlooSoloIo_V1Alpha2_Meshes reconcile loop for local cluster
	if err := discovery_mesh_gloo_solo_io_v1alpha2_controllers.NewMeshReconcileLoop("Mesh", mgr, options.Local.DiscoveryMeshGlooSoloIo_V1Alpha2_Meshes).RunMeshReconciler(ctx, &localDiscoveryMeshGlooSoloIoInputReconciler{base: base}, options.Local.Predicates...); err != nil {
		return nil, err
	}

	// initialize NetworkingMeshGlooSoloIo_V1Alpha2_TrafficPolicies reconcile loop for local cluster
	if err := networking_mesh_gloo_solo_io_v1alpha2_controllers.NewTrafficPolicyReconcileLoop("TrafficPolicy", mgr, options.Local.NetworkingMeshGlooSoloIo_V1Alpha2_TrafficPolicies).RunTrafficPolicyReconciler(ctx, &localNetworkingMeshGlooSoloIoInputReconciler{base: base}, options.Local.Predicates...); err != nil {
		return nil, err
	}
	// initialize NetworkingMeshGlooSoloIo_V1Alpha2_AccessPolicies reconcile loop for local cluster
	if err := networking_mesh_gloo_solo_io_v1alpha2_controllers.NewAccessPolicyReconcileLoop("AccessPolicy", mgr, options.Local.NetworkingMeshGlooSoloIo_V1Alpha2_AccessPolicies).RunAccessPolicyReconciler(ctx, &localNetworkingMeshGlooSoloIoInputReconciler{base: base}, options.Local.Predicates...); err != nil {
		return nil, err
	}
	// initialize NetworkingMeshGlooSoloIo_V1Alpha2_VirtualMeshes reconcile loop for local cluster
	if err := networking_mesh_gloo_solo_io_v1alpha2_controllers.NewVirtualMeshReconcileLoop("VirtualMesh", mgr, options.Local.NetworkingMeshGlooSoloIo_V1Alpha2_VirtualMeshes).RunVirtualMeshReconciler(ctx, &localNetworkingMeshGlooSoloIoInputReconciler{base: base}, options.Local.Predicates...); err != nil {
		return nil, err
	}
	// initialize NetworkingMeshGlooSoloIo_V1Alpha2_FailoverServices reconcile loop for local cluster
	if err := networking_mesh_gloo_solo_io_v1alpha2_controllers.NewFailoverServiceReconcileLoop("FailoverService", mgr, options.Local.NetworkingMeshGlooSoloIo_V1Alpha2_FailoverServices).RunFailoverServiceReconciler(ctx, &localNetworkingMeshGlooSoloIoInputReconciler{base: base}, options.Local.Predicates...); err != nil {
		return nil, err
	}

	// initialize NetworkingEnterpriseMeshGlooSoloIo_V1Alpha1_WasmDeployments reconcile loop for local cluster
	if err := networking_enterprise_mesh_gloo_solo_io_v1alpha1_controllers.NewWasmDeploymentReconcileLoop("WasmDeployment", mgr, options.Local.NetworkingEnterpriseMeshGlooSoloIo_V1Alpha1_WasmDeployments).RunWasmDeploymentReconciler(ctx, &localNetworkingEnterpriseMeshGlooSoloIoInputReconciler{base: base}, options.Local.Predicates...); err != nil {
		return nil, err
	}

	// initialize ObservabilityEnterpriseMeshGlooSoloIo_V1Alpha1_AccessLogRecords reconcile loop for local cluster
	if err := observability_enterprise_mesh_gloo_solo_io_v1alpha1_controllers.NewAccessLogRecordReconcileLoop("AccessLogRecord", mgr, options.Local.ObservabilityEnterpriseMeshGlooSoloIo_V1Alpha1_AccessLogRecords).RunAccessLogRecordReconciler(ctx, &localObservabilityEnterpriseMeshGlooSoloIoInputReconciler{base: base}, options.Local.Predicates...); err != nil {
		return nil, err
	}

	// initialize V1_Secrets reconcile loop for local cluster
	if err := v1_controllers.NewSecretReconcileLoop("Secret", mgr, options.Local.V1_Secrets).RunSecretReconciler(ctx, &localInputReconciler{base: base}, options.Local.Predicates...); err != nil {
		return nil, err
	}

	// initialize MulticlusterSoloIo_V1Alpha1_KubernetesClusters reconcile loop for local cluster
	if err := multicluster_solo_io_v1alpha1_controllers.NewKubernetesClusterReconcileLoop("KubernetesCluster", mgr, options.Local.MulticlusterSoloIo_V1Alpha1_KubernetesClusters).RunKubernetesClusterReconciler(ctx, &localMulticlusterSoloIoInputReconciler{base: base}, options.Local.Predicates...); err != nil {
		return nil, err
	}

	return base, nil
}

// Options for reconciling a snapshot in remote clusters
type RemoteReconcileOptions struct {

	// Options for reconciling CertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificates
	CertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificates reconcile.Options
	// Options for reconciling CertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectives
	CertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectives reconcile.Options

	// Options for reconciling XdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigs
	XdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigs reconcile.Options

	// Options for reconciling NetworkingIstioIo_V1Alpha3_DestinationRules
	NetworkingIstioIo_V1Alpha3_DestinationRules reconcile.Options
	// Options for reconciling NetworkingIstioIo_V1Alpha3_EnvoyFilters
	NetworkingIstioIo_V1Alpha3_EnvoyFilters reconcile.Options
	// Options for reconciling NetworkingIstioIo_V1Alpha3_Gateways
	NetworkingIstioIo_V1Alpha3_Gateways reconcile.Options
	// Options for reconciling NetworkingIstioIo_V1Alpha3_ServiceEntries
	NetworkingIstioIo_V1Alpha3_ServiceEntries reconcile.Options
	// Options for reconciling NetworkingIstioIo_V1Alpha3_VirtualServices
	NetworkingIstioIo_V1Alpha3_VirtualServices reconcile.Options

	// Options for reconciling SecurityIstioIo_V1Beta1_AuthorizationPolicies
	SecurityIstioIo_V1Beta1_AuthorizationPolicies reconcile.Options

	// Options for reconciling V1_ConfigMaps
	V1_ConfigMaps reconcile.Options

	// optional predicates for filtering remote events
	Predicates []predicate.Predicate
}

type remoteCertificatesMeshGlooSoloIoInputReconciler struct {
	base input.InputReconciler
}

func (r *remoteCertificatesMeshGlooSoloIoInputReconciler) ReconcileIssuedCertificate(clusterName string, obj *certificates_mesh_gloo_solo_io_v1alpha2.IssuedCertificate) (reconcile.Result, error) {
	obj.ClusterName = clusterName
	return r.base.ReconcileRemoteGeneric(obj)
}

func (r *remoteCertificatesMeshGlooSoloIoInputReconciler) ReconcileIssuedCertificateDeletion(clusterName string, obj reconcile.Request) error {
	ref := &sk_core_v1.ClusterObjectRef{
		Name:        obj.Name,
		Namespace:   obj.Namespace,
		ClusterName: clusterName,
	}
	_, err := r.base.ReconcileRemoteGeneric(ref)
	return err
}

func (r *remoteCertificatesMeshGlooSoloIoInputReconciler) ReconcilePodBounceDirective(clusterName string, obj *certificates_mesh_gloo_solo_io_v1alpha2.PodBounceDirective) (reconcile.Result, error) {
	obj.ClusterName = clusterName
	return r.base.ReconcileRemoteGeneric(obj)
}

func (r *remoteCertificatesMeshGlooSoloIoInputReconciler) ReconcilePodBounceDirectiveDeletion(clusterName string, obj reconcile.Request) error {
	ref := &sk_core_v1.ClusterObjectRef{
		Name:        obj.Name,
		Namespace:   obj.Namespace,
		ClusterName: clusterName,
	}
	_, err := r.base.ReconcileRemoteGeneric(ref)
	return err
}

type remoteXdsAgentEnterpriseMeshGlooSoloIoInputReconciler struct {
	base input.InputReconciler
}

func (r *remoteXdsAgentEnterpriseMeshGlooSoloIoInputReconciler) ReconcileXdsConfig(clusterName string, obj *xds_agent_enterprise_mesh_gloo_solo_io_v1alpha1.XdsConfig) (reconcile.Result, error) {
	obj.ClusterName = clusterName
	return r.base.ReconcileRemoteGeneric(obj)
}

func (r *remoteXdsAgentEnterpriseMeshGlooSoloIoInputReconciler) ReconcileXdsConfigDeletion(clusterName string, obj reconcile.Request) error {
	ref := &sk_core_v1.ClusterObjectRef{
		Name:        obj.Name,
		Namespace:   obj.Namespace,
		ClusterName: clusterName,
	}
	_, err := r.base.ReconcileRemoteGeneric(ref)
	return err
}

type remoteNetworkingIstioIoInputReconciler struct {
	base input.InputReconciler
}

func (r *remoteNetworkingIstioIoInputReconciler) ReconcileDestinationRule(clusterName string, obj *networking_istio_io_v1alpha3.DestinationRule) (reconcile.Result, error) {
	obj.ClusterName = clusterName
	return r.base.ReconcileRemoteGeneric(obj)
}

func (r *remoteNetworkingIstioIoInputReconciler) ReconcileDestinationRuleDeletion(clusterName string, obj reconcile.Request) error {
	ref := &sk_core_v1.ClusterObjectRef{
		Name:        obj.Name,
		Namespace:   obj.Namespace,
		ClusterName: clusterName,
	}
	_, err := r.base.ReconcileRemoteGeneric(ref)
	return err
}

func (r *remoteNetworkingIstioIoInputReconciler) ReconcileEnvoyFilter(clusterName string, obj *networking_istio_io_v1alpha3.EnvoyFilter) (reconcile.Result, error) {
	obj.ClusterName = clusterName
	return r.base.ReconcileRemoteGeneric(obj)
}

func (r *remoteNetworkingIstioIoInputReconciler) ReconcileEnvoyFilterDeletion(clusterName string, obj reconcile.Request) error {
	ref := &sk_core_v1.ClusterObjectRef{
		Name:        obj.Name,
		Namespace:   obj.Namespace,
		ClusterName: clusterName,
	}
	_, err := r.base.ReconcileRemoteGeneric(ref)
	return err
}

func (r *remoteNetworkingIstioIoInputReconciler) ReconcileGateway(clusterName string, obj *networking_istio_io_v1alpha3.Gateway) (reconcile.Result, error) {
	obj.ClusterName = clusterName
	return r.base.ReconcileRemoteGeneric(obj)
}

func (r *remoteNetworkingIstioIoInputReconciler) ReconcileGatewayDeletion(clusterName string, obj reconcile.Request) error {
	ref := &sk_core_v1.ClusterObjectRef{
		Name:        obj.Name,
		Namespace:   obj.Namespace,
		ClusterName: clusterName,
	}
	_, err := r.base.ReconcileRemoteGeneric(ref)
	return err
}

func (r *remoteNetworkingIstioIoInputReconciler) ReconcileServiceEntry(clusterName string, obj *networking_istio_io_v1alpha3.ServiceEntry) (reconcile.Result, error) {
	obj.ClusterName = clusterName
	return r.base.ReconcileRemoteGeneric(obj)
}

func (r *remoteNetworkingIstioIoInputReconciler) ReconcileServiceEntryDeletion(clusterName string, obj reconcile.Request) error {
	ref := &sk_core_v1.ClusterObjectRef{
		Name:        obj.Name,
		Namespace:   obj.Namespace,
		ClusterName: clusterName,
	}
	_, err := r.base.ReconcileRemoteGeneric(ref)
	return err
}

func (r *remoteNetworkingIstioIoInputReconciler) ReconcileVirtualService(clusterName string, obj *networking_istio_io_v1alpha3.VirtualService) (reconcile.Result, error) {
	obj.ClusterName = clusterName
	return r.base.ReconcileRemoteGeneric(obj)
}

func (r *remoteNetworkingIstioIoInputReconciler) ReconcileVirtualServiceDeletion(clusterName string, obj reconcile.Request) error {
	ref := &sk_core_v1.ClusterObjectRef{
		Name:        obj.Name,
		Namespace:   obj.Namespace,
		ClusterName: clusterName,
	}
	_, err := r.base.ReconcileRemoteGeneric(ref)
	return err
}

type remoteSecurityIstioIoInputReconciler struct {
	base input.InputReconciler
}

func (r *remoteSecurityIstioIoInputReconciler) ReconcileAuthorizationPolicy(clusterName string, obj *security_istio_io_v1beta1.AuthorizationPolicy) (reconcile.Result, error) {
	obj.ClusterName = clusterName
	return r.base.ReconcileRemoteGeneric(obj)
}

func (r *remoteSecurityIstioIoInputReconciler) ReconcileAuthorizationPolicyDeletion(clusterName string, obj reconcile.Request) error {
	ref := &sk_core_v1.ClusterObjectRef{
		Name:        obj.Name,
		Namespace:   obj.Namespace,
		ClusterName: clusterName,
	}
	_, err := r.base.ReconcileRemoteGeneric(ref)
	return err
}

type remoteInputReconciler struct {
	base input.InputReconciler
}

func (r *remoteInputReconciler) ReconcileConfigMap(clusterName string, obj *v1.ConfigMap) (reconcile.Result, error) {
	obj.ClusterName = clusterName
	return r.base.ReconcileRemoteGeneric(obj)
}

func (r *remoteInputReconciler) ReconcileConfigMapDeletion(clusterName string, obj reconcile.Request) error {
	ref := &sk_core_v1.ClusterObjectRef{
		Name:        obj.Name,
		Namespace:   obj.Namespace,
		ClusterName: clusterName,
	}
	_, err := r.base.ReconcileRemoteGeneric(ref)
	return err
}

// Options for reconciling a snapshot in remote clusters
type LocalReconcileOptions struct {

	// Options for reconciling SettingsMeshGlooSoloIo_V1Alpha2_Settings
	SettingsMeshGlooSoloIo_V1Alpha2_Settings reconcile.Options

	// Options for reconciling DiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargets
	DiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargets reconcile.Options
	// Options for reconciling DiscoveryMeshGlooSoloIo_V1Alpha2_Workloads
	DiscoveryMeshGlooSoloIo_V1Alpha2_Workloads reconcile.Options
	// Options for reconciling DiscoveryMeshGlooSoloIo_V1Alpha2_Meshes
	DiscoveryMeshGlooSoloIo_V1Alpha2_Meshes reconcile.Options

	// Options for reconciling NetworkingMeshGlooSoloIo_V1Alpha2_TrafficPolicies
	NetworkingMeshGlooSoloIo_V1Alpha2_TrafficPolicies reconcile.Options
	// Options for reconciling NetworkingMeshGlooSoloIo_V1Alpha2_AccessPolicies
	NetworkingMeshGlooSoloIo_V1Alpha2_AccessPolicies reconcile.Options
	// Options for reconciling NetworkingMeshGlooSoloIo_V1Alpha2_VirtualMeshes
	NetworkingMeshGlooSoloIo_V1Alpha2_VirtualMeshes reconcile.Options
	// Options for reconciling NetworkingMeshGlooSoloIo_V1Alpha2_FailoverServices
	NetworkingMeshGlooSoloIo_V1Alpha2_FailoverServices reconcile.Options

	// Options for reconciling NetworkingEnterpriseMeshGlooSoloIo_V1Alpha1_WasmDeployments
	NetworkingEnterpriseMeshGlooSoloIo_V1Alpha1_WasmDeployments reconcile.Options

	// Options for reconciling ObservabilityEnterpriseMeshGlooSoloIo_V1Alpha1_AccessLogRecords
	ObservabilityEnterpriseMeshGlooSoloIo_V1Alpha1_AccessLogRecords reconcile.Options

	// Options for reconciling V1_Secrets
	V1_Secrets reconcile.Options

	// Options for reconciling MulticlusterSoloIo_V1Alpha1_KubernetesClusters
	MulticlusterSoloIo_V1Alpha1_KubernetesClusters reconcile.Options

	// optional predicates for filtering local events
	Predicates []predicate.Predicate
}

type localSettingsMeshGlooSoloIoInputReconciler struct {
	base input.InputReconciler
}

func (r *localSettingsMeshGlooSoloIoInputReconciler) ReconcileSettings(obj *settings_mesh_gloo_solo_io_v1alpha2.Settings) (reconcile.Result, error) {
	return r.base.ReconcileLocalGeneric(obj)
}

func (r *localSettingsMeshGlooSoloIoInputReconciler) ReconcileSettingsDeletion(obj reconcile.Request) error {
	ref := &sk_core_v1.ObjectRef{
		Name:      obj.Name,
		Namespace: obj.Namespace,
	}
	_, err := r.base.ReconcileLocalGeneric(ref)
	return err
}

type localDiscoveryMeshGlooSoloIoInputReconciler struct {
	base input.InputReconciler
}

func (r *localDiscoveryMeshGlooSoloIoInputReconciler) ReconcileTrafficTarget(obj *discovery_mesh_gloo_solo_io_v1alpha2.TrafficTarget) (reconcile.Result, error) {
	return r.base.ReconcileLocalGeneric(obj)
}

func (r *localDiscoveryMeshGlooSoloIoInputReconciler) ReconcileTrafficTargetDeletion(obj reconcile.Request) error {
	ref := &sk_core_v1.ObjectRef{
		Name:      obj.Name,
		Namespace: obj.Namespace,
	}
	_, err := r.base.ReconcileLocalGeneric(ref)
	return err
}

func (r *localDiscoveryMeshGlooSoloIoInputReconciler) ReconcileWorkload(obj *discovery_mesh_gloo_solo_io_v1alpha2.Workload) (reconcile.Result, error) {
	return r.base.ReconcileLocalGeneric(obj)
}

func (r *localDiscoveryMeshGlooSoloIoInputReconciler) ReconcileWorkloadDeletion(obj reconcile.Request) error {
	ref := &sk_core_v1.ObjectRef{
		Name:      obj.Name,
		Namespace: obj.Namespace,
	}
	_, err := r.base.ReconcileLocalGeneric(ref)
	return err
}

func (r *localDiscoveryMeshGlooSoloIoInputReconciler) ReconcileMesh(obj *discovery_mesh_gloo_solo_io_v1alpha2.Mesh) (reconcile.Result, error) {
	return r.base.ReconcileLocalGeneric(obj)
}

func (r *localDiscoveryMeshGlooSoloIoInputReconciler) ReconcileMeshDeletion(obj reconcile.Request) error {
	ref := &sk_core_v1.ObjectRef{
		Name:      obj.Name,
		Namespace: obj.Namespace,
	}
	_, err := r.base.ReconcileLocalGeneric(ref)
	return err
}

type localNetworkingMeshGlooSoloIoInputReconciler struct {
	base input.InputReconciler
}

func (r *localNetworkingMeshGlooSoloIoInputReconciler) ReconcileTrafficPolicy(obj *networking_mesh_gloo_solo_io_v1alpha2.TrafficPolicy) (reconcile.Result, error) {
	return r.base.ReconcileLocalGeneric(obj)
}

func (r *localNetworkingMeshGlooSoloIoInputReconciler) ReconcileTrafficPolicyDeletion(obj reconcile.Request) error {
	ref := &sk_core_v1.ObjectRef{
		Name:      obj.Name,
		Namespace: obj.Namespace,
	}
	_, err := r.base.ReconcileLocalGeneric(ref)
	return err
}

func (r *localNetworkingMeshGlooSoloIoInputReconciler) ReconcileAccessPolicy(obj *networking_mesh_gloo_solo_io_v1alpha2.AccessPolicy) (reconcile.Result, error) {
	return r.base.ReconcileLocalGeneric(obj)
}

func (r *localNetworkingMeshGlooSoloIoInputReconciler) ReconcileAccessPolicyDeletion(obj reconcile.Request) error {
	ref := &sk_core_v1.ObjectRef{
		Name:      obj.Name,
		Namespace: obj.Namespace,
	}
	_, err := r.base.ReconcileLocalGeneric(ref)
	return err
}

func (r *localNetworkingMeshGlooSoloIoInputReconciler) ReconcileVirtualMesh(obj *networking_mesh_gloo_solo_io_v1alpha2.VirtualMesh) (reconcile.Result, error) {
	return r.base.ReconcileLocalGeneric(obj)
}

func (r *localNetworkingMeshGlooSoloIoInputReconciler) ReconcileVirtualMeshDeletion(obj reconcile.Request) error {
	ref := &sk_core_v1.ObjectRef{
		Name:      obj.Name,
		Namespace: obj.Namespace,
	}
	_, err := r.base.ReconcileLocalGeneric(ref)
	return err
}

func (r *localNetworkingMeshGlooSoloIoInputReconciler) ReconcileFailoverService(obj *networking_mesh_gloo_solo_io_v1alpha2.FailoverService) (reconcile.Result, error) {
	return r.base.ReconcileLocalGeneric(obj)
}

func (r *localNetworkingMeshGlooSoloIoInputReconciler) ReconcileFailoverServiceDeletion(obj reconcile.Request) error {
	ref := &sk_core_v1.ObjectRef{
		Name:      obj.Name,
		Namespace: obj.Namespace,
	}
	_, err := r.base.ReconcileLocalGeneric(ref)
	return err
}

type localNetworkingEnterpriseMeshGlooSoloIoInputReconciler struct {
	base input.InputReconciler
}

func (r *localNetworkingEnterpriseMeshGlooSoloIoInputReconciler) ReconcileWasmDeployment(obj *networking_enterprise_mesh_gloo_solo_io_v1alpha1.WasmDeployment) (reconcile.Result, error) {
	return r.base.ReconcileLocalGeneric(obj)
}

func (r *localNetworkingEnterpriseMeshGlooSoloIoInputReconciler) ReconcileWasmDeploymentDeletion(obj reconcile.Request) error {
	ref := &sk_core_v1.ObjectRef{
		Name:      obj.Name,
		Namespace: obj.Namespace,
	}
	_, err := r.base.ReconcileLocalGeneric(ref)
	return err
}

type localObservabilityEnterpriseMeshGlooSoloIoInputReconciler struct {
	base input.InputReconciler
}

func (r *localObservabilityEnterpriseMeshGlooSoloIoInputReconciler) ReconcileAccessLogRecord(obj *observability_enterprise_mesh_gloo_solo_io_v1alpha1.AccessLogRecord) (reconcile.Result, error) {
	return r.base.ReconcileLocalGeneric(obj)
}

func (r *localObservabilityEnterpriseMeshGlooSoloIoInputReconciler) ReconcileAccessLogRecordDeletion(obj reconcile.Request) error {
	ref := &sk_core_v1.ObjectRef{
		Name:      obj.Name,
		Namespace: obj.Namespace,
	}
	_, err := r.base.ReconcileLocalGeneric(ref)
	return err
}

type localInputReconciler struct {
	base input.InputReconciler
}

func (r *localInputReconciler) ReconcileSecret(obj *v1.Secret) (reconcile.Result, error) {
	return r.base.ReconcileLocalGeneric(obj)
}

func (r *localInputReconciler) ReconcileSecretDeletion(obj reconcile.Request) error {
	ref := &sk_core_v1.ObjectRef{
		Name:      obj.Name,
		Namespace: obj.Namespace,
	}
	_, err := r.base.ReconcileLocalGeneric(ref)
	return err
}

type localMulticlusterSoloIoInputReconciler struct {
	base input.InputReconciler
}

func (r *localMulticlusterSoloIoInputReconciler) ReconcileKubernetesCluster(obj *multicluster_solo_io_v1alpha1.KubernetesCluster) (reconcile.Result, error) {
	return r.base.ReconcileLocalGeneric(obj)
}

func (r *localMulticlusterSoloIoInputReconciler) ReconcileKubernetesClusterDeletion(obj reconcile.Request) error {
	ref := &sk_core_v1.ObjectRef{
		Name:      obj.Name,
		Namespace: obj.Namespace,
	}
	_, err := r.base.ReconcileLocalGeneric(ref)
	return err
}
