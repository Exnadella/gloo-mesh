// Code generated by MockGen. DO NOT EDIT.
// Source: ./local_snapshot.go

// Package mock_input is a generated GoMock package.
package mock_input

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1sets "github.com/solo-io/external-apis/pkg/api/k8s/core/v1/sets"
	v1alpha2sets "github.com/solo-io/gloo-mesh/pkg/api/discovery.mesh.gloo.solo.io/v1alpha2/sets"
	v1alpha1sets "github.com/solo-io/gloo-mesh/pkg/api/networking.enterprise.mesh.gloo.solo.io/v1alpha1/sets"
	input "github.com/solo-io/gloo-mesh/pkg/api/networking.mesh.gloo.solo.io/input"
	v1alpha2sets0 "github.com/solo-io/gloo-mesh/pkg/api/networking.mesh.gloo.solo.io/v1alpha2/sets"
	v1alpha1sets0 "github.com/solo-io/gloo-mesh/pkg/api/observability.enterprise.mesh.gloo.solo.io/v1alpha1/sets"
	v1alpha2sets1 "github.com/solo-io/gloo-mesh/pkg/api/settings.mesh.gloo.solo.io/v1alpha2/sets"
	v1alpha1sets1 "github.com/solo-io/skv2/pkg/api/multicluster.solo.io/v1alpha1/sets"
	multicluster "github.com/solo-io/skv2/pkg/multicluster"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockLocalSnapshot is a mock of LocalSnapshot interface
type MockLocalSnapshot struct {
	ctrl     *gomock.Controller
	recorder *MockLocalSnapshotMockRecorder
}

// MockLocalSnapshotMockRecorder is the mock recorder for MockLocalSnapshot
type MockLocalSnapshotMockRecorder struct {
	mock *MockLocalSnapshot
}

// NewMockLocalSnapshot creates a new mock instance
func NewMockLocalSnapshot(ctrl *gomock.Controller) *MockLocalSnapshot {
	mock := &MockLocalSnapshot{ctrl: ctrl}
	mock.recorder = &MockLocalSnapshotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLocalSnapshot) EXPECT() *MockLocalSnapshotMockRecorder {
	return m.recorder
}

// SettingsMeshGlooSoloIo_V1Alpha2_Settings mocks base method
func (m *MockLocalSnapshot) SettingsMeshGlooSoloIo_V1Alpha2_Settings() v1alpha2sets1.SettingsSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SettingsMeshGlooSoloIo_V1Alpha2_Settings")
	ret0, _ := ret[0].(v1alpha2sets1.SettingsSet)
	return ret0
}

// SettingsMeshGlooSoloIo_V1Alpha2_Settings indicates an expected call of SettingsMeshGlooSoloIo_V1Alpha2_Settings
func (mr *MockLocalSnapshotMockRecorder) SettingsMeshGlooSoloIo_V1Alpha2_Settings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SettingsMeshGlooSoloIo_V1Alpha2_Settings", reflect.TypeOf((*MockLocalSnapshot)(nil).SettingsMeshGlooSoloIo_V1Alpha2_Settings))
}

// DiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargets mocks base method
func (m *MockLocalSnapshot) DiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargets() v1alpha2sets.TrafficTargetSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargets")
	ret0, _ := ret[0].(v1alpha2sets.TrafficTargetSet)
	return ret0
}

// DiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargets indicates an expected call of DiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargets
func (mr *MockLocalSnapshotMockRecorder) DiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargets", reflect.TypeOf((*MockLocalSnapshot)(nil).DiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargets))
}

// DiscoveryMeshGlooSoloIo_V1Alpha2_Workloads mocks base method
func (m *MockLocalSnapshot) DiscoveryMeshGlooSoloIo_V1Alpha2_Workloads() v1alpha2sets.WorkloadSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoveryMeshGlooSoloIo_V1Alpha2_Workloads")
	ret0, _ := ret[0].(v1alpha2sets.WorkloadSet)
	return ret0
}

// DiscoveryMeshGlooSoloIo_V1Alpha2_Workloads indicates an expected call of DiscoveryMeshGlooSoloIo_V1Alpha2_Workloads
func (mr *MockLocalSnapshotMockRecorder) DiscoveryMeshGlooSoloIo_V1Alpha2_Workloads() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoveryMeshGlooSoloIo_V1Alpha2_Workloads", reflect.TypeOf((*MockLocalSnapshot)(nil).DiscoveryMeshGlooSoloIo_V1Alpha2_Workloads))
}

// DiscoveryMeshGlooSoloIo_V1Alpha2_Meshes mocks base method
func (m *MockLocalSnapshot) DiscoveryMeshGlooSoloIo_V1Alpha2_Meshes() v1alpha2sets.MeshSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoveryMeshGlooSoloIo_V1Alpha2_Meshes")
	ret0, _ := ret[0].(v1alpha2sets.MeshSet)
	return ret0
}

// DiscoveryMeshGlooSoloIo_V1Alpha2_Meshes indicates an expected call of DiscoveryMeshGlooSoloIo_V1Alpha2_Meshes
func (mr *MockLocalSnapshotMockRecorder) DiscoveryMeshGlooSoloIo_V1Alpha2_Meshes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoveryMeshGlooSoloIo_V1Alpha2_Meshes", reflect.TypeOf((*MockLocalSnapshot)(nil).DiscoveryMeshGlooSoloIo_V1Alpha2_Meshes))
}

// NetworkingMeshGlooSoloIo_V1Alpha2_TrafficPolicies mocks base method
func (m *MockLocalSnapshot) NetworkingMeshGlooSoloIo_V1Alpha2_TrafficPolicies() v1alpha2sets0.TrafficPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkingMeshGlooSoloIo_V1Alpha2_TrafficPolicies")
	ret0, _ := ret[0].(v1alpha2sets0.TrafficPolicySet)
	return ret0
}

// NetworkingMeshGlooSoloIo_V1Alpha2_TrafficPolicies indicates an expected call of NetworkingMeshGlooSoloIo_V1Alpha2_TrafficPolicies
func (mr *MockLocalSnapshotMockRecorder) NetworkingMeshGlooSoloIo_V1Alpha2_TrafficPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkingMeshGlooSoloIo_V1Alpha2_TrafficPolicies", reflect.TypeOf((*MockLocalSnapshot)(nil).NetworkingMeshGlooSoloIo_V1Alpha2_TrafficPolicies))
}

// NetworkingMeshGlooSoloIo_V1Alpha2_AccessPolicies mocks base method
func (m *MockLocalSnapshot) NetworkingMeshGlooSoloIo_V1Alpha2_AccessPolicies() v1alpha2sets0.AccessPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkingMeshGlooSoloIo_V1Alpha2_AccessPolicies")
	ret0, _ := ret[0].(v1alpha2sets0.AccessPolicySet)
	return ret0
}

// NetworkingMeshGlooSoloIo_V1Alpha2_AccessPolicies indicates an expected call of NetworkingMeshGlooSoloIo_V1Alpha2_AccessPolicies
func (mr *MockLocalSnapshotMockRecorder) NetworkingMeshGlooSoloIo_V1Alpha2_AccessPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkingMeshGlooSoloIo_V1Alpha2_AccessPolicies", reflect.TypeOf((*MockLocalSnapshot)(nil).NetworkingMeshGlooSoloIo_V1Alpha2_AccessPolicies))
}

// NetworkingMeshGlooSoloIo_V1Alpha2_VirtualMeshes mocks base method
func (m *MockLocalSnapshot) NetworkingMeshGlooSoloIo_V1Alpha2_VirtualMeshes() v1alpha2sets0.VirtualMeshSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkingMeshGlooSoloIo_V1Alpha2_VirtualMeshes")
	ret0, _ := ret[0].(v1alpha2sets0.VirtualMeshSet)
	return ret0
}

// NetworkingMeshGlooSoloIo_V1Alpha2_VirtualMeshes indicates an expected call of NetworkingMeshGlooSoloIo_V1Alpha2_VirtualMeshes
func (mr *MockLocalSnapshotMockRecorder) NetworkingMeshGlooSoloIo_V1Alpha2_VirtualMeshes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkingMeshGlooSoloIo_V1Alpha2_VirtualMeshes", reflect.TypeOf((*MockLocalSnapshot)(nil).NetworkingMeshGlooSoloIo_V1Alpha2_VirtualMeshes))
}

// NetworkingMeshGlooSoloIo_V1Alpha2_FailoverServices mocks base method
func (m *MockLocalSnapshot) NetworkingMeshGlooSoloIo_V1Alpha2_FailoverServices() v1alpha2sets0.FailoverServiceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkingMeshGlooSoloIo_V1Alpha2_FailoverServices")
	ret0, _ := ret[0].(v1alpha2sets0.FailoverServiceSet)
	return ret0
}

// NetworkingMeshGlooSoloIo_V1Alpha2_FailoverServices indicates an expected call of NetworkingMeshGlooSoloIo_V1Alpha2_FailoverServices
func (mr *MockLocalSnapshotMockRecorder) NetworkingMeshGlooSoloIo_V1Alpha2_FailoverServices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkingMeshGlooSoloIo_V1Alpha2_FailoverServices", reflect.TypeOf((*MockLocalSnapshot)(nil).NetworkingMeshGlooSoloIo_V1Alpha2_FailoverServices))
}

// NetworkingEnterpriseMeshGlooSoloIo_V1Alpha1_WasmDeployments mocks base method
func (m *MockLocalSnapshot) NetworkingEnterpriseMeshGlooSoloIo_V1Alpha1_WasmDeployments() v1alpha1sets.WasmDeploymentSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkingEnterpriseMeshGlooSoloIo_V1Alpha1_WasmDeployments")
	ret0, _ := ret[0].(v1alpha1sets.WasmDeploymentSet)
	return ret0
}

// NetworkingEnterpriseMeshGlooSoloIo_V1Alpha1_WasmDeployments indicates an expected call of NetworkingEnterpriseMeshGlooSoloIo_V1Alpha1_WasmDeployments
func (mr *MockLocalSnapshotMockRecorder) NetworkingEnterpriseMeshGlooSoloIo_V1Alpha1_WasmDeployments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkingEnterpriseMeshGlooSoloIo_V1Alpha1_WasmDeployments", reflect.TypeOf((*MockLocalSnapshot)(nil).NetworkingEnterpriseMeshGlooSoloIo_V1Alpha1_WasmDeployments))
}

// ObservabilityEnterpriseMeshGlooSoloIo_V1Alpha1_AccessLogRecords mocks base method
func (m *MockLocalSnapshot) ObservabilityEnterpriseMeshGlooSoloIo_V1Alpha1_AccessLogRecords() v1alpha1sets0.AccessLogRecordSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObservabilityEnterpriseMeshGlooSoloIo_V1Alpha1_AccessLogRecords")
	ret0, _ := ret[0].(v1alpha1sets0.AccessLogRecordSet)
	return ret0
}

// ObservabilityEnterpriseMeshGlooSoloIo_V1Alpha1_AccessLogRecords indicates an expected call of ObservabilityEnterpriseMeshGlooSoloIo_V1Alpha1_AccessLogRecords
func (mr *MockLocalSnapshotMockRecorder) ObservabilityEnterpriseMeshGlooSoloIo_V1Alpha1_AccessLogRecords() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObservabilityEnterpriseMeshGlooSoloIo_V1Alpha1_AccessLogRecords", reflect.TypeOf((*MockLocalSnapshot)(nil).ObservabilityEnterpriseMeshGlooSoloIo_V1Alpha1_AccessLogRecords))
}

// V1_Secrets mocks base method
func (m *MockLocalSnapshot) V1_Secrets() v1sets.SecretSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V1_Secrets")
	ret0, _ := ret[0].(v1sets.SecretSet)
	return ret0
}

// V1_Secrets indicates an expected call of V1_Secrets
func (mr *MockLocalSnapshotMockRecorder) V1_Secrets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V1_Secrets", reflect.TypeOf((*MockLocalSnapshot)(nil).V1_Secrets))
}

// MulticlusterSoloIo_V1Alpha1_KubernetesClusters mocks base method
func (m *MockLocalSnapshot) MulticlusterSoloIo_V1Alpha1_KubernetesClusters() v1alpha1sets1.KubernetesClusterSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MulticlusterSoloIo_V1Alpha1_KubernetesClusters")
	ret0, _ := ret[0].(v1alpha1sets1.KubernetesClusterSet)
	return ret0
}

// MulticlusterSoloIo_V1Alpha1_KubernetesClusters indicates an expected call of MulticlusterSoloIo_V1Alpha1_KubernetesClusters
func (mr *MockLocalSnapshotMockRecorder) MulticlusterSoloIo_V1Alpha1_KubernetesClusters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MulticlusterSoloIo_V1Alpha1_KubernetesClusters", reflect.TypeOf((*MockLocalSnapshot)(nil).MulticlusterSoloIo_V1Alpha1_KubernetesClusters))
}

// SyncStatusesMultiCluster mocks base method
func (m *MockLocalSnapshot) SyncStatusesMultiCluster(ctx context.Context, mcClient multicluster.Client, opts input.LocalSyncStatusOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncStatusesMultiCluster", ctx, mcClient, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncStatusesMultiCluster indicates an expected call of SyncStatusesMultiCluster
func (mr *MockLocalSnapshotMockRecorder) SyncStatusesMultiCluster(ctx, mcClient, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncStatusesMultiCluster", reflect.TypeOf((*MockLocalSnapshot)(nil).SyncStatusesMultiCluster), ctx, mcClient, opts)
}

// SyncStatuses mocks base method
func (m *MockLocalSnapshot) SyncStatuses(ctx context.Context, c client.Client, opts input.LocalSyncStatusOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncStatuses", ctx, c, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncStatuses indicates an expected call of SyncStatuses
func (mr *MockLocalSnapshotMockRecorder) SyncStatuses(ctx, c, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncStatuses", reflect.TypeOf((*MockLocalSnapshot)(nil).SyncStatuses), ctx, c, opts)
}

// MarshalJSON mocks base method
func (m *MockLocalSnapshot) MarshalJSON() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalJSON")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalJSON indicates an expected call of MarshalJSON
func (mr *MockLocalSnapshotMockRecorder) MarshalJSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalJSON", reflect.TypeOf((*MockLocalSnapshot)(nil).MarshalJSON))
}

// MockLocalBuilder is a mock of LocalBuilder interface
type MockLocalBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockLocalBuilderMockRecorder
}

// MockLocalBuilderMockRecorder is the mock recorder for MockLocalBuilder
type MockLocalBuilderMockRecorder struct {
	mock *MockLocalBuilder
}

// NewMockLocalBuilder creates a new mock instance
func NewMockLocalBuilder(ctrl *gomock.Controller) *MockLocalBuilder {
	mock := &MockLocalBuilder{ctrl: ctrl}
	mock.recorder = &MockLocalBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLocalBuilder) EXPECT() *MockLocalBuilderMockRecorder {
	return m.recorder
}

// BuildSnapshot mocks base method
func (m *MockLocalBuilder) BuildSnapshot(ctx context.Context, name string, opts input.LocalBuildOptions) (input.LocalSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildSnapshot", ctx, name, opts)
	ret0, _ := ret[0].(input.LocalSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildSnapshot indicates an expected call of BuildSnapshot
func (mr *MockLocalBuilderMockRecorder) BuildSnapshot(ctx, name, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildSnapshot", reflect.TypeOf((*MockLocalBuilder)(nil).BuildSnapshot), ctx, name, opts)
}
