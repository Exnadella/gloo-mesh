// Code generated by MockGen. DO NOT EDIT.
// Source: ./remote_snapshot.go

// Package mock_input is a generated GoMock package.
package mock_input

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha3sets "github.com/solo-io/external-apis/pkg/api/istio/networking.istio.io/v1alpha3/sets"
	v1beta1sets "github.com/solo-io/external-apis/pkg/api/istio/security.istio.io/v1beta1/sets"
	v1sets "github.com/solo-io/external-apis/pkg/api/k8s/core/v1/sets"
	v1alpha2sets "github.com/solo-io/gloo-mesh/pkg/api/certificates.mesh.gloo.solo.io/v1alpha2/sets"
	input "github.com/solo-io/gloo-mesh/pkg/api/networking.mesh.gloo.solo.io/input"
	v1alpha1sets "github.com/solo-io/gloo-mesh/pkg/api/xds.agent.enterprise.mesh.gloo.solo.io/v1alpha1/sets"
	multicluster "github.com/solo-io/skv2/pkg/multicluster"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockRemoteSnapshot is a mock of RemoteSnapshot interface
type MockRemoteSnapshot struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteSnapshotMockRecorder
}

// MockRemoteSnapshotMockRecorder is the mock recorder for MockRemoteSnapshot
type MockRemoteSnapshotMockRecorder struct {
	mock *MockRemoteSnapshot
}

// NewMockRemoteSnapshot creates a new mock instance
func NewMockRemoteSnapshot(ctrl *gomock.Controller) *MockRemoteSnapshot {
	mock := &MockRemoteSnapshot{ctrl: ctrl}
	mock.recorder = &MockRemoteSnapshotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRemoteSnapshot) EXPECT() *MockRemoteSnapshotMockRecorder {
	return m.recorder
}

// CertificatesMeshGlooSoloIov1Alpha2IssuedCertificates mocks base method
func (m *MockRemoteSnapshot) CertificatesMeshGlooSoloIov1Alpha2IssuedCertificates() v1alpha2sets.IssuedCertificateSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertificatesMeshGlooSoloIov1Alpha2IssuedCertificates")
	ret0, _ := ret[0].(v1alpha2sets.IssuedCertificateSet)
	return ret0
}

// CertificatesMeshGlooSoloIov1Alpha2IssuedCertificates indicates an expected call of CertificatesMeshGlooSoloIov1Alpha2IssuedCertificates
func (mr *MockRemoteSnapshotMockRecorder) CertificatesMeshGlooSoloIov1Alpha2IssuedCertificates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertificatesMeshGlooSoloIov1Alpha2IssuedCertificates", reflect.TypeOf((*MockRemoteSnapshot)(nil).CertificatesMeshGlooSoloIov1Alpha2IssuedCertificates))
}

// CertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives mocks base method
func (m *MockRemoteSnapshot) CertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives() v1alpha2sets.PodBounceDirectiveSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives")
	ret0, _ := ret[0].(v1alpha2sets.PodBounceDirectiveSet)
	return ret0
}

// CertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives indicates an expected call of CertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives
func (mr *MockRemoteSnapshotMockRecorder) CertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives", reflect.TypeOf((*MockRemoteSnapshot)(nil).CertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives))
}

// XdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs mocks base method
func (m *MockRemoteSnapshot) XdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs() v1alpha1sets.XdsConfigSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs")
	ret0, _ := ret[0].(v1alpha1sets.XdsConfigSet)
	return ret0
}

// XdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs indicates an expected call of XdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs
func (mr *MockRemoteSnapshotMockRecorder) XdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs", reflect.TypeOf((*MockRemoteSnapshot)(nil).XdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs))
}

// NetworkingIstioIov1Alpha3DestinationRules mocks base method
func (m *MockRemoteSnapshot) NetworkingIstioIov1Alpha3DestinationRules() v1alpha3sets.DestinationRuleSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkingIstioIov1Alpha3DestinationRules")
	ret0, _ := ret[0].(v1alpha3sets.DestinationRuleSet)
	return ret0
}

// NetworkingIstioIov1Alpha3DestinationRules indicates an expected call of NetworkingIstioIov1Alpha3DestinationRules
func (mr *MockRemoteSnapshotMockRecorder) NetworkingIstioIov1Alpha3DestinationRules() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkingIstioIov1Alpha3DestinationRules", reflect.TypeOf((*MockRemoteSnapshot)(nil).NetworkingIstioIov1Alpha3DestinationRules))
}

// NetworkingIstioIov1Alpha3EnvoyFilters mocks base method
func (m *MockRemoteSnapshot) NetworkingIstioIov1Alpha3EnvoyFilters() v1alpha3sets.EnvoyFilterSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkingIstioIov1Alpha3EnvoyFilters")
	ret0, _ := ret[0].(v1alpha3sets.EnvoyFilterSet)
	return ret0
}

// NetworkingIstioIov1Alpha3EnvoyFilters indicates an expected call of NetworkingIstioIov1Alpha3EnvoyFilters
func (mr *MockRemoteSnapshotMockRecorder) NetworkingIstioIov1Alpha3EnvoyFilters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkingIstioIov1Alpha3EnvoyFilters", reflect.TypeOf((*MockRemoteSnapshot)(nil).NetworkingIstioIov1Alpha3EnvoyFilters))
}

// NetworkingIstioIov1Alpha3Gateways mocks base method
func (m *MockRemoteSnapshot) NetworkingIstioIov1Alpha3Gateways() v1alpha3sets.GatewaySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkingIstioIov1Alpha3Gateways")
	ret0, _ := ret[0].(v1alpha3sets.GatewaySet)
	return ret0
}

// NetworkingIstioIov1Alpha3Gateways indicates an expected call of NetworkingIstioIov1Alpha3Gateways
func (mr *MockRemoteSnapshotMockRecorder) NetworkingIstioIov1Alpha3Gateways() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkingIstioIov1Alpha3Gateways", reflect.TypeOf((*MockRemoteSnapshot)(nil).NetworkingIstioIov1Alpha3Gateways))
}

// NetworkingIstioIov1Alpha3ServiceEntries mocks base method
func (m *MockRemoteSnapshot) NetworkingIstioIov1Alpha3ServiceEntries() v1alpha3sets.ServiceEntrySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkingIstioIov1Alpha3ServiceEntries")
	ret0, _ := ret[0].(v1alpha3sets.ServiceEntrySet)
	return ret0
}

// NetworkingIstioIov1Alpha3ServiceEntries indicates an expected call of NetworkingIstioIov1Alpha3ServiceEntries
func (mr *MockRemoteSnapshotMockRecorder) NetworkingIstioIov1Alpha3ServiceEntries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkingIstioIov1Alpha3ServiceEntries", reflect.TypeOf((*MockRemoteSnapshot)(nil).NetworkingIstioIov1Alpha3ServiceEntries))
}

// NetworkingIstioIov1Alpha3VirtualServices mocks base method
func (m *MockRemoteSnapshot) NetworkingIstioIov1Alpha3VirtualServices() v1alpha3sets.VirtualServiceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkingIstioIov1Alpha3VirtualServices")
	ret0, _ := ret[0].(v1alpha3sets.VirtualServiceSet)
	return ret0
}

// NetworkingIstioIov1Alpha3VirtualServices indicates an expected call of NetworkingIstioIov1Alpha3VirtualServices
func (mr *MockRemoteSnapshotMockRecorder) NetworkingIstioIov1Alpha3VirtualServices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkingIstioIov1Alpha3VirtualServices", reflect.TypeOf((*MockRemoteSnapshot)(nil).NetworkingIstioIov1Alpha3VirtualServices))
}

// SecurityIstioIov1Beta1AuthorizationPolicies mocks base method
func (m *MockRemoteSnapshot) SecurityIstioIov1Beta1AuthorizationPolicies() v1beta1sets.AuthorizationPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecurityIstioIov1Beta1AuthorizationPolicies")
	ret0, _ := ret[0].(v1beta1sets.AuthorizationPolicySet)
	return ret0
}

// SecurityIstioIov1Beta1AuthorizationPolicies indicates an expected call of SecurityIstioIov1Beta1AuthorizationPolicies
func (mr *MockRemoteSnapshotMockRecorder) SecurityIstioIov1Beta1AuthorizationPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecurityIstioIov1Beta1AuthorizationPolicies", reflect.TypeOf((*MockRemoteSnapshot)(nil).SecurityIstioIov1Beta1AuthorizationPolicies))
}

// V1ConfigMaps mocks base method
func (m *MockRemoteSnapshot) V1ConfigMaps() v1sets.ConfigMapSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V1ConfigMaps")
	ret0, _ := ret[0].(v1sets.ConfigMapSet)
	return ret0
}

// V1ConfigMaps indicates an expected call of V1ConfigMaps
func (mr *MockRemoteSnapshotMockRecorder) V1ConfigMaps() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V1ConfigMaps", reflect.TypeOf((*MockRemoteSnapshot)(nil).V1ConfigMaps))
}

// SyncStatusesMultiCluster mocks base method
func (m *MockRemoteSnapshot) SyncStatusesMultiCluster(ctx context.Context, mcClient multicluster.Client, opts input.RemoteSyncStatusOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncStatusesMultiCluster", ctx, mcClient, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncStatusesMultiCluster indicates an expected call of SyncStatusesMultiCluster
func (mr *MockRemoteSnapshotMockRecorder) SyncStatusesMultiCluster(ctx, mcClient, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncStatusesMultiCluster", reflect.TypeOf((*MockRemoteSnapshot)(nil).SyncStatusesMultiCluster), ctx, mcClient, opts)
}

// SyncStatuses mocks base method
func (m *MockRemoteSnapshot) SyncStatuses(ctx context.Context, c client.Client, opts input.RemoteSyncStatusOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncStatuses", ctx, c, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncStatuses indicates an expected call of SyncStatuses
func (mr *MockRemoteSnapshotMockRecorder) SyncStatuses(ctx, c, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncStatuses", reflect.TypeOf((*MockRemoteSnapshot)(nil).SyncStatuses), ctx, c, opts)
}

// MarshalJSON mocks base method
func (m *MockRemoteSnapshot) MarshalJSON() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalJSON")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalJSON indicates an expected call of MarshalJSON
func (mr *MockRemoteSnapshotMockRecorder) MarshalJSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalJSON", reflect.TypeOf((*MockRemoteSnapshot)(nil).MarshalJSON))
}

// MockRemoteBuilder is a mock of RemoteBuilder interface
type MockRemoteBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteBuilderMockRecorder
}

// MockRemoteBuilderMockRecorder is the mock recorder for MockRemoteBuilder
type MockRemoteBuilderMockRecorder struct {
	mock *MockRemoteBuilder
}

// NewMockRemoteBuilder creates a new mock instance
func NewMockRemoteBuilder(ctrl *gomock.Controller) *MockRemoteBuilder {
	mock := &MockRemoteBuilder{ctrl: ctrl}
	mock.recorder = &MockRemoteBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRemoteBuilder) EXPECT() *MockRemoteBuilderMockRecorder {
	return m.recorder
}

// BuildSnapshot mocks base method
func (m *MockRemoteBuilder) BuildSnapshot(ctx context.Context, name string, opts input.RemoteBuildOptions) (input.RemoteSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildSnapshot", ctx, name, opts)
	ret0, _ := ret[0].(input.RemoteSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildSnapshot indicates an expected call of BuildSnapshot
func (mr *MockRemoteBuilderMockRecorder) BuildSnapshot(ctx, name, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildSnapshot", reflect.TypeOf((*MockRemoteBuilder)(nil).BuildSnapshot), ctx, name, opts)
}
