// Code generated by MockGen. DO NOT EDIT.
// Source: ./remote_snapshot.go

// Package mock_input is a generated GoMock package.
package mock_input

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha3sets "github.com/solo-io/external-apis/pkg/api/istio/networking.istio.io/v1alpha3/sets"
	v1beta1sets "github.com/solo-io/external-apis/pkg/api/istio/security.istio.io/v1beta1/sets"
	v1sets "github.com/solo-io/external-apis/pkg/api/k8s/core/v1/sets"
	v1alpha2sets "github.com/solo-io/gloo-mesh/pkg/api/certificates.mesh.gloo.solo.io/v1alpha2/sets"
	input "github.com/solo-io/gloo-mesh/pkg/api/networking.mesh.gloo.solo.io/input"
	v1alpha1sets "github.com/solo-io/gloo-mesh/pkg/api/xds.agent.enterprise.mesh.gloo.solo.io/v1alpha1/sets"
	multicluster "github.com/solo-io/skv2/pkg/multicluster"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockRemoteSnapshot is a mock of RemoteSnapshot interface
type MockRemoteSnapshot struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteSnapshotMockRecorder
}

// MockRemoteSnapshotMockRecorder is the mock recorder for MockRemoteSnapshot
type MockRemoteSnapshotMockRecorder struct {
	mock *MockRemoteSnapshot
}

// NewMockRemoteSnapshot creates a new mock instance
func NewMockRemoteSnapshot(ctrl *gomock.Controller) *MockRemoteSnapshot {
	mock := &MockRemoteSnapshot{ctrl: ctrl}
	mock.recorder = &MockRemoteSnapshotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRemoteSnapshot) EXPECT() *MockRemoteSnapshotMockRecorder {
	return m.recorder
}

// CertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificates mocks base method
func (m *MockRemoteSnapshot) CertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificates() v1alpha2sets.IssuedCertificateSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificates")
	ret0, _ := ret[0].(v1alpha2sets.IssuedCertificateSet)
	return ret0
}

// CertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificates indicates an expected call of CertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificates
func (mr *MockRemoteSnapshotMockRecorder) CertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificates", reflect.TypeOf((*MockRemoteSnapshot)(nil).CertificatesMeshGlooSoloIo_V1Alpha2_IssuedCertificates))
}

// CertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectives mocks base method
func (m *MockRemoteSnapshot) CertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectives() v1alpha2sets.PodBounceDirectiveSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectives")
	ret0, _ := ret[0].(v1alpha2sets.PodBounceDirectiveSet)
	return ret0
}

// CertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectives indicates an expected call of CertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectives
func (mr *MockRemoteSnapshotMockRecorder) CertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectives() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectives", reflect.TypeOf((*MockRemoteSnapshot)(nil).CertificatesMeshGlooSoloIo_V1Alpha2_PodBounceDirectives))
}

// XdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigs mocks base method
func (m *MockRemoteSnapshot) XdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigs() v1alpha1sets.XdsConfigSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigs")
	ret0, _ := ret[0].(v1alpha1sets.XdsConfigSet)
	return ret0
}

// XdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigs indicates an expected call of XdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigs
func (mr *MockRemoteSnapshotMockRecorder) XdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigs", reflect.TypeOf((*MockRemoteSnapshot)(nil).XdsAgentEnterpriseMeshGlooSoloIo_V1Alpha1_XdsConfigs))
}

// NetworkingIstioIo_V1Alpha3_DestinationRules mocks base method
func (m *MockRemoteSnapshot) NetworkingIstioIo_V1Alpha3_DestinationRules() v1alpha3sets.DestinationRuleSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkingIstioIo_V1Alpha3_DestinationRules")
	ret0, _ := ret[0].(v1alpha3sets.DestinationRuleSet)
	return ret0
}

// NetworkingIstioIo_V1Alpha3_DestinationRules indicates an expected call of NetworkingIstioIo_V1Alpha3_DestinationRules
func (mr *MockRemoteSnapshotMockRecorder) NetworkingIstioIo_V1Alpha3_DestinationRules() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkingIstioIo_V1Alpha3_DestinationRules", reflect.TypeOf((*MockRemoteSnapshot)(nil).NetworkingIstioIo_V1Alpha3_DestinationRules))
}

// NetworkingIstioIo_V1Alpha3_EnvoyFilters mocks base method
func (m *MockRemoteSnapshot) NetworkingIstioIo_V1Alpha3_EnvoyFilters() v1alpha3sets.EnvoyFilterSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkingIstioIo_V1Alpha3_EnvoyFilters")
	ret0, _ := ret[0].(v1alpha3sets.EnvoyFilterSet)
	return ret0
}

// NetworkingIstioIo_V1Alpha3_EnvoyFilters indicates an expected call of NetworkingIstioIo_V1Alpha3_EnvoyFilters
func (mr *MockRemoteSnapshotMockRecorder) NetworkingIstioIo_V1Alpha3_EnvoyFilters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkingIstioIo_V1Alpha3_EnvoyFilters", reflect.TypeOf((*MockRemoteSnapshot)(nil).NetworkingIstioIo_V1Alpha3_EnvoyFilters))
}

// NetworkingIstioIo_V1Alpha3_Gateways mocks base method
func (m *MockRemoteSnapshot) NetworkingIstioIo_V1Alpha3_Gateways() v1alpha3sets.GatewaySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkingIstioIo_V1Alpha3_Gateways")
	ret0, _ := ret[0].(v1alpha3sets.GatewaySet)
	return ret0
}

// NetworkingIstioIo_V1Alpha3_Gateways indicates an expected call of NetworkingIstioIo_V1Alpha3_Gateways
func (mr *MockRemoteSnapshotMockRecorder) NetworkingIstioIo_V1Alpha3_Gateways() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkingIstioIo_V1Alpha3_Gateways", reflect.TypeOf((*MockRemoteSnapshot)(nil).NetworkingIstioIo_V1Alpha3_Gateways))
}

// NetworkingIstioIo_V1Alpha3_ServiceEntries mocks base method
func (m *MockRemoteSnapshot) NetworkingIstioIo_V1Alpha3_ServiceEntries() v1alpha3sets.ServiceEntrySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkingIstioIo_V1Alpha3_ServiceEntries")
	ret0, _ := ret[0].(v1alpha3sets.ServiceEntrySet)
	return ret0
}

// NetworkingIstioIo_V1Alpha3_ServiceEntries indicates an expected call of NetworkingIstioIo_V1Alpha3_ServiceEntries
func (mr *MockRemoteSnapshotMockRecorder) NetworkingIstioIo_V1Alpha3_ServiceEntries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkingIstioIo_V1Alpha3_ServiceEntries", reflect.TypeOf((*MockRemoteSnapshot)(nil).NetworkingIstioIo_V1Alpha3_ServiceEntries))
}

// NetworkingIstioIo_V1Alpha3_VirtualServices mocks base method
func (m *MockRemoteSnapshot) NetworkingIstioIo_V1Alpha3_VirtualServices() v1alpha3sets.VirtualServiceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkingIstioIo_V1Alpha3_VirtualServices")
	ret0, _ := ret[0].(v1alpha3sets.VirtualServiceSet)
	return ret0
}

// NetworkingIstioIo_V1Alpha3_VirtualServices indicates an expected call of NetworkingIstioIo_V1Alpha3_VirtualServices
func (mr *MockRemoteSnapshotMockRecorder) NetworkingIstioIo_V1Alpha3_VirtualServices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkingIstioIo_V1Alpha3_VirtualServices", reflect.TypeOf((*MockRemoteSnapshot)(nil).NetworkingIstioIo_V1Alpha3_VirtualServices))
}

// SecurityIstioIo_V1Beta1_AuthorizationPolicies mocks base method
func (m *MockRemoteSnapshot) SecurityIstioIo_V1Beta1_AuthorizationPolicies() v1beta1sets.AuthorizationPolicySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecurityIstioIo_V1Beta1_AuthorizationPolicies")
	ret0, _ := ret[0].(v1beta1sets.AuthorizationPolicySet)
	return ret0
}

// SecurityIstioIo_V1Beta1_AuthorizationPolicies indicates an expected call of SecurityIstioIo_V1Beta1_AuthorizationPolicies
func (mr *MockRemoteSnapshotMockRecorder) SecurityIstioIo_V1Beta1_AuthorizationPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecurityIstioIo_V1Beta1_AuthorizationPolicies", reflect.TypeOf((*MockRemoteSnapshot)(nil).SecurityIstioIo_V1Beta1_AuthorizationPolicies))
}

// V1_ConfigMaps mocks base method
func (m *MockRemoteSnapshot) V1_ConfigMaps() v1sets.ConfigMapSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V1_ConfigMaps")
	ret0, _ := ret[0].(v1sets.ConfigMapSet)
	return ret0
}

// V1_ConfigMaps indicates an expected call of V1_ConfigMaps
func (mr *MockRemoteSnapshotMockRecorder) V1_ConfigMaps() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V1_ConfigMaps", reflect.TypeOf((*MockRemoteSnapshot)(nil).V1_ConfigMaps))
}

// SyncStatusesMultiCluster mocks base method
func (m *MockRemoteSnapshot) SyncStatusesMultiCluster(ctx context.Context, mcClient multicluster.Client, opts input.RemoteSyncStatusOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncStatusesMultiCluster", ctx, mcClient, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncStatusesMultiCluster indicates an expected call of SyncStatusesMultiCluster
func (mr *MockRemoteSnapshotMockRecorder) SyncStatusesMultiCluster(ctx, mcClient, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncStatusesMultiCluster", reflect.TypeOf((*MockRemoteSnapshot)(nil).SyncStatusesMultiCluster), ctx, mcClient, opts)
}

// SyncStatuses mocks base method
func (m *MockRemoteSnapshot) SyncStatuses(ctx context.Context, c client.Client, opts input.RemoteSyncStatusOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncStatuses", ctx, c, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncStatuses indicates an expected call of SyncStatuses
func (mr *MockRemoteSnapshotMockRecorder) SyncStatuses(ctx, c, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncStatuses", reflect.TypeOf((*MockRemoteSnapshot)(nil).SyncStatuses), ctx, c, opts)
}

// MarshalJSON mocks base method
func (m *MockRemoteSnapshot) MarshalJSON() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalJSON")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalJSON indicates an expected call of MarshalJSON
func (mr *MockRemoteSnapshotMockRecorder) MarshalJSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalJSON", reflect.TypeOf((*MockRemoteSnapshot)(nil).MarshalJSON))
}

// MockRemoteBuilder is a mock of RemoteBuilder interface
type MockRemoteBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteBuilderMockRecorder
}

// MockRemoteBuilderMockRecorder is the mock recorder for MockRemoteBuilder
type MockRemoteBuilderMockRecorder struct {
	mock *MockRemoteBuilder
}

// NewMockRemoteBuilder creates a new mock instance
func NewMockRemoteBuilder(ctrl *gomock.Controller) *MockRemoteBuilder {
	mock := &MockRemoteBuilder{ctrl: ctrl}
	mock.recorder = &MockRemoteBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRemoteBuilder) EXPECT() *MockRemoteBuilderMockRecorder {
	return m.recorder
}

// BuildSnapshot mocks base method
func (m *MockRemoteBuilder) BuildSnapshot(ctx context.Context, name string, opts input.RemoteBuildOptions) (input.RemoteSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildSnapshot", ctx, name, opts)
	ret0, _ := ret[0].(input.RemoteSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildSnapshot indicates an expected call of BuildSnapshot
func (mr *MockRemoteBuilderMockRecorder) BuildSnapshot(ctx, name, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildSnapshot", reflect.TypeOf((*MockRemoteBuilder)(nil).BuildSnapshot), ctx, name, opts)
}
