// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./remote_snapshot.go -destination mocks/remote_snapshot.go

// The Input RemoteSnapshot contains the set of all:
// * CertificatesMeshGlooSoloIov1Alpha2IssuedCertificates
// * CertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives
// * XdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs
// * AppmeshK8SAwsv1Beta2VirtualServices
// * AppmeshK8SAwsv1Beta2VirtualNodes
// * AppmeshK8SAwsv1Beta2VirtualRouters
// * NetworkingIstioIov1Alpha3DestinationRules
// * NetworkingIstioIov1Alpha3EnvoyFilters
// * NetworkingIstioIov1Alpha3Gateways
// * NetworkingIstioIov1Alpha3ServiceEntries
// * NetworkingIstioIov1Alpha3VirtualServices
// * SecurityIstioIov1Beta1AuthorizationPolicies
// * V1ConfigMaps
// read from a given cluster or set of clusters, across all namespaces.
//
// A snapshot can be constructed from either a single Manager (for a single cluster)
// or a ClusterWatcher (for multiple clusters) using the RemoteSnapshotBuilder.
//
// Resources in a MultiCluster snapshot will have their ClusterName set to the
// name of the cluster from which the resource was read.

package input

import (
	"context"
	"encoding/json"

	"github.com/solo-io/skv2/pkg/verifier"
	"k8s.io/apimachinery/pkg/runtime/schema"

	"github.com/hashicorp/go-multierror"

	"github.com/solo-io/skv2/pkg/controllerutils"
	"github.com/solo-io/skv2/pkg/multicluster"
	"sigs.k8s.io/controller-runtime/pkg/client"

	certificates_mesh_gloo_solo_io_v1alpha2 "github.com/solo-io/gloo-mesh/pkg/api/certificates.mesh.gloo.solo.io/v1alpha2"
	certificates_mesh_gloo_solo_io_v1alpha2_sets "github.com/solo-io/gloo-mesh/pkg/api/certificates.mesh.gloo.solo.io/v1alpha2/sets"

	xds_agent_enterprise_mesh_gloo_solo_io_v1alpha1 "github.com/solo-io/gloo-mesh/pkg/api/xds.agent.enterprise.mesh.gloo.solo.io/v1alpha1"
	xds_agent_enterprise_mesh_gloo_solo_io_v1alpha1_sets "github.com/solo-io/gloo-mesh/pkg/api/xds.agent.enterprise.mesh.gloo.solo.io/v1alpha1/sets"

	appmesh_k8s_aws_v1beta2 "github.com/solo-io/external-apis/pkg/api/appmesh/appmesh.k8s.aws/v1beta2"
	appmesh_k8s_aws_v1beta2_sets "github.com/solo-io/external-apis/pkg/api/appmesh/appmesh.k8s.aws/v1beta2/sets"

	networking_istio_io_v1alpha3 "github.com/solo-io/external-apis/pkg/api/istio/networking.istio.io/v1alpha3"
	networking_istio_io_v1alpha3_sets "github.com/solo-io/external-apis/pkg/api/istio/networking.istio.io/v1alpha3/sets"

	security_istio_io_v1beta1 "github.com/solo-io/external-apis/pkg/api/istio/security.istio.io/v1beta1"
	security_istio_io_v1beta1_sets "github.com/solo-io/external-apis/pkg/api/istio/security.istio.io/v1beta1/sets"

	v1 "github.com/solo-io/external-apis/pkg/api/k8s/core/v1"
	v1_sets "github.com/solo-io/external-apis/pkg/api/k8s/core/v1/sets"
)

// the snapshot of input resources consumed by translation
type RemoteSnapshot interface {

	// return the set of input CertificatesMeshGlooSoloIov1Alpha2IssuedCertificates
	CertificatesMeshGlooSoloIov1Alpha2IssuedCertificates() certificates_mesh_gloo_solo_io_v1alpha2_sets.IssuedCertificateSet
	// return the set of input CertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives
	CertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives() certificates_mesh_gloo_solo_io_v1alpha2_sets.PodBounceDirectiveSet

	// return the set of input XdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs
	XdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs() xds_agent_enterprise_mesh_gloo_solo_io_v1alpha1_sets.XdsConfigSet

	// return the set of input AppmeshK8SAwsv1Beta2VirtualServices
	AppmeshK8SAwsv1Beta2VirtualServices() appmesh_k8s_aws_v1beta2_sets.VirtualServiceSet
	// return the set of input AppmeshK8SAwsv1Beta2VirtualNodes
	AppmeshK8SAwsv1Beta2VirtualNodes() appmesh_k8s_aws_v1beta2_sets.VirtualNodeSet
	// return the set of input AppmeshK8SAwsv1Beta2VirtualRouters
	AppmeshK8SAwsv1Beta2VirtualRouters() appmesh_k8s_aws_v1beta2_sets.VirtualRouterSet

	// return the set of input NetworkingIstioIov1Alpha3DestinationRules
	NetworkingIstioIov1Alpha3DestinationRules() networking_istio_io_v1alpha3_sets.DestinationRuleSet
	// return the set of input NetworkingIstioIov1Alpha3EnvoyFilters
	NetworkingIstioIov1Alpha3EnvoyFilters() networking_istio_io_v1alpha3_sets.EnvoyFilterSet
	// return the set of input NetworkingIstioIov1Alpha3Gateways
	NetworkingIstioIov1Alpha3Gateways() networking_istio_io_v1alpha3_sets.GatewaySet
	// return the set of input NetworkingIstioIov1Alpha3ServiceEntries
	NetworkingIstioIov1Alpha3ServiceEntries() networking_istio_io_v1alpha3_sets.ServiceEntrySet
	// return the set of input NetworkingIstioIov1Alpha3VirtualServices
	NetworkingIstioIov1Alpha3VirtualServices() networking_istio_io_v1alpha3_sets.VirtualServiceSet

	// return the set of input SecurityIstioIov1Beta1AuthorizationPolicies
	SecurityIstioIov1Beta1AuthorizationPolicies() security_istio_io_v1beta1_sets.AuthorizationPolicySet

	// return the set of input V1ConfigMaps
	V1ConfigMaps() v1_sets.ConfigMapSet
	// update the status of all input objects which support
	// the Status subresource (across multiple clusters)
	SyncStatusesMultiCluster(ctx context.Context, mcClient multicluster.Client, opts RemoteSyncStatusOptions) error
	// serialize the entire snapshot as JSON
	MarshalJSON() ([]byte, error)
}

// options for syncing input object statuses
type RemoteSyncStatusOptions struct {

	// sync status of CertificatesMeshGlooSoloIov1Alpha2IssuedCertificate objects
	CertificatesMeshGlooSoloIov1Alpha2IssuedCertificate bool
	// sync status of CertificatesMeshGlooSoloIov1Alpha2PodBounceDirective objects
	CertificatesMeshGlooSoloIov1Alpha2PodBounceDirective bool

	// sync status of XdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfig objects
	XdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfig bool

	// sync status of AppmeshK8SAwsv1Beta2VirtualService objects
	AppmeshK8SAwsv1Beta2VirtualService bool
	// sync status of AppmeshK8SAwsv1Beta2VirtualNode objects
	AppmeshK8SAwsv1Beta2VirtualNode bool
	// sync status of AppmeshK8SAwsv1Beta2VirtualRouter objects
	AppmeshK8SAwsv1Beta2VirtualRouter bool

	// sync status of NetworkingIstioIov1Alpha3DestinationRule objects
	NetworkingIstioIov1Alpha3DestinationRule bool
	// sync status of NetworkingIstioIov1Alpha3EnvoyFilter objects
	NetworkingIstioIov1Alpha3EnvoyFilter bool
	// sync status of NetworkingIstioIov1Alpha3Gateway objects
	NetworkingIstioIov1Alpha3Gateway bool
	// sync status of NetworkingIstioIov1Alpha3ServiceEntry objects
	NetworkingIstioIov1Alpha3ServiceEntry bool
	// sync status of NetworkingIstioIov1Alpha3VirtualService objects
	NetworkingIstioIov1Alpha3VirtualService bool

	// sync status of SecurityIstioIov1Beta1AuthorizationPolicy objects
	SecurityIstioIov1Beta1AuthorizationPolicy bool

	// sync status of V1ConfigMap objects
	V1ConfigMap bool
}

type snapshotRemote struct {
	name string

	certificatesMeshGlooSoloIov1Alpha2IssuedCertificates  certificates_mesh_gloo_solo_io_v1alpha2_sets.IssuedCertificateSet
	certificatesMeshGlooSoloIov1Alpha2PodBounceDirectives certificates_mesh_gloo_solo_io_v1alpha2_sets.PodBounceDirectiveSet

	xdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs xds_agent_enterprise_mesh_gloo_solo_io_v1alpha1_sets.XdsConfigSet

	appmeshK8SAwsv1Beta2VirtualServices appmesh_k8s_aws_v1beta2_sets.VirtualServiceSet
	appmeshK8SAwsv1Beta2VirtualNodes    appmesh_k8s_aws_v1beta2_sets.VirtualNodeSet
	appmeshK8SAwsv1Beta2VirtualRouters  appmesh_k8s_aws_v1beta2_sets.VirtualRouterSet

	networkingIstioIov1Alpha3DestinationRules networking_istio_io_v1alpha3_sets.DestinationRuleSet
	networkingIstioIov1Alpha3EnvoyFilters     networking_istio_io_v1alpha3_sets.EnvoyFilterSet
	networkingIstioIov1Alpha3Gateways         networking_istio_io_v1alpha3_sets.GatewaySet
	networkingIstioIov1Alpha3ServiceEntries   networking_istio_io_v1alpha3_sets.ServiceEntrySet
	networkingIstioIov1Alpha3VirtualServices  networking_istio_io_v1alpha3_sets.VirtualServiceSet

	securityIstioIov1Beta1AuthorizationPolicies security_istio_io_v1beta1_sets.AuthorizationPolicySet

	v1ConfigMaps v1_sets.ConfigMapSet
}

func NewRemoteSnapshot(
	name string,

	certificatesMeshGlooSoloIov1Alpha2IssuedCertificates certificates_mesh_gloo_solo_io_v1alpha2_sets.IssuedCertificateSet,
	certificatesMeshGlooSoloIov1Alpha2PodBounceDirectives certificates_mesh_gloo_solo_io_v1alpha2_sets.PodBounceDirectiveSet,

	xdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs xds_agent_enterprise_mesh_gloo_solo_io_v1alpha1_sets.XdsConfigSet,

	appmeshK8SAwsv1Beta2VirtualServices appmesh_k8s_aws_v1beta2_sets.VirtualServiceSet,
	appmeshK8SAwsv1Beta2VirtualNodes appmesh_k8s_aws_v1beta2_sets.VirtualNodeSet,
	appmeshK8SAwsv1Beta2VirtualRouters appmesh_k8s_aws_v1beta2_sets.VirtualRouterSet,

	networkingIstioIov1Alpha3DestinationRules networking_istio_io_v1alpha3_sets.DestinationRuleSet,
	networkingIstioIov1Alpha3EnvoyFilters networking_istio_io_v1alpha3_sets.EnvoyFilterSet,
	networkingIstioIov1Alpha3Gateways networking_istio_io_v1alpha3_sets.GatewaySet,
	networkingIstioIov1Alpha3ServiceEntries networking_istio_io_v1alpha3_sets.ServiceEntrySet,
	networkingIstioIov1Alpha3VirtualServices networking_istio_io_v1alpha3_sets.VirtualServiceSet,

	securityIstioIov1Beta1AuthorizationPolicies security_istio_io_v1beta1_sets.AuthorizationPolicySet,

	v1ConfigMaps v1_sets.ConfigMapSet,

) RemoteSnapshot {
	return &snapshotRemote{
		name: name,

		certificatesMeshGlooSoloIov1Alpha2IssuedCertificates:  certificatesMeshGlooSoloIov1Alpha2IssuedCertificates,
		certificatesMeshGlooSoloIov1Alpha2PodBounceDirectives: certificatesMeshGlooSoloIov1Alpha2PodBounceDirectives,
		xdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs:    xdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs,
		appmeshK8SAwsv1Beta2VirtualServices:                   appmeshK8SAwsv1Beta2VirtualServices,
		appmeshK8SAwsv1Beta2VirtualNodes:                      appmeshK8SAwsv1Beta2VirtualNodes,
		appmeshK8SAwsv1Beta2VirtualRouters:                    appmeshK8SAwsv1Beta2VirtualRouters,
		networkingIstioIov1Alpha3DestinationRules:             networkingIstioIov1Alpha3DestinationRules,
		networkingIstioIov1Alpha3EnvoyFilters:                 networkingIstioIov1Alpha3EnvoyFilters,
		networkingIstioIov1Alpha3Gateways:                     networkingIstioIov1Alpha3Gateways,
		networkingIstioIov1Alpha3ServiceEntries:               networkingIstioIov1Alpha3ServiceEntries,
		networkingIstioIov1Alpha3VirtualServices:              networkingIstioIov1Alpha3VirtualServices,
		securityIstioIov1Beta1AuthorizationPolicies:           securityIstioIov1Beta1AuthorizationPolicies,
		v1ConfigMaps: v1ConfigMaps,
	}
}

func (s snapshotRemote) CertificatesMeshGlooSoloIov1Alpha2IssuedCertificates() certificates_mesh_gloo_solo_io_v1alpha2_sets.IssuedCertificateSet {
	return s.certificatesMeshGlooSoloIov1Alpha2IssuedCertificates
}

func (s snapshotRemote) CertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives() certificates_mesh_gloo_solo_io_v1alpha2_sets.PodBounceDirectiveSet {
	return s.certificatesMeshGlooSoloIov1Alpha2PodBounceDirectives
}

func (s snapshotRemote) XdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs() xds_agent_enterprise_mesh_gloo_solo_io_v1alpha1_sets.XdsConfigSet {
	return s.xdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs
}

func (s snapshotRemote) AppmeshK8SAwsv1Beta2VirtualServices() appmesh_k8s_aws_v1beta2_sets.VirtualServiceSet {
	return s.appmeshK8SAwsv1Beta2VirtualServices
}

func (s snapshotRemote) AppmeshK8SAwsv1Beta2VirtualNodes() appmesh_k8s_aws_v1beta2_sets.VirtualNodeSet {
	return s.appmeshK8SAwsv1Beta2VirtualNodes
}

func (s snapshotRemote) AppmeshK8SAwsv1Beta2VirtualRouters() appmesh_k8s_aws_v1beta2_sets.VirtualRouterSet {
	return s.appmeshK8SAwsv1Beta2VirtualRouters
}

func (s snapshotRemote) NetworkingIstioIov1Alpha3DestinationRules() networking_istio_io_v1alpha3_sets.DestinationRuleSet {
	return s.networkingIstioIov1Alpha3DestinationRules
}

func (s snapshotRemote) NetworkingIstioIov1Alpha3EnvoyFilters() networking_istio_io_v1alpha3_sets.EnvoyFilterSet {
	return s.networkingIstioIov1Alpha3EnvoyFilters
}

func (s snapshotRemote) NetworkingIstioIov1Alpha3Gateways() networking_istio_io_v1alpha3_sets.GatewaySet {
	return s.networkingIstioIov1Alpha3Gateways
}

func (s snapshotRemote) NetworkingIstioIov1Alpha3ServiceEntries() networking_istio_io_v1alpha3_sets.ServiceEntrySet {
	return s.networkingIstioIov1Alpha3ServiceEntries
}

func (s snapshotRemote) NetworkingIstioIov1Alpha3VirtualServices() networking_istio_io_v1alpha3_sets.VirtualServiceSet {
	return s.networkingIstioIov1Alpha3VirtualServices
}

func (s snapshotRemote) SecurityIstioIov1Beta1AuthorizationPolicies() security_istio_io_v1beta1_sets.AuthorizationPolicySet {
	return s.securityIstioIov1Beta1AuthorizationPolicies
}

func (s snapshotRemote) V1ConfigMaps() v1_sets.ConfigMapSet {
	return s.v1ConfigMaps
}

func (s snapshotRemote) SyncStatusesMultiCluster(ctx context.Context, mcClient multicluster.Client, opts RemoteSyncStatusOptions) error {
	var errs error

	if opts.CertificatesMeshGlooSoloIov1Alpha2IssuedCertificate {
		for _, obj := range s.CertificatesMeshGlooSoloIov1Alpha2IssuedCertificates().List() {
			clusterClient, err := mcClient.Cluster(obj.ClusterName)
			if err != nil {
				errs = multierror.Append(errs, err)
				continue
			}
			if _, err := controllerutils.UpdateStatus(ctx, clusterClient, obj); err != nil {
				errs = multierror.Append(errs, err)
			}
		}
	}
	if opts.CertificatesMeshGlooSoloIov1Alpha2PodBounceDirective {
		for _, obj := range s.CertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives().List() {
			clusterClient, err := mcClient.Cluster(obj.ClusterName)
			if err != nil {
				errs = multierror.Append(errs, err)
				continue
			}
			if _, err := controllerutils.UpdateStatus(ctx, clusterClient, obj); err != nil {
				errs = multierror.Append(errs, err)
			}
		}
	}

	if opts.XdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfig {
		for _, obj := range s.XdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs().List() {
			clusterClient, err := mcClient.Cluster(obj.ClusterName)
			if err != nil {
				errs = multierror.Append(errs, err)
				continue
			}
			if _, err := controllerutils.UpdateStatus(ctx, clusterClient, obj); err != nil {
				errs = multierror.Append(errs, err)
			}
		}
	}

	return errs
}

func (s snapshotRemote) MarshalJSON() ([]byte, error) {
	snapshotMap := map[string]interface{}{"name": s.name}

	snapshotMap["certificatesMeshGlooSoloIov1Alpha2IssuedCertificates"] = s.certificatesMeshGlooSoloIov1Alpha2IssuedCertificates.List()
	snapshotMap["certificatesMeshGlooSoloIov1Alpha2PodBounceDirectives"] = s.certificatesMeshGlooSoloIov1Alpha2PodBounceDirectives.List()
	snapshotMap["xdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs"] = s.xdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs.List()
	snapshotMap["appmeshK8SAwsv1Beta2VirtualServices"] = s.appmeshK8SAwsv1Beta2VirtualServices.List()
	snapshotMap["appmeshK8SAwsv1Beta2VirtualNodes"] = s.appmeshK8SAwsv1Beta2VirtualNodes.List()
	snapshotMap["appmeshK8SAwsv1Beta2VirtualRouters"] = s.appmeshK8SAwsv1Beta2VirtualRouters.List()
	snapshotMap["networkingIstioIov1Alpha3DestinationRules"] = s.networkingIstioIov1Alpha3DestinationRules.List()
	snapshotMap["networkingIstioIov1Alpha3EnvoyFilters"] = s.networkingIstioIov1Alpha3EnvoyFilters.List()
	snapshotMap["networkingIstioIov1Alpha3Gateways"] = s.networkingIstioIov1Alpha3Gateways.List()
	snapshotMap["networkingIstioIov1Alpha3ServiceEntries"] = s.networkingIstioIov1Alpha3ServiceEntries.List()
	snapshotMap["networkingIstioIov1Alpha3VirtualServices"] = s.networkingIstioIov1Alpha3VirtualServices.List()
	snapshotMap["securityIstioIov1Beta1AuthorizationPolicies"] = s.securityIstioIov1Beta1AuthorizationPolicies.List()
	snapshotMap["v1ConfigMaps"] = s.v1ConfigMaps.List()
	return json.Marshal(snapshotMap)
}

// builds the input snapshot from API Clients.
type RemoteBuilder interface {
	BuildSnapshot(ctx context.Context, name string, opts RemoteBuildOptions) (RemoteSnapshot, error)
}

// Options for building a snapshot
type RemoteBuildOptions struct {

	// List options for composing a snapshot from CertificatesMeshGlooSoloIov1Alpha2IssuedCertificates
	CertificatesMeshGlooSoloIov1Alpha2IssuedCertificates ResourceRemoteBuildOptions
	// List options for composing a snapshot from CertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives
	CertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives ResourceRemoteBuildOptions

	// List options for composing a snapshot from XdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs
	XdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs ResourceRemoteBuildOptions

	// List options for composing a snapshot from AppmeshK8SAwsv1Beta2VirtualServices
	AppmeshK8SAwsv1Beta2VirtualServices ResourceRemoteBuildOptions
	// List options for composing a snapshot from AppmeshK8SAwsv1Beta2VirtualNodes
	AppmeshK8SAwsv1Beta2VirtualNodes ResourceRemoteBuildOptions
	// List options for composing a snapshot from AppmeshK8SAwsv1Beta2VirtualRouters
	AppmeshK8SAwsv1Beta2VirtualRouters ResourceRemoteBuildOptions

	// List options for composing a snapshot from NetworkingIstioIov1Alpha3DestinationRules
	NetworkingIstioIov1Alpha3DestinationRules ResourceRemoteBuildOptions
	// List options for composing a snapshot from NetworkingIstioIov1Alpha3EnvoyFilters
	NetworkingIstioIov1Alpha3EnvoyFilters ResourceRemoteBuildOptions
	// List options for composing a snapshot from NetworkingIstioIov1Alpha3Gateways
	NetworkingIstioIov1Alpha3Gateways ResourceRemoteBuildOptions
	// List options for composing a snapshot from NetworkingIstioIov1Alpha3ServiceEntries
	NetworkingIstioIov1Alpha3ServiceEntries ResourceRemoteBuildOptions
	// List options for composing a snapshot from NetworkingIstioIov1Alpha3VirtualServices
	NetworkingIstioIov1Alpha3VirtualServices ResourceRemoteBuildOptions

	// List options for composing a snapshot from SecurityIstioIov1Beta1AuthorizationPolicies
	SecurityIstioIov1Beta1AuthorizationPolicies ResourceRemoteBuildOptions

	// List options for composing a snapshot from V1ConfigMaps
	V1ConfigMaps ResourceRemoteBuildOptions
}

// Options for reading resources of a given type
type ResourceRemoteBuildOptions struct {

	// List options for composing a snapshot from a resource type
	ListOptions []client.ListOption

	// If provided, ensure the resource has been verified before adding it to snapshots
	Verifier verifier.ServerResourceVerifier
}

// build a snapshot from resources across multiple clusters
type multiClusterRemoteBuilder struct {
	clusters multicluster.Interface
	client   multicluster.Client
}

// Produces snapshots of resources across all clusters defined in the ClusterSet
func NewMultiClusterRemoteBuilder(
	clusters multicluster.Interface,
	client multicluster.Client,
) RemoteBuilder {
	return &multiClusterRemoteBuilder{
		clusters: clusters,
		client:   client,
	}
}

func (b *multiClusterRemoteBuilder) BuildSnapshot(ctx context.Context, name string, opts RemoteBuildOptions) (RemoteSnapshot, error) {

	certificatesMeshGlooSoloIov1Alpha2IssuedCertificates := certificates_mesh_gloo_solo_io_v1alpha2_sets.NewIssuedCertificateSet()
	certificatesMeshGlooSoloIov1Alpha2PodBounceDirectives := certificates_mesh_gloo_solo_io_v1alpha2_sets.NewPodBounceDirectiveSet()

	xdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs := xds_agent_enterprise_mesh_gloo_solo_io_v1alpha1_sets.NewXdsConfigSet()

	appmeshK8SAwsv1Beta2VirtualServices := appmesh_k8s_aws_v1beta2_sets.NewVirtualServiceSet()
	appmeshK8SAwsv1Beta2VirtualNodes := appmesh_k8s_aws_v1beta2_sets.NewVirtualNodeSet()
	appmeshK8SAwsv1Beta2VirtualRouters := appmesh_k8s_aws_v1beta2_sets.NewVirtualRouterSet()

	networkingIstioIov1Alpha3DestinationRules := networking_istio_io_v1alpha3_sets.NewDestinationRuleSet()
	networkingIstioIov1Alpha3EnvoyFilters := networking_istio_io_v1alpha3_sets.NewEnvoyFilterSet()
	networkingIstioIov1Alpha3Gateways := networking_istio_io_v1alpha3_sets.NewGatewaySet()
	networkingIstioIov1Alpha3ServiceEntries := networking_istio_io_v1alpha3_sets.NewServiceEntrySet()
	networkingIstioIov1Alpha3VirtualServices := networking_istio_io_v1alpha3_sets.NewVirtualServiceSet()

	securityIstioIov1Beta1AuthorizationPolicies := security_istio_io_v1beta1_sets.NewAuthorizationPolicySet()

	v1ConfigMaps := v1_sets.NewConfigMapSet()

	var errs error

	for _, cluster := range b.clusters.ListClusters() {

		if err := b.insertCertificatesMeshGlooSoloIov1Alpha2IssuedCertificatesFromCluster(ctx, cluster, certificatesMeshGlooSoloIov1Alpha2IssuedCertificates, opts.CertificatesMeshGlooSoloIov1Alpha2IssuedCertificates); err != nil {
			errs = multierror.Append(errs, err)
		}
		if err := b.insertCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectivesFromCluster(ctx, cluster, certificatesMeshGlooSoloIov1Alpha2PodBounceDirectives, opts.CertificatesMeshGlooSoloIov1Alpha2PodBounceDirectives); err != nil {
			errs = multierror.Append(errs, err)
		}
		if err := b.insertXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigsFromCluster(ctx, cluster, xdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs, opts.XdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs); err != nil {
			errs = multierror.Append(errs, err)
		}
		if err := b.insertAppmeshK8SAwsv1Beta2VirtualServicesFromCluster(ctx, cluster, appmeshK8SAwsv1Beta2VirtualServices, opts.AppmeshK8SAwsv1Beta2VirtualServices); err != nil {
			errs = multierror.Append(errs, err)
		}
		if err := b.insertAppmeshK8SAwsv1Beta2VirtualNodesFromCluster(ctx, cluster, appmeshK8SAwsv1Beta2VirtualNodes, opts.AppmeshK8SAwsv1Beta2VirtualNodes); err != nil {
			errs = multierror.Append(errs, err)
		}
		if err := b.insertAppmeshK8SAwsv1Beta2VirtualRoutersFromCluster(ctx, cluster, appmeshK8SAwsv1Beta2VirtualRouters, opts.AppmeshK8SAwsv1Beta2VirtualRouters); err != nil {
			errs = multierror.Append(errs, err)
		}
		if err := b.insertNetworkingIstioIov1Alpha3DestinationRulesFromCluster(ctx, cluster, networkingIstioIov1Alpha3DestinationRules, opts.NetworkingIstioIov1Alpha3DestinationRules); err != nil {
			errs = multierror.Append(errs, err)
		}
		if err := b.insertNetworkingIstioIov1Alpha3EnvoyFiltersFromCluster(ctx, cluster, networkingIstioIov1Alpha3EnvoyFilters, opts.NetworkingIstioIov1Alpha3EnvoyFilters); err != nil {
			errs = multierror.Append(errs, err)
		}
		if err := b.insertNetworkingIstioIov1Alpha3GatewaysFromCluster(ctx, cluster, networkingIstioIov1Alpha3Gateways, opts.NetworkingIstioIov1Alpha3Gateways); err != nil {
			errs = multierror.Append(errs, err)
		}
		if err := b.insertNetworkingIstioIov1Alpha3ServiceEntriesFromCluster(ctx, cluster, networkingIstioIov1Alpha3ServiceEntries, opts.NetworkingIstioIov1Alpha3ServiceEntries); err != nil {
			errs = multierror.Append(errs, err)
		}
		if err := b.insertNetworkingIstioIov1Alpha3VirtualServicesFromCluster(ctx, cluster, networkingIstioIov1Alpha3VirtualServices, opts.NetworkingIstioIov1Alpha3VirtualServices); err != nil {
			errs = multierror.Append(errs, err)
		}
		if err := b.insertSecurityIstioIov1Beta1AuthorizationPoliciesFromCluster(ctx, cluster, securityIstioIov1Beta1AuthorizationPolicies, opts.SecurityIstioIov1Beta1AuthorizationPolicies); err != nil {
			errs = multierror.Append(errs, err)
		}
		if err := b.insertV1ConfigMapsFromCluster(ctx, cluster, v1ConfigMaps, opts.V1ConfigMaps); err != nil {
			errs = multierror.Append(errs, err)
		}

	}

	outputSnap := NewRemoteSnapshot(
		name,

		certificatesMeshGlooSoloIov1Alpha2IssuedCertificates,
		certificatesMeshGlooSoloIov1Alpha2PodBounceDirectives,
		xdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs,
		appmeshK8SAwsv1Beta2VirtualServices,
		appmeshK8SAwsv1Beta2VirtualNodes,
		appmeshK8SAwsv1Beta2VirtualRouters,
		networkingIstioIov1Alpha3DestinationRules,
		networkingIstioIov1Alpha3EnvoyFilters,
		networkingIstioIov1Alpha3Gateways,
		networkingIstioIov1Alpha3ServiceEntries,
		networkingIstioIov1Alpha3VirtualServices,
		securityIstioIov1Beta1AuthorizationPolicies,
		v1ConfigMaps,
	)

	return outputSnap, errs
}

func (b *multiClusterRemoteBuilder) insertCertificatesMeshGlooSoloIov1Alpha2IssuedCertificatesFromCluster(ctx context.Context, cluster string, certificatesMeshGlooSoloIov1Alpha2IssuedCertificates certificates_mesh_gloo_solo_io_v1alpha2_sets.IssuedCertificateSet, opts ResourceRemoteBuildOptions) error {
	certificatesMeshGlooSoloIov1Alpha2IssuedCertificateClient, err := certificates_mesh_gloo_solo_io_v1alpha2.NewMulticlusterIssuedCertificateClient(b.client).Cluster(cluster)
	if err != nil {
		return err
	}

	if opts.Verifier != nil {
		mgr, err := b.clusters.Cluster(cluster)
		if err != nil {
			return err
		}

		gvk := schema.GroupVersionKind{
			Group:   "certificates.mesh.gloo.solo.io",
			Version: "v1alpha2",
			Kind:    "IssuedCertificate",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			cluster,
			mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	certificatesMeshGlooSoloIov1Alpha2IssuedCertificateList, err := certificatesMeshGlooSoloIov1Alpha2IssuedCertificateClient.ListIssuedCertificate(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range certificatesMeshGlooSoloIov1Alpha2IssuedCertificateList.Items {
		item := item               // pike
		item.ClusterName = cluster // set cluster for in-memory processing
		certificatesMeshGlooSoloIov1Alpha2IssuedCertificates.Insert(&item)
	}

	return nil
}
func (b *multiClusterRemoteBuilder) insertCertificatesMeshGlooSoloIov1Alpha2PodBounceDirectivesFromCluster(ctx context.Context, cluster string, certificatesMeshGlooSoloIov1Alpha2PodBounceDirectives certificates_mesh_gloo_solo_io_v1alpha2_sets.PodBounceDirectiveSet, opts ResourceRemoteBuildOptions) error {
	certificatesMeshGlooSoloIov1Alpha2PodBounceDirectiveClient, err := certificates_mesh_gloo_solo_io_v1alpha2.NewMulticlusterPodBounceDirectiveClient(b.client).Cluster(cluster)
	if err != nil {
		return err
	}

	if opts.Verifier != nil {
		mgr, err := b.clusters.Cluster(cluster)
		if err != nil {
			return err
		}

		gvk := schema.GroupVersionKind{
			Group:   "certificates.mesh.gloo.solo.io",
			Version: "v1alpha2",
			Kind:    "PodBounceDirective",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			cluster,
			mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	certificatesMeshGlooSoloIov1Alpha2PodBounceDirectiveList, err := certificatesMeshGlooSoloIov1Alpha2PodBounceDirectiveClient.ListPodBounceDirective(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range certificatesMeshGlooSoloIov1Alpha2PodBounceDirectiveList.Items {
		item := item               // pike
		item.ClusterName = cluster // set cluster for in-memory processing
		certificatesMeshGlooSoloIov1Alpha2PodBounceDirectives.Insert(&item)
	}

	return nil
}

func (b *multiClusterRemoteBuilder) insertXdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigsFromCluster(ctx context.Context, cluster string, xdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs xds_agent_enterprise_mesh_gloo_solo_io_v1alpha1_sets.XdsConfigSet, opts ResourceRemoteBuildOptions) error {
	xdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigClient, err := xds_agent_enterprise_mesh_gloo_solo_io_v1alpha1.NewMulticlusterXdsConfigClient(b.client).Cluster(cluster)
	if err != nil {
		return err
	}

	if opts.Verifier != nil {
		mgr, err := b.clusters.Cluster(cluster)
		if err != nil {
			return err
		}

		gvk := schema.GroupVersionKind{
			Group:   "xds.agent.enterprise.mesh.gloo.solo.io",
			Version: "v1alpha1",
			Kind:    "XdsConfig",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			cluster,
			mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	xdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigList, err := xdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigClient.ListXdsConfig(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range xdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigList.Items {
		item := item               // pike
		item.ClusterName = cluster // set cluster for in-memory processing
		xdsAgentEnterpriseMeshGlooSoloIov1Alpha1XdsConfigs.Insert(&item)
	}

	return nil
}

func (b *multiClusterRemoteBuilder) insertAppmeshK8SAwsv1Beta2VirtualServicesFromCluster(ctx context.Context, cluster string, appmeshK8SAwsv1Beta2VirtualServices appmesh_k8s_aws_v1beta2_sets.VirtualServiceSet, opts ResourceRemoteBuildOptions) error {
	appmeshK8SAwsv1Beta2VirtualServiceClient, err := appmesh_k8s_aws_v1beta2.NewMulticlusterVirtualServiceClient(b.client).Cluster(cluster)
	if err != nil {
		return err
	}

	if opts.Verifier != nil {
		mgr, err := b.clusters.Cluster(cluster)
		if err != nil {
			return err
		}

		gvk := schema.GroupVersionKind{
			Group:   "appmesh.k8s.aws",
			Version: "v1beta2",
			Kind:    "VirtualService",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			cluster,
			mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	appmeshK8SAwsv1Beta2VirtualServiceList, err := appmeshK8SAwsv1Beta2VirtualServiceClient.ListVirtualService(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range appmeshK8SAwsv1Beta2VirtualServiceList.Items {
		item := item               // pike
		item.ClusterName = cluster // set cluster for in-memory processing
		appmeshK8SAwsv1Beta2VirtualServices.Insert(&item)
	}

	return nil
}
func (b *multiClusterRemoteBuilder) insertAppmeshK8SAwsv1Beta2VirtualNodesFromCluster(ctx context.Context, cluster string, appmeshK8SAwsv1Beta2VirtualNodes appmesh_k8s_aws_v1beta2_sets.VirtualNodeSet, opts ResourceRemoteBuildOptions) error {
	appmeshK8SAwsv1Beta2VirtualNodeClient, err := appmesh_k8s_aws_v1beta2.NewMulticlusterVirtualNodeClient(b.client).Cluster(cluster)
	if err != nil {
		return err
	}

	if opts.Verifier != nil {
		mgr, err := b.clusters.Cluster(cluster)
		if err != nil {
			return err
		}

		gvk := schema.GroupVersionKind{
			Group:   "appmesh.k8s.aws",
			Version: "v1beta2",
			Kind:    "VirtualNode",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			cluster,
			mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	appmeshK8SAwsv1Beta2VirtualNodeList, err := appmeshK8SAwsv1Beta2VirtualNodeClient.ListVirtualNode(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range appmeshK8SAwsv1Beta2VirtualNodeList.Items {
		item := item               // pike
		item.ClusterName = cluster // set cluster for in-memory processing
		appmeshK8SAwsv1Beta2VirtualNodes.Insert(&item)
	}

	return nil
}
func (b *multiClusterRemoteBuilder) insertAppmeshK8SAwsv1Beta2VirtualRoutersFromCluster(ctx context.Context, cluster string, appmeshK8SAwsv1Beta2VirtualRouters appmesh_k8s_aws_v1beta2_sets.VirtualRouterSet, opts ResourceRemoteBuildOptions) error {
	appmeshK8SAwsv1Beta2VirtualRouterClient, err := appmesh_k8s_aws_v1beta2.NewMulticlusterVirtualRouterClient(b.client).Cluster(cluster)
	if err != nil {
		return err
	}

	if opts.Verifier != nil {
		mgr, err := b.clusters.Cluster(cluster)
		if err != nil {
			return err
		}

		gvk := schema.GroupVersionKind{
			Group:   "appmesh.k8s.aws",
			Version: "v1beta2",
			Kind:    "VirtualRouter",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			cluster,
			mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	appmeshK8SAwsv1Beta2VirtualRouterList, err := appmeshK8SAwsv1Beta2VirtualRouterClient.ListVirtualRouter(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range appmeshK8SAwsv1Beta2VirtualRouterList.Items {
		item := item               // pike
		item.ClusterName = cluster // set cluster for in-memory processing
		appmeshK8SAwsv1Beta2VirtualRouters.Insert(&item)
	}

	return nil
}

func (b *multiClusterRemoteBuilder) insertNetworkingIstioIov1Alpha3DestinationRulesFromCluster(ctx context.Context, cluster string, networkingIstioIov1Alpha3DestinationRules networking_istio_io_v1alpha3_sets.DestinationRuleSet, opts ResourceRemoteBuildOptions) error {
	networkingIstioIov1Alpha3DestinationRuleClient, err := networking_istio_io_v1alpha3.NewMulticlusterDestinationRuleClient(b.client).Cluster(cluster)
	if err != nil {
		return err
	}

	if opts.Verifier != nil {
		mgr, err := b.clusters.Cluster(cluster)
		if err != nil {
			return err
		}

		gvk := schema.GroupVersionKind{
			Group:   "networking.istio.io",
			Version: "v1alpha3",
			Kind:    "DestinationRule",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			cluster,
			mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	networkingIstioIov1Alpha3DestinationRuleList, err := networkingIstioIov1Alpha3DestinationRuleClient.ListDestinationRule(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range networkingIstioIov1Alpha3DestinationRuleList.Items {
		item := item               // pike
		item.ClusterName = cluster // set cluster for in-memory processing
		networkingIstioIov1Alpha3DestinationRules.Insert(&item)
	}

	return nil
}
func (b *multiClusterRemoteBuilder) insertNetworkingIstioIov1Alpha3EnvoyFiltersFromCluster(ctx context.Context, cluster string, networkingIstioIov1Alpha3EnvoyFilters networking_istio_io_v1alpha3_sets.EnvoyFilterSet, opts ResourceRemoteBuildOptions) error {
	networkingIstioIov1Alpha3EnvoyFilterClient, err := networking_istio_io_v1alpha3.NewMulticlusterEnvoyFilterClient(b.client).Cluster(cluster)
	if err != nil {
		return err
	}

	if opts.Verifier != nil {
		mgr, err := b.clusters.Cluster(cluster)
		if err != nil {
			return err
		}

		gvk := schema.GroupVersionKind{
			Group:   "networking.istio.io",
			Version: "v1alpha3",
			Kind:    "EnvoyFilter",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			cluster,
			mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	networkingIstioIov1Alpha3EnvoyFilterList, err := networkingIstioIov1Alpha3EnvoyFilterClient.ListEnvoyFilter(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range networkingIstioIov1Alpha3EnvoyFilterList.Items {
		item := item               // pike
		item.ClusterName = cluster // set cluster for in-memory processing
		networkingIstioIov1Alpha3EnvoyFilters.Insert(&item)
	}

	return nil
}
func (b *multiClusterRemoteBuilder) insertNetworkingIstioIov1Alpha3GatewaysFromCluster(ctx context.Context, cluster string, networkingIstioIov1Alpha3Gateways networking_istio_io_v1alpha3_sets.GatewaySet, opts ResourceRemoteBuildOptions) error {
	networkingIstioIov1Alpha3GatewayClient, err := networking_istio_io_v1alpha3.NewMulticlusterGatewayClient(b.client).Cluster(cluster)
	if err != nil {
		return err
	}

	if opts.Verifier != nil {
		mgr, err := b.clusters.Cluster(cluster)
		if err != nil {
			return err
		}

		gvk := schema.GroupVersionKind{
			Group:   "networking.istio.io",
			Version: "v1alpha3",
			Kind:    "Gateway",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			cluster,
			mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	networkingIstioIov1Alpha3GatewayList, err := networkingIstioIov1Alpha3GatewayClient.ListGateway(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range networkingIstioIov1Alpha3GatewayList.Items {
		item := item               // pike
		item.ClusterName = cluster // set cluster for in-memory processing
		networkingIstioIov1Alpha3Gateways.Insert(&item)
	}

	return nil
}
func (b *multiClusterRemoteBuilder) insertNetworkingIstioIov1Alpha3ServiceEntriesFromCluster(ctx context.Context, cluster string, networkingIstioIov1Alpha3ServiceEntries networking_istio_io_v1alpha3_sets.ServiceEntrySet, opts ResourceRemoteBuildOptions) error {
	networkingIstioIov1Alpha3ServiceEntryClient, err := networking_istio_io_v1alpha3.NewMulticlusterServiceEntryClient(b.client).Cluster(cluster)
	if err != nil {
		return err
	}

	if opts.Verifier != nil {
		mgr, err := b.clusters.Cluster(cluster)
		if err != nil {
			return err
		}

		gvk := schema.GroupVersionKind{
			Group:   "networking.istio.io",
			Version: "v1alpha3",
			Kind:    "ServiceEntry",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			cluster,
			mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	networkingIstioIov1Alpha3ServiceEntryList, err := networkingIstioIov1Alpha3ServiceEntryClient.ListServiceEntry(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range networkingIstioIov1Alpha3ServiceEntryList.Items {
		item := item               // pike
		item.ClusterName = cluster // set cluster for in-memory processing
		networkingIstioIov1Alpha3ServiceEntries.Insert(&item)
	}

	return nil
}
func (b *multiClusterRemoteBuilder) insertNetworkingIstioIov1Alpha3VirtualServicesFromCluster(ctx context.Context, cluster string, networkingIstioIov1Alpha3VirtualServices networking_istio_io_v1alpha3_sets.VirtualServiceSet, opts ResourceRemoteBuildOptions) error {
	networkingIstioIov1Alpha3VirtualServiceClient, err := networking_istio_io_v1alpha3.NewMulticlusterVirtualServiceClient(b.client).Cluster(cluster)
	if err != nil {
		return err
	}

	if opts.Verifier != nil {
		mgr, err := b.clusters.Cluster(cluster)
		if err != nil {
			return err
		}

		gvk := schema.GroupVersionKind{
			Group:   "networking.istio.io",
			Version: "v1alpha3",
			Kind:    "VirtualService",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			cluster,
			mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	networkingIstioIov1Alpha3VirtualServiceList, err := networkingIstioIov1Alpha3VirtualServiceClient.ListVirtualService(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range networkingIstioIov1Alpha3VirtualServiceList.Items {
		item := item               // pike
		item.ClusterName = cluster // set cluster for in-memory processing
		networkingIstioIov1Alpha3VirtualServices.Insert(&item)
	}

	return nil
}

func (b *multiClusterRemoteBuilder) insertSecurityIstioIov1Beta1AuthorizationPoliciesFromCluster(ctx context.Context, cluster string, securityIstioIov1Beta1AuthorizationPolicies security_istio_io_v1beta1_sets.AuthorizationPolicySet, opts ResourceRemoteBuildOptions) error {
	securityIstioIov1Beta1AuthorizationPolicyClient, err := security_istio_io_v1beta1.NewMulticlusterAuthorizationPolicyClient(b.client).Cluster(cluster)
	if err != nil {
		return err
	}

	if opts.Verifier != nil {
		mgr, err := b.clusters.Cluster(cluster)
		if err != nil {
			return err
		}

		gvk := schema.GroupVersionKind{
			Group:   "security.istio.io",
			Version: "v1beta1",
			Kind:    "AuthorizationPolicy",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			cluster,
			mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	securityIstioIov1Beta1AuthorizationPolicyList, err := securityIstioIov1Beta1AuthorizationPolicyClient.ListAuthorizationPolicy(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range securityIstioIov1Beta1AuthorizationPolicyList.Items {
		item := item               // pike
		item.ClusterName = cluster // set cluster for in-memory processing
		securityIstioIov1Beta1AuthorizationPolicies.Insert(&item)
	}

	return nil
}

func (b *multiClusterRemoteBuilder) insertV1ConfigMapsFromCluster(ctx context.Context, cluster string, v1ConfigMaps v1_sets.ConfigMapSet, opts ResourceRemoteBuildOptions) error {
	v1ConfigMapClient, err := v1.NewMulticlusterConfigMapClient(b.client).Cluster(cluster)
	if err != nil {
		return err
	}

	if opts.Verifier != nil {
		mgr, err := b.clusters.Cluster(cluster)
		if err != nil {
			return err
		}

		gvk := schema.GroupVersionKind{
			Group:   "",
			Version: "v1",
			Kind:    "ConfigMap",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			cluster,
			mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	v1ConfigMapList, err := v1ConfigMapClient.ListConfigMap(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range v1ConfigMapList.Items {
		item := item               // pike
		item.ClusterName = cluster // set cluster for in-memory processing
		v1ConfigMaps.Insert(&item)
	}

	return nil
}
