// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./local_snapshot.go -destination mocks/local_snapshot.go

// The Input LocalSnapshot contains the set of all:
// * SettingsMeshGlooSoloIov1Alpha2Settings
// * DiscoveryMeshGlooSoloIov1Alpha2TrafficTargets
// * DiscoveryMeshGlooSoloIov1Alpha2Workloads
// * DiscoveryMeshGlooSoloIov1Alpha2Meshes
// * NetworkingMeshGlooSoloIov1Alpha2TrafficPolicies
// * NetworkingMeshGlooSoloIov1Alpha2AccessPolicies
// * NetworkingMeshGlooSoloIov1Alpha2VirtualMeshes
// * NetworkingMeshGlooSoloIov1Alpha2FailoverServices
// * NetworkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeployments
// * V1Secrets
// * MulticlusterSoloIov1Alpha1KubernetesClusters
// read from a given cluster or set of clusters, across all namespaces.
//
// A snapshot can be constructed from either a single Manager (for a single cluster)
// or a ClusterWatcher (for multiple clusters) using the LocalSnapshotBuilder.
//
// Resources in a MultiCluster snapshot will have their ClusterName set to the
// name of the cluster from which the resource was read.

package input

import (
	"context"
	"encoding/json"

	"github.com/solo-io/skv2/pkg/verifier"
	"k8s.io/apimachinery/pkg/runtime/schema"

	"github.com/hashicorp/go-multierror"

	"github.com/solo-io/skv2/pkg/controllerutils"
	"github.com/solo-io/skv2/pkg/multicluster"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/manager"

	settings_mesh_gloo_solo_io_v1alpha2 "github.com/solo-io/gloo-mesh/pkg/api/settings.mesh.gloo.solo.io/v1alpha2"
	settings_mesh_gloo_solo_io_v1alpha2_sets "github.com/solo-io/gloo-mesh/pkg/api/settings.mesh.gloo.solo.io/v1alpha2/sets"

	discovery_mesh_gloo_solo_io_v1alpha2 "github.com/solo-io/gloo-mesh/pkg/api/discovery.mesh.gloo.solo.io/v1alpha2"
	discovery_mesh_gloo_solo_io_v1alpha2_sets "github.com/solo-io/gloo-mesh/pkg/api/discovery.mesh.gloo.solo.io/v1alpha2/sets"

	networking_mesh_gloo_solo_io_v1alpha2 "github.com/solo-io/gloo-mesh/pkg/api/networking.mesh.gloo.solo.io/v1alpha2"
	networking_mesh_gloo_solo_io_v1alpha2_sets "github.com/solo-io/gloo-mesh/pkg/api/networking.mesh.gloo.solo.io/v1alpha2/sets"

	networking_enterprise_mesh_gloo_solo_io_v1alpha1 "github.com/solo-io/gloo-mesh/pkg/api/networking.enterprise.mesh.gloo.solo.io/v1alpha1"
	networking_enterprise_mesh_gloo_solo_io_v1alpha1_sets "github.com/solo-io/gloo-mesh/pkg/api/networking.enterprise.mesh.gloo.solo.io/v1alpha1/sets"

	v1 "github.com/solo-io/external-apis/pkg/api/k8s/core/v1"
	v1_sets "github.com/solo-io/external-apis/pkg/api/k8s/core/v1/sets"

	multicluster_solo_io_v1alpha1 "github.com/solo-io/skv2/pkg/api/multicluster.solo.io/v1alpha1"
	multicluster_solo_io_v1alpha1_sets "github.com/solo-io/skv2/pkg/api/multicluster.solo.io/v1alpha1/sets"
)

// the snapshot of input resources consumed by translation
type LocalSnapshot interface {

	// return the set of input SettingsMeshGlooSoloIov1Alpha2Settings
	SettingsMeshGlooSoloIov1Alpha2Settings() settings_mesh_gloo_solo_io_v1alpha2_sets.SettingsSet

	// return the set of input DiscoveryMeshGlooSoloIov1Alpha2TrafficTargets
	DiscoveryMeshGlooSoloIov1Alpha2TrafficTargets() discovery_mesh_gloo_solo_io_v1alpha2_sets.TrafficTargetSet
	// return the set of input DiscoveryMeshGlooSoloIov1Alpha2Workloads
	DiscoveryMeshGlooSoloIov1Alpha2Workloads() discovery_mesh_gloo_solo_io_v1alpha2_sets.WorkloadSet
	// return the set of input DiscoveryMeshGlooSoloIov1Alpha2Meshes
	DiscoveryMeshGlooSoloIov1Alpha2Meshes() discovery_mesh_gloo_solo_io_v1alpha2_sets.MeshSet

	// return the set of input NetworkingMeshGlooSoloIov1Alpha2TrafficPolicies
	NetworkingMeshGlooSoloIov1Alpha2TrafficPolicies() networking_mesh_gloo_solo_io_v1alpha2_sets.TrafficPolicySet
	// return the set of input NetworkingMeshGlooSoloIov1Alpha2AccessPolicies
	NetworkingMeshGlooSoloIov1Alpha2AccessPolicies() networking_mesh_gloo_solo_io_v1alpha2_sets.AccessPolicySet
	// return the set of input NetworkingMeshGlooSoloIov1Alpha2VirtualMeshes
	NetworkingMeshGlooSoloIov1Alpha2VirtualMeshes() networking_mesh_gloo_solo_io_v1alpha2_sets.VirtualMeshSet
	// return the set of input NetworkingMeshGlooSoloIov1Alpha2FailoverServices
	NetworkingMeshGlooSoloIov1Alpha2FailoverServices() networking_mesh_gloo_solo_io_v1alpha2_sets.FailoverServiceSet

	// return the set of input NetworkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeployments
	NetworkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeployments() networking_enterprise_mesh_gloo_solo_io_v1alpha1_sets.WasmDeploymentSet

	// return the set of input V1Secrets
	V1Secrets() v1_sets.SecretSet

	// return the set of input MulticlusterSoloIov1Alpha1KubernetesClusters
	MulticlusterSoloIov1Alpha1KubernetesClusters() multicluster_solo_io_v1alpha1_sets.KubernetesClusterSet
	// update the status of all input objects which support
	// the Status subresource (across multiple clusters)
	SyncStatusesMultiCluster(ctx context.Context, mcClient multicluster.Client, opts LocalSyncStatusOptions) error
	// update the status of all input objects which support
	// the Status subresource (in the local cluster)
	SyncStatuses(ctx context.Context, c client.Client, opts LocalSyncStatusOptions) error
	// serialize the entire snapshot as JSON
	MarshalJSON() ([]byte, error)
}

// options for syncing input object statuses
type LocalSyncStatusOptions struct {

	// sync status of SettingsMeshGlooSoloIov1Alpha2Settings objects
	SettingsMeshGlooSoloIov1Alpha2Settings bool

	// sync status of DiscoveryMeshGlooSoloIov1Alpha2TrafficTarget objects
	DiscoveryMeshGlooSoloIov1Alpha2TrafficTarget bool
	// sync status of DiscoveryMeshGlooSoloIov1Alpha2Workload objects
	DiscoveryMeshGlooSoloIov1Alpha2Workload bool
	// sync status of DiscoveryMeshGlooSoloIov1Alpha2Mesh objects
	DiscoveryMeshGlooSoloIov1Alpha2Mesh bool

	// sync status of NetworkingMeshGlooSoloIov1Alpha2TrafficPolicy objects
	NetworkingMeshGlooSoloIov1Alpha2TrafficPolicy bool
	// sync status of NetworkingMeshGlooSoloIov1Alpha2AccessPolicy objects
	NetworkingMeshGlooSoloIov1Alpha2AccessPolicy bool
	// sync status of NetworkingMeshGlooSoloIov1Alpha2VirtualMesh objects
	NetworkingMeshGlooSoloIov1Alpha2VirtualMesh bool
	// sync status of NetworkingMeshGlooSoloIov1Alpha2FailoverService objects
	NetworkingMeshGlooSoloIov1Alpha2FailoverService bool

	// sync status of NetworkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeployment objects
	NetworkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeployment bool

	// sync status of V1Secret objects
	V1Secret bool

	// sync status of MulticlusterSoloIov1Alpha1KubernetesCluster objects
	MulticlusterSoloIov1Alpha1KubernetesCluster bool
}

type snapshotLocal struct {
	name string

	settingsMeshGlooSoloIov1Alpha2Settings settings_mesh_gloo_solo_io_v1alpha2_sets.SettingsSet

	discoveryMeshGlooSoloIov1Alpha2TrafficTargets discovery_mesh_gloo_solo_io_v1alpha2_sets.TrafficTargetSet
	discoveryMeshGlooSoloIov1Alpha2Workloads      discovery_mesh_gloo_solo_io_v1alpha2_sets.WorkloadSet
	discoveryMeshGlooSoloIov1Alpha2Meshes         discovery_mesh_gloo_solo_io_v1alpha2_sets.MeshSet

	networkingMeshGlooSoloIov1Alpha2TrafficPolicies  networking_mesh_gloo_solo_io_v1alpha2_sets.TrafficPolicySet
	networkingMeshGlooSoloIov1Alpha2AccessPolicies   networking_mesh_gloo_solo_io_v1alpha2_sets.AccessPolicySet
	networkingMeshGlooSoloIov1Alpha2VirtualMeshes    networking_mesh_gloo_solo_io_v1alpha2_sets.VirtualMeshSet
	networkingMeshGlooSoloIov1Alpha2FailoverServices networking_mesh_gloo_solo_io_v1alpha2_sets.FailoverServiceSet

	networkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeployments networking_enterprise_mesh_gloo_solo_io_v1alpha1_sets.WasmDeploymentSet

	v1Secrets v1_sets.SecretSet

	multiclusterSoloIov1Alpha1KubernetesClusters multicluster_solo_io_v1alpha1_sets.KubernetesClusterSet
}

func NewLocalSnapshot(
	name string,

	settingsMeshGlooSoloIov1Alpha2Settings settings_mesh_gloo_solo_io_v1alpha2_sets.SettingsSet,

	discoveryMeshGlooSoloIov1Alpha2TrafficTargets discovery_mesh_gloo_solo_io_v1alpha2_sets.TrafficTargetSet,
	discoveryMeshGlooSoloIov1Alpha2Workloads discovery_mesh_gloo_solo_io_v1alpha2_sets.WorkloadSet,
	discoveryMeshGlooSoloIov1Alpha2Meshes discovery_mesh_gloo_solo_io_v1alpha2_sets.MeshSet,

	networkingMeshGlooSoloIov1Alpha2TrafficPolicies networking_mesh_gloo_solo_io_v1alpha2_sets.TrafficPolicySet,
	networkingMeshGlooSoloIov1Alpha2AccessPolicies networking_mesh_gloo_solo_io_v1alpha2_sets.AccessPolicySet,
	networkingMeshGlooSoloIov1Alpha2VirtualMeshes networking_mesh_gloo_solo_io_v1alpha2_sets.VirtualMeshSet,
	networkingMeshGlooSoloIov1Alpha2FailoverServices networking_mesh_gloo_solo_io_v1alpha2_sets.FailoverServiceSet,

	networkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeployments networking_enterprise_mesh_gloo_solo_io_v1alpha1_sets.WasmDeploymentSet,

	v1Secrets v1_sets.SecretSet,

	multiclusterSoloIov1Alpha1KubernetesClusters multicluster_solo_io_v1alpha1_sets.KubernetesClusterSet,

) LocalSnapshot {
	return &snapshotLocal{
		name: name,

		settingsMeshGlooSoloIov1Alpha2Settings:                    settingsMeshGlooSoloIov1Alpha2Settings,
		discoveryMeshGlooSoloIov1Alpha2TrafficTargets:             discoveryMeshGlooSoloIov1Alpha2TrafficTargets,
		discoveryMeshGlooSoloIov1Alpha2Workloads:                  discoveryMeshGlooSoloIov1Alpha2Workloads,
		discoveryMeshGlooSoloIov1Alpha2Meshes:                     discoveryMeshGlooSoloIov1Alpha2Meshes,
		networkingMeshGlooSoloIov1Alpha2TrafficPolicies:           networkingMeshGlooSoloIov1Alpha2TrafficPolicies,
		networkingMeshGlooSoloIov1Alpha2AccessPolicies:            networkingMeshGlooSoloIov1Alpha2AccessPolicies,
		networkingMeshGlooSoloIov1Alpha2VirtualMeshes:             networkingMeshGlooSoloIov1Alpha2VirtualMeshes,
		networkingMeshGlooSoloIov1Alpha2FailoverServices:          networkingMeshGlooSoloIov1Alpha2FailoverServices,
		networkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeployments: networkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeployments,
		v1Secrets: v1Secrets,
		multiclusterSoloIov1Alpha1KubernetesClusters: multiclusterSoloIov1Alpha1KubernetesClusters,
	}
}

func (s snapshotLocal) SettingsMeshGlooSoloIov1Alpha2Settings() settings_mesh_gloo_solo_io_v1alpha2_sets.SettingsSet {
	return s.settingsMeshGlooSoloIov1Alpha2Settings
}

func (s snapshotLocal) DiscoveryMeshGlooSoloIov1Alpha2TrafficTargets() discovery_mesh_gloo_solo_io_v1alpha2_sets.TrafficTargetSet {
	return s.discoveryMeshGlooSoloIov1Alpha2TrafficTargets
}

func (s snapshotLocal) DiscoveryMeshGlooSoloIov1Alpha2Workloads() discovery_mesh_gloo_solo_io_v1alpha2_sets.WorkloadSet {
	return s.discoveryMeshGlooSoloIov1Alpha2Workloads
}

func (s snapshotLocal) DiscoveryMeshGlooSoloIov1Alpha2Meshes() discovery_mesh_gloo_solo_io_v1alpha2_sets.MeshSet {
	return s.discoveryMeshGlooSoloIov1Alpha2Meshes
}

func (s snapshotLocal) NetworkingMeshGlooSoloIov1Alpha2TrafficPolicies() networking_mesh_gloo_solo_io_v1alpha2_sets.TrafficPolicySet {
	return s.networkingMeshGlooSoloIov1Alpha2TrafficPolicies
}

func (s snapshotLocal) NetworkingMeshGlooSoloIov1Alpha2AccessPolicies() networking_mesh_gloo_solo_io_v1alpha2_sets.AccessPolicySet {
	return s.networkingMeshGlooSoloIov1Alpha2AccessPolicies
}

func (s snapshotLocal) NetworkingMeshGlooSoloIov1Alpha2VirtualMeshes() networking_mesh_gloo_solo_io_v1alpha2_sets.VirtualMeshSet {
	return s.networkingMeshGlooSoloIov1Alpha2VirtualMeshes
}

func (s snapshotLocal) NetworkingMeshGlooSoloIov1Alpha2FailoverServices() networking_mesh_gloo_solo_io_v1alpha2_sets.FailoverServiceSet {
	return s.networkingMeshGlooSoloIov1Alpha2FailoverServices
}

func (s snapshotLocal) NetworkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeployments() networking_enterprise_mesh_gloo_solo_io_v1alpha1_sets.WasmDeploymentSet {
	return s.networkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeployments
}

func (s snapshotLocal) V1Secrets() v1_sets.SecretSet {
	return s.v1Secrets
}

func (s snapshotLocal) MulticlusterSoloIov1Alpha1KubernetesClusters() multicluster_solo_io_v1alpha1_sets.KubernetesClusterSet {
	return s.multiclusterSoloIov1Alpha1KubernetesClusters
}

func (s snapshotLocal) SyncStatusesMultiCluster(ctx context.Context, mcClient multicluster.Client, opts LocalSyncStatusOptions) error {
	var errs error

	if opts.SettingsMeshGlooSoloIov1Alpha2Settings {
		for _, obj := range s.SettingsMeshGlooSoloIov1Alpha2Settings().List() {
			clusterClient, err := mcClient.Cluster(obj.ClusterName)
			if err != nil {
				errs = multierror.Append(errs, err)
				continue
			}
			if _, err := controllerutils.UpdateStatus(ctx, clusterClient, obj); err != nil {
				errs = multierror.Append(errs, err)
			}
		}
	}

	if opts.DiscoveryMeshGlooSoloIov1Alpha2TrafficTarget {
		for _, obj := range s.DiscoveryMeshGlooSoloIov1Alpha2TrafficTargets().List() {
			clusterClient, err := mcClient.Cluster(obj.ClusterName)
			if err != nil {
				errs = multierror.Append(errs, err)
				continue
			}
			if _, err := controllerutils.UpdateStatus(ctx, clusterClient, obj); err != nil {
				errs = multierror.Append(errs, err)
			}
		}
	}
	if opts.DiscoveryMeshGlooSoloIov1Alpha2Workload {
		for _, obj := range s.DiscoveryMeshGlooSoloIov1Alpha2Workloads().List() {
			clusterClient, err := mcClient.Cluster(obj.ClusterName)
			if err != nil {
				errs = multierror.Append(errs, err)
				continue
			}
			if _, err := controllerutils.UpdateStatus(ctx, clusterClient, obj); err != nil {
				errs = multierror.Append(errs, err)
			}
		}
	}
	if opts.DiscoveryMeshGlooSoloIov1Alpha2Mesh {
		for _, obj := range s.DiscoveryMeshGlooSoloIov1Alpha2Meshes().List() {
			clusterClient, err := mcClient.Cluster(obj.ClusterName)
			if err != nil {
				errs = multierror.Append(errs, err)
				continue
			}
			if _, err := controllerutils.UpdateStatus(ctx, clusterClient, obj); err != nil {
				errs = multierror.Append(errs, err)
			}
		}
	}

	if opts.NetworkingMeshGlooSoloIov1Alpha2TrafficPolicy {
		for _, obj := range s.NetworkingMeshGlooSoloIov1Alpha2TrafficPolicies().List() {
			clusterClient, err := mcClient.Cluster(obj.ClusterName)
			if err != nil {
				errs = multierror.Append(errs, err)
				continue
			}
			if _, err := controllerutils.UpdateStatus(ctx, clusterClient, obj); err != nil {
				errs = multierror.Append(errs, err)
			}
		}
	}
	if opts.NetworkingMeshGlooSoloIov1Alpha2AccessPolicy {
		for _, obj := range s.NetworkingMeshGlooSoloIov1Alpha2AccessPolicies().List() {
			clusterClient, err := mcClient.Cluster(obj.ClusterName)
			if err != nil {
				errs = multierror.Append(errs, err)
				continue
			}
			if _, err := controllerutils.UpdateStatus(ctx, clusterClient, obj); err != nil {
				errs = multierror.Append(errs, err)
			}
		}
	}
	if opts.NetworkingMeshGlooSoloIov1Alpha2VirtualMesh {
		for _, obj := range s.NetworkingMeshGlooSoloIov1Alpha2VirtualMeshes().List() {
			clusterClient, err := mcClient.Cluster(obj.ClusterName)
			if err != nil {
				errs = multierror.Append(errs, err)
				continue
			}
			if _, err := controllerutils.UpdateStatus(ctx, clusterClient, obj); err != nil {
				errs = multierror.Append(errs, err)
			}
		}
	}
	if opts.NetworkingMeshGlooSoloIov1Alpha2FailoverService {
		for _, obj := range s.NetworkingMeshGlooSoloIov1Alpha2FailoverServices().List() {
			clusterClient, err := mcClient.Cluster(obj.ClusterName)
			if err != nil {
				errs = multierror.Append(errs, err)
				continue
			}
			if _, err := controllerutils.UpdateStatus(ctx, clusterClient, obj); err != nil {
				errs = multierror.Append(errs, err)
			}
		}
	}

	if opts.NetworkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeployment {
		for _, obj := range s.NetworkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeployments().List() {
			clusterClient, err := mcClient.Cluster(obj.ClusterName)
			if err != nil {
				errs = multierror.Append(errs, err)
				continue
			}
			if _, err := controllerutils.UpdateStatus(ctx, clusterClient, obj); err != nil {
				errs = multierror.Append(errs, err)
			}
		}
	}

	if opts.MulticlusterSoloIov1Alpha1KubernetesCluster {
		for _, obj := range s.MulticlusterSoloIov1Alpha1KubernetesClusters().List() {
			clusterClient, err := mcClient.Cluster(obj.ClusterName)
			if err != nil {
				errs = multierror.Append(errs, err)
				continue
			}
			if _, err := controllerutils.UpdateStatus(ctx, clusterClient, obj); err != nil {
				errs = multierror.Append(errs, err)
			}
		}
	}
	return errs
}

func (s snapshotLocal) SyncStatuses(ctx context.Context, c client.Client, opts LocalSyncStatusOptions) error {
	var errs error

	if opts.SettingsMeshGlooSoloIov1Alpha2Settings {
		for _, obj := range s.SettingsMeshGlooSoloIov1Alpha2Settings().List() {
			if _, err := controllerutils.UpdateStatus(ctx, c, obj); err != nil {
				errs = multierror.Append(errs, err)
			}
		}
	}

	if opts.DiscoveryMeshGlooSoloIov1Alpha2TrafficTarget {
		for _, obj := range s.DiscoveryMeshGlooSoloIov1Alpha2TrafficTargets().List() {
			if _, err := controllerutils.UpdateStatus(ctx, c, obj); err != nil {
				errs = multierror.Append(errs, err)
			}
		}
	}
	if opts.DiscoveryMeshGlooSoloIov1Alpha2Workload {
		for _, obj := range s.DiscoveryMeshGlooSoloIov1Alpha2Workloads().List() {
			if _, err := controllerutils.UpdateStatus(ctx, c, obj); err != nil {
				errs = multierror.Append(errs, err)
			}
		}
	}
	if opts.DiscoveryMeshGlooSoloIov1Alpha2Mesh {
		for _, obj := range s.DiscoveryMeshGlooSoloIov1Alpha2Meshes().List() {
			if _, err := controllerutils.UpdateStatus(ctx, c, obj); err != nil {
				errs = multierror.Append(errs, err)
			}
		}
	}

	if opts.NetworkingMeshGlooSoloIov1Alpha2TrafficPolicy {
		for _, obj := range s.NetworkingMeshGlooSoloIov1Alpha2TrafficPolicies().List() {
			if _, err := controllerutils.UpdateStatus(ctx, c, obj); err != nil {
				errs = multierror.Append(errs, err)
			}
		}
	}
	if opts.NetworkingMeshGlooSoloIov1Alpha2AccessPolicy {
		for _, obj := range s.NetworkingMeshGlooSoloIov1Alpha2AccessPolicies().List() {
			if _, err := controllerutils.UpdateStatus(ctx, c, obj); err != nil {
				errs = multierror.Append(errs, err)
			}
		}
	}
	if opts.NetworkingMeshGlooSoloIov1Alpha2VirtualMesh {
		for _, obj := range s.NetworkingMeshGlooSoloIov1Alpha2VirtualMeshes().List() {
			if _, err := controllerutils.UpdateStatus(ctx, c, obj); err != nil {
				errs = multierror.Append(errs, err)
			}
		}
	}
	if opts.NetworkingMeshGlooSoloIov1Alpha2FailoverService {
		for _, obj := range s.NetworkingMeshGlooSoloIov1Alpha2FailoverServices().List() {
			if _, err := controllerutils.UpdateStatus(ctx, c, obj); err != nil {
				errs = multierror.Append(errs, err)
			}
		}
	}

	if opts.NetworkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeployment {
		for _, obj := range s.NetworkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeployments().List() {
			if _, err := controllerutils.UpdateStatus(ctx, c, obj); err != nil {
				errs = multierror.Append(errs, err)
			}
		}
	}

	if opts.MulticlusterSoloIov1Alpha1KubernetesCluster {
		for _, obj := range s.MulticlusterSoloIov1Alpha1KubernetesClusters().List() {
			if _, err := controllerutils.UpdateStatus(ctx, c, obj); err != nil {
				errs = multierror.Append(errs, err)
			}
		}
	}
	return errs
}

func (s snapshotLocal) MarshalJSON() ([]byte, error) {
	snapshotMap := map[string]interface{}{"name": s.name}

	snapshotMap["settingsMeshGlooSoloIov1Alpha2Settings"] = s.settingsMeshGlooSoloIov1Alpha2Settings.List()
	snapshotMap["discoveryMeshGlooSoloIov1Alpha2TrafficTargets"] = s.discoveryMeshGlooSoloIov1Alpha2TrafficTargets.List()
	snapshotMap["discoveryMeshGlooSoloIov1Alpha2Workloads"] = s.discoveryMeshGlooSoloIov1Alpha2Workloads.List()
	snapshotMap["discoveryMeshGlooSoloIov1Alpha2Meshes"] = s.discoveryMeshGlooSoloIov1Alpha2Meshes.List()
	snapshotMap["networkingMeshGlooSoloIov1Alpha2TrafficPolicies"] = s.networkingMeshGlooSoloIov1Alpha2TrafficPolicies.List()
	snapshotMap["networkingMeshGlooSoloIov1Alpha2AccessPolicies"] = s.networkingMeshGlooSoloIov1Alpha2AccessPolicies.List()
	snapshotMap["networkingMeshGlooSoloIov1Alpha2VirtualMeshes"] = s.networkingMeshGlooSoloIov1Alpha2VirtualMeshes.List()
	snapshotMap["networkingMeshGlooSoloIov1Alpha2FailoverServices"] = s.networkingMeshGlooSoloIov1Alpha2FailoverServices.List()
	snapshotMap["networkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeployments"] = s.networkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeployments.List()
	snapshotMap["v1Secrets"] = s.v1Secrets.List()
	snapshotMap["multiclusterSoloIov1Alpha1KubernetesClusters"] = s.multiclusterSoloIov1Alpha1KubernetesClusters.List()
	return json.Marshal(snapshotMap)
}

// builds the input snapshot from API Clients.
type LocalBuilder interface {
	BuildSnapshot(ctx context.Context, name string, opts LocalBuildOptions) (LocalSnapshot, error)
}

// Options for building a snapshot
type LocalBuildOptions struct {

	// List options for composing a snapshot from SettingsMeshGlooSoloIov1Alpha2Settings
	SettingsMeshGlooSoloIov1Alpha2Settings ResourceLocalBuildOptions

	// List options for composing a snapshot from DiscoveryMeshGlooSoloIov1Alpha2TrafficTargets
	DiscoveryMeshGlooSoloIov1Alpha2TrafficTargets ResourceLocalBuildOptions
	// List options for composing a snapshot from DiscoveryMeshGlooSoloIov1Alpha2Workloads
	DiscoveryMeshGlooSoloIov1Alpha2Workloads ResourceLocalBuildOptions
	// List options for composing a snapshot from DiscoveryMeshGlooSoloIov1Alpha2Meshes
	DiscoveryMeshGlooSoloIov1Alpha2Meshes ResourceLocalBuildOptions

	// List options for composing a snapshot from NetworkingMeshGlooSoloIov1Alpha2TrafficPolicies
	NetworkingMeshGlooSoloIov1Alpha2TrafficPolicies ResourceLocalBuildOptions
	// List options for composing a snapshot from NetworkingMeshGlooSoloIov1Alpha2AccessPolicies
	NetworkingMeshGlooSoloIov1Alpha2AccessPolicies ResourceLocalBuildOptions
	// List options for composing a snapshot from NetworkingMeshGlooSoloIov1Alpha2VirtualMeshes
	NetworkingMeshGlooSoloIov1Alpha2VirtualMeshes ResourceLocalBuildOptions
	// List options for composing a snapshot from NetworkingMeshGlooSoloIov1Alpha2FailoverServices
	NetworkingMeshGlooSoloIov1Alpha2FailoverServices ResourceLocalBuildOptions

	// List options for composing a snapshot from NetworkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeployments
	NetworkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeployments ResourceLocalBuildOptions

	// List options for composing a snapshot from V1Secrets
	V1Secrets ResourceLocalBuildOptions

	// List options for composing a snapshot from MulticlusterSoloIov1Alpha1KubernetesClusters
	MulticlusterSoloIov1Alpha1KubernetesClusters ResourceLocalBuildOptions
}

// Options for reading resources of a given type
type ResourceLocalBuildOptions struct {

	// List options for composing a snapshot from a resource type
	ListOptions []client.ListOption

	// If provided, ensure the resource has been verified before adding it to snapshots
	Verifier verifier.ServerResourceVerifier
}

// build a snapshot from resources across multiple clusters
type multiClusterLocalBuilder struct {
	clusters multicluster.Interface
	client   multicluster.Client
}

// Produces snapshots of resources across all clusters defined in the ClusterSet
func NewMultiClusterLocalBuilder(
	clusters multicluster.Interface,
	client multicluster.Client,
) LocalBuilder {
	return &multiClusterLocalBuilder{
		clusters: clusters,
		client:   client,
	}
}

func (b *multiClusterLocalBuilder) BuildSnapshot(ctx context.Context, name string, opts LocalBuildOptions) (LocalSnapshot, error) {

	settingsMeshGlooSoloIov1Alpha2Settings := settings_mesh_gloo_solo_io_v1alpha2_sets.NewSettingsSet()

	discoveryMeshGlooSoloIov1Alpha2TrafficTargets := discovery_mesh_gloo_solo_io_v1alpha2_sets.NewTrafficTargetSet()
	discoveryMeshGlooSoloIov1Alpha2Workloads := discovery_mesh_gloo_solo_io_v1alpha2_sets.NewWorkloadSet()
	discoveryMeshGlooSoloIov1Alpha2Meshes := discovery_mesh_gloo_solo_io_v1alpha2_sets.NewMeshSet()

	networkingMeshGlooSoloIov1Alpha2TrafficPolicies := networking_mesh_gloo_solo_io_v1alpha2_sets.NewTrafficPolicySet()
	networkingMeshGlooSoloIov1Alpha2AccessPolicies := networking_mesh_gloo_solo_io_v1alpha2_sets.NewAccessPolicySet()
	networkingMeshGlooSoloIov1Alpha2VirtualMeshes := networking_mesh_gloo_solo_io_v1alpha2_sets.NewVirtualMeshSet()
	networkingMeshGlooSoloIov1Alpha2FailoverServices := networking_mesh_gloo_solo_io_v1alpha2_sets.NewFailoverServiceSet()

	networkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeployments := networking_enterprise_mesh_gloo_solo_io_v1alpha1_sets.NewWasmDeploymentSet()

	v1Secrets := v1_sets.NewSecretSet()

	multiclusterSoloIov1Alpha1KubernetesClusters := multicluster_solo_io_v1alpha1_sets.NewKubernetesClusterSet()

	var errs error

	for _, cluster := range b.clusters.ListClusters() {

		if err := b.insertSettingsMeshGlooSoloIov1Alpha2SettingsFromCluster(ctx, cluster, settingsMeshGlooSoloIov1Alpha2Settings, opts.SettingsMeshGlooSoloIov1Alpha2Settings); err != nil {
			errs = multierror.Append(errs, err)
		}
		if err := b.insertDiscoveryMeshGlooSoloIov1Alpha2TrafficTargetsFromCluster(ctx, cluster, discoveryMeshGlooSoloIov1Alpha2TrafficTargets, opts.DiscoveryMeshGlooSoloIov1Alpha2TrafficTargets); err != nil {
			errs = multierror.Append(errs, err)
		}
		if err := b.insertDiscoveryMeshGlooSoloIov1Alpha2WorkloadsFromCluster(ctx, cluster, discoveryMeshGlooSoloIov1Alpha2Workloads, opts.DiscoveryMeshGlooSoloIov1Alpha2Workloads); err != nil {
			errs = multierror.Append(errs, err)
		}
		if err := b.insertDiscoveryMeshGlooSoloIov1Alpha2MeshesFromCluster(ctx, cluster, discoveryMeshGlooSoloIov1Alpha2Meshes, opts.DiscoveryMeshGlooSoloIov1Alpha2Meshes); err != nil {
			errs = multierror.Append(errs, err)
		}
		if err := b.insertNetworkingMeshGlooSoloIov1Alpha2TrafficPoliciesFromCluster(ctx, cluster, networkingMeshGlooSoloIov1Alpha2TrafficPolicies, opts.NetworkingMeshGlooSoloIov1Alpha2TrafficPolicies); err != nil {
			errs = multierror.Append(errs, err)
		}
		if err := b.insertNetworkingMeshGlooSoloIov1Alpha2AccessPoliciesFromCluster(ctx, cluster, networkingMeshGlooSoloIov1Alpha2AccessPolicies, opts.NetworkingMeshGlooSoloIov1Alpha2AccessPolicies); err != nil {
			errs = multierror.Append(errs, err)
		}
		if err := b.insertNetworkingMeshGlooSoloIov1Alpha2VirtualMeshesFromCluster(ctx, cluster, networkingMeshGlooSoloIov1Alpha2VirtualMeshes, opts.NetworkingMeshGlooSoloIov1Alpha2VirtualMeshes); err != nil {
			errs = multierror.Append(errs, err)
		}
		if err := b.insertNetworkingMeshGlooSoloIov1Alpha2FailoverServicesFromCluster(ctx, cluster, networkingMeshGlooSoloIov1Alpha2FailoverServices, opts.NetworkingMeshGlooSoloIov1Alpha2FailoverServices); err != nil {
			errs = multierror.Append(errs, err)
		}
		if err := b.insertNetworkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeploymentsFromCluster(ctx, cluster, networkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeployments, opts.NetworkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeployments); err != nil {
			errs = multierror.Append(errs, err)
		}
		if err := b.insertV1SecretsFromCluster(ctx, cluster, v1Secrets, opts.V1Secrets); err != nil {
			errs = multierror.Append(errs, err)
		}
		if err := b.insertMulticlusterSoloIov1Alpha1KubernetesClustersFromCluster(ctx, cluster, multiclusterSoloIov1Alpha1KubernetesClusters, opts.MulticlusterSoloIov1Alpha1KubernetesClusters); err != nil {
			errs = multierror.Append(errs, err)
		}

	}

	outputSnap := NewLocalSnapshot(
		name,

		settingsMeshGlooSoloIov1Alpha2Settings,
		discoveryMeshGlooSoloIov1Alpha2TrafficTargets,
		discoveryMeshGlooSoloIov1Alpha2Workloads,
		discoveryMeshGlooSoloIov1Alpha2Meshes,
		networkingMeshGlooSoloIov1Alpha2TrafficPolicies,
		networkingMeshGlooSoloIov1Alpha2AccessPolicies,
		networkingMeshGlooSoloIov1Alpha2VirtualMeshes,
		networkingMeshGlooSoloIov1Alpha2FailoverServices,
		networkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeployments,
		v1Secrets,
		multiclusterSoloIov1Alpha1KubernetesClusters,
	)

	return outputSnap, errs
}

func (b *multiClusterLocalBuilder) insertSettingsMeshGlooSoloIov1Alpha2SettingsFromCluster(ctx context.Context, cluster string, settingsMeshGlooSoloIov1Alpha2Settings settings_mesh_gloo_solo_io_v1alpha2_sets.SettingsSet, opts ResourceLocalBuildOptions) error {
	settingsMeshGlooSoloIov1Alpha2SettingsClient, err := settings_mesh_gloo_solo_io_v1alpha2.NewMulticlusterSettingsClient(b.client).Cluster(cluster)
	if err != nil {
		return err
	}

	if opts.Verifier != nil {
		mgr, err := b.clusters.Cluster(cluster)
		if err != nil {
			return err
		}

		gvk := schema.GroupVersionKind{
			Group:   "settings.mesh.gloo.solo.io",
			Version: "v1alpha2",
			Kind:    "Settings",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			cluster,
			mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	settingsMeshGlooSoloIov1Alpha2SettingsList, err := settingsMeshGlooSoloIov1Alpha2SettingsClient.ListSettings(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range settingsMeshGlooSoloIov1Alpha2SettingsList.Items {
		item := item               // pike
		item.ClusterName = cluster // set cluster for in-memory processing
		settingsMeshGlooSoloIov1Alpha2Settings.Insert(&item)
	}

	return nil
}

func (b *multiClusterLocalBuilder) insertDiscoveryMeshGlooSoloIov1Alpha2TrafficTargetsFromCluster(ctx context.Context, cluster string, discoveryMeshGlooSoloIov1Alpha2TrafficTargets discovery_mesh_gloo_solo_io_v1alpha2_sets.TrafficTargetSet, opts ResourceLocalBuildOptions) error {
	discoveryMeshGlooSoloIov1Alpha2TrafficTargetClient, err := discovery_mesh_gloo_solo_io_v1alpha2.NewMulticlusterTrafficTargetClient(b.client).Cluster(cluster)
	if err != nil {
		return err
	}

	if opts.Verifier != nil {
		mgr, err := b.clusters.Cluster(cluster)
		if err != nil {
			return err
		}

		gvk := schema.GroupVersionKind{
			Group:   "discovery.mesh.gloo.solo.io",
			Version: "v1alpha2",
			Kind:    "TrafficTarget",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			cluster,
			mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	discoveryMeshGlooSoloIov1Alpha2TrafficTargetList, err := discoveryMeshGlooSoloIov1Alpha2TrafficTargetClient.ListTrafficTarget(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range discoveryMeshGlooSoloIov1Alpha2TrafficTargetList.Items {
		item := item               // pike
		item.ClusterName = cluster // set cluster for in-memory processing
		discoveryMeshGlooSoloIov1Alpha2TrafficTargets.Insert(&item)
	}

	return nil
}
func (b *multiClusterLocalBuilder) insertDiscoveryMeshGlooSoloIov1Alpha2WorkloadsFromCluster(ctx context.Context, cluster string, discoveryMeshGlooSoloIov1Alpha2Workloads discovery_mesh_gloo_solo_io_v1alpha2_sets.WorkloadSet, opts ResourceLocalBuildOptions) error {
	discoveryMeshGlooSoloIov1Alpha2WorkloadClient, err := discovery_mesh_gloo_solo_io_v1alpha2.NewMulticlusterWorkloadClient(b.client).Cluster(cluster)
	if err != nil {
		return err
	}

	if opts.Verifier != nil {
		mgr, err := b.clusters.Cluster(cluster)
		if err != nil {
			return err
		}

		gvk := schema.GroupVersionKind{
			Group:   "discovery.mesh.gloo.solo.io",
			Version: "v1alpha2",
			Kind:    "Workload",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			cluster,
			mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	discoveryMeshGlooSoloIov1Alpha2WorkloadList, err := discoveryMeshGlooSoloIov1Alpha2WorkloadClient.ListWorkload(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range discoveryMeshGlooSoloIov1Alpha2WorkloadList.Items {
		item := item               // pike
		item.ClusterName = cluster // set cluster for in-memory processing
		discoveryMeshGlooSoloIov1Alpha2Workloads.Insert(&item)
	}

	return nil
}
func (b *multiClusterLocalBuilder) insertDiscoveryMeshGlooSoloIov1Alpha2MeshesFromCluster(ctx context.Context, cluster string, discoveryMeshGlooSoloIov1Alpha2Meshes discovery_mesh_gloo_solo_io_v1alpha2_sets.MeshSet, opts ResourceLocalBuildOptions) error {
	discoveryMeshGlooSoloIov1Alpha2MeshClient, err := discovery_mesh_gloo_solo_io_v1alpha2.NewMulticlusterMeshClient(b.client).Cluster(cluster)
	if err != nil {
		return err
	}

	if opts.Verifier != nil {
		mgr, err := b.clusters.Cluster(cluster)
		if err != nil {
			return err
		}

		gvk := schema.GroupVersionKind{
			Group:   "discovery.mesh.gloo.solo.io",
			Version: "v1alpha2",
			Kind:    "Mesh",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			cluster,
			mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	discoveryMeshGlooSoloIov1Alpha2MeshList, err := discoveryMeshGlooSoloIov1Alpha2MeshClient.ListMesh(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range discoveryMeshGlooSoloIov1Alpha2MeshList.Items {
		item := item               // pike
		item.ClusterName = cluster // set cluster for in-memory processing
		discoveryMeshGlooSoloIov1Alpha2Meshes.Insert(&item)
	}

	return nil
}

func (b *multiClusterLocalBuilder) insertNetworkingMeshGlooSoloIov1Alpha2TrafficPoliciesFromCluster(ctx context.Context, cluster string, networkingMeshGlooSoloIov1Alpha2TrafficPolicies networking_mesh_gloo_solo_io_v1alpha2_sets.TrafficPolicySet, opts ResourceLocalBuildOptions) error {
	networkingMeshGlooSoloIov1Alpha2TrafficPolicyClient, err := networking_mesh_gloo_solo_io_v1alpha2.NewMulticlusterTrafficPolicyClient(b.client).Cluster(cluster)
	if err != nil {
		return err
	}

	if opts.Verifier != nil {
		mgr, err := b.clusters.Cluster(cluster)
		if err != nil {
			return err
		}

		gvk := schema.GroupVersionKind{
			Group:   "networking.mesh.gloo.solo.io",
			Version: "v1alpha2",
			Kind:    "TrafficPolicy",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			cluster,
			mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	networkingMeshGlooSoloIov1Alpha2TrafficPolicyList, err := networkingMeshGlooSoloIov1Alpha2TrafficPolicyClient.ListTrafficPolicy(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range networkingMeshGlooSoloIov1Alpha2TrafficPolicyList.Items {
		item := item               // pike
		item.ClusterName = cluster // set cluster for in-memory processing
		networkingMeshGlooSoloIov1Alpha2TrafficPolicies.Insert(&item)
	}

	return nil
}
func (b *multiClusterLocalBuilder) insertNetworkingMeshGlooSoloIov1Alpha2AccessPoliciesFromCluster(ctx context.Context, cluster string, networkingMeshGlooSoloIov1Alpha2AccessPolicies networking_mesh_gloo_solo_io_v1alpha2_sets.AccessPolicySet, opts ResourceLocalBuildOptions) error {
	networkingMeshGlooSoloIov1Alpha2AccessPolicyClient, err := networking_mesh_gloo_solo_io_v1alpha2.NewMulticlusterAccessPolicyClient(b.client).Cluster(cluster)
	if err != nil {
		return err
	}

	if opts.Verifier != nil {
		mgr, err := b.clusters.Cluster(cluster)
		if err != nil {
			return err
		}

		gvk := schema.GroupVersionKind{
			Group:   "networking.mesh.gloo.solo.io",
			Version: "v1alpha2",
			Kind:    "AccessPolicy",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			cluster,
			mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	networkingMeshGlooSoloIov1Alpha2AccessPolicyList, err := networkingMeshGlooSoloIov1Alpha2AccessPolicyClient.ListAccessPolicy(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range networkingMeshGlooSoloIov1Alpha2AccessPolicyList.Items {
		item := item               // pike
		item.ClusterName = cluster // set cluster for in-memory processing
		networkingMeshGlooSoloIov1Alpha2AccessPolicies.Insert(&item)
	}

	return nil
}
func (b *multiClusterLocalBuilder) insertNetworkingMeshGlooSoloIov1Alpha2VirtualMeshesFromCluster(ctx context.Context, cluster string, networkingMeshGlooSoloIov1Alpha2VirtualMeshes networking_mesh_gloo_solo_io_v1alpha2_sets.VirtualMeshSet, opts ResourceLocalBuildOptions) error {
	networkingMeshGlooSoloIov1Alpha2VirtualMeshClient, err := networking_mesh_gloo_solo_io_v1alpha2.NewMulticlusterVirtualMeshClient(b.client).Cluster(cluster)
	if err != nil {
		return err
	}

	if opts.Verifier != nil {
		mgr, err := b.clusters.Cluster(cluster)
		if err != nil {
			return err
		}

		gvk := schema.GroupVersionKind{
			Group:   "networking.mesh.gloo.solo.io",
			Version: "v1alpha2",
			Kind:    "VirtualMesh",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			cluster,
			mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	networkingMeshGlooSoloIov1Alpha2VirtualMeshList, err := networkingMeshGlooSoloIov1Alpha2VirtualMeshClient.ListVirtualMesh(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range networkingMeshGlooSoloIov1Alpha2VirtualMeshList.Items {
		item := item               // pike
		item.ClusterName = cluster // set cluster for in-memory processing
		networkingMeshGlooSoloIov1Alpha2VirtualMeshes.Insert(&item)
	}

	return nil
}
func (b *multiClusterLocalBuilder) insertNetworkingMeshGlooSoloIov1Alpha2FailoverServicesFromCluster(ctx context.Context, cluster string, networkingMeshGlooSoloIov1Alpha2FailoverServices networking_mesh_gloo_solo_io_v1alpha2_sets.FailoverServiceSet, opts ResourceLocalBuildOptions) error {
	networkingMeshGlooSoloIov1Alpha2FailoverServiceClient, err := networking_mesh_gloo_solo_io_v1alpha2.NewMulticlusterFailoverServiceClient(b.client).Cluster(cluster)
	if err != nil {
		return err
	}

	if opts.Verifier != nil {
		mgr, err := b.clusters.Cluster(cluster)
		if err != nil {
			return err
		}

		gvk := schema.GroupVersionKind{
			Group:   "networking.mesh.gloo.solo.io",
			Version: "v1alpha2",
			Kind:    "FailoverService",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			cluster,
			mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	networkingMeshGlooSoloIov1Alpha2FailoverServiceList, err := networkingMeshGlooSoloIov1Alpha2FailoverServiceClient.ListFailoverService(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range networkingMeshGlooSoloIov1Alpha2FailoverServiceList.Items {
		item := item               // pike
		item.ClusterName = cluster // set cluster for in-memory processing
		networkingMeshGlooSoloIov1Alpha2FailoverServices.Insert(&item)
	}

	return nil
}

func (b *multiClusterLocalBuilder) insertNetworkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeploymentsFromCluster(ctx context.Context, cluster string, networkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeployments networking_enterprise_mesh_gloo_solo_io_v1alpha1_sets.WasmDeploymentSet, opts ResourceLocalBuildOptions) error {
	networkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeploymentClient, err := networking_enterprise_mesh_gloo_solo_io_v1alpha1.NewMulticlusterWasmDeploymentClient(b.client).Cluster(cluster)
	if err != nil {
		return err
	}

	if opts.Verifier != nil {
		mgr, err := b.clusters.Cluster(cluster)
		if err != nil {
			return err
		}

		gvk := schema.GroupVersionKind{
			Group:   "networking.enterprise.mesh.gloo.solo.io",
			Version: "v1alpha1",
			Kind:    "WasmDeployment",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			cluster,
			mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	networkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeploymentList, err := networkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeploymentClient.ListWasmDeployment(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range networkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeploymentList.Items {
		item := item               // pike
		item.ClusterName = cluster // set cluster for in-memory processing
		networkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeployments.Insert(&item)
	}

	return nil
}

func (b *multiClusterLocalBuilder) insertV1SecretsFromCluster(ctx context.Context, cluster string, v1Secrets v1_sets.SecretSet, opts ResourceLocalBuildOptions) error {
	v1SecretClient, err := v1.NewMulticlusterSecretClient(b.client).Cluster(cluster)
	if err != nil {
		return err
	}

	if opts.Verifier != nil {
		mgr, err := b.clusters.Cluster(cluster)
		if err != nil {
			return err
		}

		gvk := schema.GroupVersionKind{
			Group:   "",
			Version: "v1",
			Kind:    "Secret",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			cluster,
			mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	v1SecretList, err := v1SecretClient.ListSecret(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range v1SecretList.Items {
		item := item               // pike
		item.ClusterName = cluster // set cluster for in-memory processing
		v1Secrets.Insert(&item)
	}

	return nil
}

func (b *multiClusterLocalBuilder) insertMulticlusterSoloIov1Alpha1KubernetesClustersFromCluster(ctx context.Context, cluster string, multiclusterSoloIov1Alpha1KubernetesClusters multicluster_solo_io_v1alpha1_sets.KubernetesClusterSet, opts ResourceLocalBuildOptions) error {
	multiclusterSoloIov1Alpha1KubernetesClusterClient, err := multicluster_solo_io_v1alpha1.NewMulticlusterKubernetesClusterClient(b.client).Cluster(cluster)
	if err != nil {
		return err
	}

	if opts.Verifier != nil {
		mgr, err := b.clusters.Cluster(cluster)
		if err != nil {
			return err
		}

		gvk := schema.GroupVersionKind{
			Group:   "multicluster.solo.io",
			Version: "v1alpha1",
			Kind:    "KubernetesCluster",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			cluster,
			mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	multiclusterSoloIov1Alpha1KubernetesClusterList, err := multiclusterSoloIov1Alpha1KubernetesClusterClient.ListKubernetesCluster(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range multiclusterSoloIov1Alpha1KubernetesClusterList.Items {
		item := item               // pike
		item.ClusterName = cluster // set cluster for in-memory processing
		multiclusterSoloIov1Alpha1KubernetesClusters.Insert(&item)
	}

	return nil
}

// build a snapshot from resources in a single cluster
type singleClusterLocalBuilder struct {
	mgr         manager.Manager
	clusterName string
}

// Produces snapshots of resources read from the manager for the given cluster
func NewSingleClusterLocalBuilder(
	mgr manager.Manager,
) LocalBuilder {
	return NewSingleClusterLocalBuilderWithClusterName(mgr, "")
}

// Produces snapshots of resources read from the manager for the given cluster.
// Snapshot resources will be marked with the given ClusterName.
func NewSingleClusterLocalBuilderWithClusterName(
	mgr manager.Manager,
	clusterName string,
) LocalBuilder {
	return &singleClusterLocalBuilder{
		mgr:         mgr,
		clusterName: clusterName,
	}
}

func (b *singleClusterLocalBuilder) BuildSnapshot(ctx context.Context, name string, opts LocalBuildOptions) (LocalSnapshot, error) {

	settingsMeshGlooSoloIov1Alpha2Settings := settings_mesh_gloo_solo_io_v1alpha2_sets.NewSettingsSet()

	discoveryMeshGlooSoloIov1Alpha2TrafficTargets := discovery_mesh_gloo_solo_io_v1alpha2_sets.NewTrafficTargetSet()
	discoveryMeshGlooSoloIov1Alpha2Workloads := discovery_mesh_gloo_solo_io_v1alpha2_sets.NewWorkloadSet()
	discoveryMeshGlooSoloIov1Alpha2Meshes := discovery_mesh_gloo_solo_io_v1alpha2_sets.NewMeshSet()

	networkingMeshGlooSoloIov1Alpha2TrafficPolicies := networking_mesh_gloo_solo_io_v1alpha2_sets.NewTrafficPolicySet()
	networkingMeshGlooSoloIov1Alpha2AccessPolicies := networking_mesh_gloo_solo_io_v1alpha2_sets.NewAccessPolicySet()
	networkingMeshGlooSoloIov1Alpha2VirtualMeshes := networking_mesh_gloo_solo_io_v1alpha2_sets.NewVirtualMeshSet()
	networkingMeshGlooSoloIov1Alpha2FailoverServices := networking_mesh_gloo_solo_io_v1alpha2_sets.NewFailoverServiceSet()

	networkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeployments := networking_enterprise_mesh_gloo_solo_io_v1alpha1_sets.NewWasmDeploymentSet()

	v1Secrets := v1_sets.NewSecretSet()

	multiclusterSoloIov1Alpha1KubernetesClusters := multicluster_solo_io_v1alpha1_sets.NewKubernetesClusterSet()

	var errs error

	if err := b.insertSettingsMeshGlooSoloIov1Alpha2Settings(ctx, settingsMeshGlooSoloIov1Alpha2Settings, opts.SettingsMeshGlooSoloIov1Alpha2Settings); err != nil {
		errs = multierror.Append(errs, err)
	}
	if err := b.insertDiscoveryMeshGlooSoloIov1Alpha2TrafficTargets(ctx, discoveryMeshGlooSoloIov1Alpha2TrafficTargets, opts.DiscoveryMeshGlooSoloIov1Alpha2TrafficTargets); err != nil {
		errs = multierror.Append(errs, err)
	}
	if err := b.insertDiscoveryMeshGlooSoloIov1Alpha2Workloads(ctx, discoveryMeshGlooSoloIov1Alpha2Workloads, opts.DiscoveryMeshGlooSoloIov1Alpha2Workloads); err != nil {
		errs = multierror.Append(errs, err)
	}
	if err := b.insertDiscoveryMeshGlooSoloIov1Alpha2Meshes(ctx, discoveryMeshGlooSoloIov1Alpha2Meshes, opts.DiscoveryMeshGlooSoloIov1Alpha2Meshes); err != nil {
		errs = multierror.Append(errs, err)
	}
	if err := b.insertNetworkingMeshGlooSoloIov1Alpha2TrafficPolicies(ctx, networkingMeshGlooSoloIov1Alpha2TrafficPolicies, opts.NetworkingMeshGlooSoloIov1Alpha2TrafficPolicies); err != nil {
		errs = multierror.Append(errs, err)
	}
	if err := b.insertNetworkingMeshGlooSoloIov1Alpha2AccessPolicies(ctx, networkingMeshGlooSoloIov1Alpha2AccessPolicies, opts.NetworkingMeshGlooSoloIov1Alpha2AccessPolicies); err != nil {
		errs = multierror.Append(errs, err)
	}
	if err := b.insertNetworkingMeshGlooSoloIov1Alpha2VirtualMeshes(ctx, networkingMeshGlooSoloIov1Alpha2VirtualMeshes, opts.NetworkingMeshGlooSoloIov1Alpha2VirtualMeshes); err != nil {
		errs = multierror.Append(errs, err)
	}
	if err := b.insertNetworkingMeshGlooSoloIov1Alpha2FailoverServices(ctx, networkingMeshGlooSoloIov1Alpha2FailoverServices, opts.NetworkingMeshGlooSoloIov1Alpha2FailoverServices); err != nil {
		errs = multierror.Append(errs, err)
	}
	if err := b.insertNetworkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeployments(ctx, networkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeployments, opts.NetworkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeployments); err != nil {
		errs = multierror.Append(errs, err)
	}
	if err := b.insertV1Secrets(ctx, v1Secrets, opts.V1Secrets); err != nil {
		errs = multierror.Append(errs, err)
	}
	if err := b.insertMulticlusterSoloIov1Alpha1KubernetesClusters(ctx, multiclusterSoloIov1Alpha1KubernetesClusters, opts.MulticlusterSoloIov1Alpha1KubernetesClusters); err != nil {
		errs = multierror.Append(errs, err)
	}

	outputSnap := NewLocalSnapshot(
		name,

		settingsMeshGlooSoloIov1Alpha2Settings,
		discoveryMeshGlooSoloIov1Alpha2TrafficTargets,
		discoveryMeshGlooSoloIov1Alpha2Workloads,
		discoveryMeshGlooSoloIov1Alpha2Meshes,
		networkingMeshGlooSoloIov1Alpha2TrafficPolicies,
		networkingMeshGlooSoloIov1Alpha2AccessPolicies,
		networkingMeshGlooSoloIov1Alpha2VirtualMeshes,
		networkingMeshGlooSoloIov1Alpha2FailoverServices,
		networkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeployments,
		v1Secrets,
		multiclusterSoloIov1Alpha1KubernetesClusters,
	)

	return outputSnap, errs
}

func (b *singleClusterLocalBuilder) insertSettingsMeshGlooSoloIov1Alpha2Settings(ctx context.Context, settingsMeshGlooSoloIov1Alpha2Settings settings_mesh_gloo_solo_io_v1alpha2_sets.SettingsSet, opts ResourceLocalBuildOptions) error {

	if opts.Verifier != nil {
		gvk := schema.GroupVersionKind{
			Group:   "settings.mesh.gloo.solo.io",
			Version: "v1alpha2",
			Kind:    "Settings",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			"", // verify in the local cluster
			b.mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	settingsMeshGlooSoloIov1Alpha2SettingsList, err := settings_mesh_gloo_solo_io_v1alpha2.NewSettingsClient(b.mgr.GetClient()).ListSettings(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range settingsMeshGlooSoloIov1Alpha2SettingsList.Items {
		item := item // pike
		item.ClusterName = b.clusterName
		settingsMeshGlooSoloIov1Alpha2Settings.Insert(&item)
	}

	return nil
}

func (b *singleClusterLocalBuilder) insertDiscoveryMeshGlooSoloIov1Alpha2TrafficTargets(ctx context.Context, discoveryMeshGlooSoloIov1Alpha2TrafficTargets discovery_mesh_gloo_solo_io_v1alpha2_sets.TrafficTargetSet, opts ResourceLocalBuildOptions) error {

	if opts.Verifier != nil {
		gvk := schema.GroupVersionKind{
			Group:   "discovery.mesh.gloo.solo.io",
			Version: "v1alpha2",
			Kind:    "TrafficTarget",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			"", // verify in the local cluster
			b.mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	discoveryMeshGlooSoloIov1Alpha2TrafficTargetList, err := discovery_mesh_gloo_solo_io_v1alpha2.NewTrafficTargetClient(b.mgr.GetClient()).ListTrafficTarget(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range discoveryMeshGlooSoloIov1Alpha2TrafficTargetList.Items {
		item := item // pike
		item.ClusterName = b.clusterName
		discoveryMeshGlooSoloIov1Alpha2TrafficTargets.Insert(&item)
	}

	return nil
}
func (b *singleClusterLocalBuilder) insertDiscoveryMeshGlooSoloIov1Alpha2Workloads(ctx context.Context, discoveryMeshGlooSoloIov1Alpha2Workloads discovery_mesh_gloo_solo_io_v1alpha2_sets.WorkloadSet, opts ResourceLocalBuildOptions) error {

	if opts.Verifier != nil {
		gvk := schema.GroupVersionKind{
			Group:   "discovery.mesh.gloo.solo.io",
			Version: "v1alpha2",
			Kind:    "Workload",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			"", // verify in the local cluster
			b.mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	discoveryMeshGlooSoloIov1Alpha2WorkloadList, err := discovery_mesh_gloo_solo_io_v1alpha2.NewWorkloadClient(b.mgr.GetClient()).ListWorkload(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range discoveryMeshGlooSoloIov1Alpha2WorkloadList.Items {
		item := item // pike
		item.ClusterName = b.clusterName
		discoveryMeshGlooSoloIov1Alpha2Workloads.Insert(&item)
	}

	return nil
}
func (b *singleClusterLocalBuilder) insertDiscoveryMeshGlooSoloIov1Alpha2Meshes(ctx context.Context, discoveryMeshGlooSoloIov1Alpha2Meshes discovery_mesh_gloo_solo_io_v1alpha2_sets.MeshSet, opts ResourceLocalBuildOptions) error {

	if opts.Verifier != nil {
		gvk := schema.GroupVersionKind{
			Group:   "discovery.mesh.gloo.solo.io",
			Version: "v1alpha2",
			Kind:    "Mesh",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			"", // verify in the local cluster
			b.mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	discoveryMeshGlooSoloIov1Alpha2MeshList, err := discovery_mesh_gloo_solo_io_v1alpha2.NewMeshClient(b.mgr.GetClient()).ListMesh(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range discoveryMeshGlooSoloIov1Alpha2MeshList.Items {
		item := item // pike
		item.ClusterName = b.clusterName
		discoveryMeshGlooSoloIov1Alpha2Meshes.Insert(&item)
	}

	return nil
}

func (b *singleClusterLocalBuilder) insertNetworkingMeshGlooSoloIov1Alpha2TrafficPolicies(ctx context.Context, networkingMeshGlooSoloIov1Alpha2TrafficPolicies networking_mesh_gloo_solo_io_v1alpha2_sets.TrafficPolicySet, opts ResourceLocalBuildOptions) error {

	if opts.Verifier != nil {
		gvk := schema.GroupVersionKind{
			Group:   "networking.mesh.gloo.solo.io",
			Version: "v1alpha2",
			Kind:    "TrafficPolicy",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			"", // verify in the local cluster
			b.mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	networkingMeshGlooSoloIov1Alpha2TrafficPolicyList, err := networking_mesh_gloo_solo_io_v1alpha2.NewTrafficPolicyClient(b.mgr.GetClient()).ListTrafficPolicy(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range networkingMeshGlooSoloIov1Alpha2TrafficPolicyList.Items {
		item := item // pike
		item.ClusterName = b.clusterName
		networkingMeshGlooSoloIov1Alpha2TrafficPolicies.Insert(&item)
	}

	return nil
}
func (b *singleClusterLocalBuilder) insertNetworkingMeshGlooSoloIov1Alpha2AccessPolicies(ctx context.Context, networkingMeshGlooSoloIov1Alpha2AccessPolicies networking_mesh_gloo_solo_io_v1alpha2_sets.AccessPolicySet, opts ResourceLocalBuildOptions) error {

	if opts.Verifier != nil {
		gvk := schema.GroupVersionKind{
			Group:   "networking.mesh.gloo.solo.io",
			Version: "v1alpha2",
			Kind:    "AccessPolicy",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			"", // verify in the local cluster
			b.mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	networkingMeshGlooSoloIov1Alpha2AccessPolicyList, err := networking_mesh_gloo_solo_io_v1alpha2.NewAccessPolicyClient(b.mgr.GetClient()).ListAccessPolicy(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range networkingMeshGlooSoloIov1Alpha2AccessPolicyList.Items {
		item := item // pike
		item.ClusterName = b.clusterName
		networkingMeshGlooSoloIov1Alpha2AccessPolicies.Insert(&item)
	}

	return nil
}
func (b *singleClusterLocalBuilder) insertNetworkingMeshGlooSoloIov1Alpha2VirtualMeshes(ctx context.Context, networkingMeshGlooSoloIov1Alpha2VirtualMeshes networking_mesh_gloo_solo_io_v1alpha2_sets.VirtualMeshSet, opts ResourceLocalBuildOptions) error {

	if opts.Verifier != nil {
		gvk := schema.GroupVersionKind{
			Group:   "networking.mesh.gloo.solo.io",
			Version: "v1alpha2",
			Kind:    "VirtualMesh",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			"", // verify in the local cluster
			b.mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	networkingMeshGlooSoloIov1Alpha2VirtualMeshList, err := networking_mesh_gloo_solo_io_v1alpha2.NewVirtualMeshClient(b.mgr.GetClient()).ListVirtualMesh(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range networkingMeshGlooSoloIov1Alpha2VirtualMeshList.Items {
		item := item // pike
		item.ClusterName = b.clusterName
		networkingMeshGlooSoloIov1Alpha2VirtualMeshes.Insert(&item)
	}

	return nil
}
func (b *singleClusterLocalBuilder) insertNetworkingMeshGlooSoloIov1Alpha2FailoverServices(ctx context.Context, networkingMeshGlooSoloIov1Alpha2FailoverServices networking_mesh_gloo_solo_io_v1alpha2_sets.FailoverServiceSet, opts ResourceLocalBuildOptions) error {

	if opts.Verifier != nil {
		gvk := schema.GroupVersionKind{
			Group:   "networking.mesh.gloo.solo.io",
			Version: "v1alpha2",
			Kind:    "FailoverService",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			"", // verify in the local cluster
			b.mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	networkingMeshGlooSoloIov1Alpha2FailoverServiceList, err := networking_mesh_gloo_solo_io_v1alpha2.NewFailoverServiceClient(b.mgr.GetClient()).ListFailoverService(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range networkingMeshGlooSoloIov1Alpha2FailoverServiceList.Items {
		item := item // pike
		item.ClusterName = b.clusterName
		networkingMeshGlooSoloIov1Alpha2FailoverServices.Insert(&item)
	}

	return nil
}

func (b *singleClusterLocalBuilder) insertNetworkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeployments(ctx context.Context, networkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeployments networking_enterprise_mesh_gloo_solo_io_v1alpha1_sets.WasmDeploymentSet, opts ResourceLocalBuildOptions) error {

	if opts.Verifier != nil {
		gvk := schema.GroupVersionKind{
			Group:   "networking.enterprise.mesh.gloo.solo.io",
			Version: "v1alpha1",
			Kind:    "WasmDeployment",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			"", // verify in the local cluster
			b.mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	networkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeploymentList, err := networking_enterprise_mesh_gloo_solo_io_v1alpha1.NewWasmDeploymentClient(b.mgr.GetClient()).ListWasmDeployment(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range networkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeploymentList.Items {
		item := item // pike
		item.ClusterName = b.clusterName
		networkingEnterpriseMeshGlooSoloIov1Alpha1WasmDeployments.Insert(&item)
	}

	return nil
}

func (b *singleClusterLocalBuilder) insertV1Secrets(ctx context.Context, v1Secrets v1_sets.SecretSet, opts ResourceLocalBuildOptions) error {

	if opts.Verifier != nil {
		gvk := schema.GroupVersionKind{
			Group:   "",
			Version: "v1",
			Kind:    "Secret",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			"", // verify in the local cluster
			b.mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	v1SecretList, err := v1.NewSecretClient(b.mgr.GetClient()).ListSecret(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range v1SecretList.Items {
		item := item // pike
		item.ClusterName = b.clusterName
		v1Secrets.Insert(&item)
	}

	return nil
}

func (b *singleClusterLocalBuilder) insertMulticlusterSoloIov1Alpha1KubernetesClusters(ctx context.Context, multiclusterSoloIov1Alpha1KubernetesClusters multicluster_solo_io_v1alpha1_sets.KubernetesClusterSet, opts ResourceLocalBuildOptions) error {

	if opts.Verifier != nil {
		gvk := schema.GroupVersionKind{
			Group:   "multicluster.solo.io",
			Version: "v1alpha1",
			Kind:    "KubernetesCluster",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			"", // verify in the local cluster
			b.mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	multiclusterSoloIov1Alpha1KubernetesClusterList, err := multicluster_solo_io_v1alpha1.NewKubernetesClusterClient(b.mgr.GetClient()).ListKubernetesCluster(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range multiclusterSoloIov1Alpha1KubernetesClusterList.Items {
		item := item // pike
		item.ClusterName = b.clusterName
		multiclusterSoloIov1Alpha1KubernetesClusters.Insert(&item)
	}

	return nil
}
