// Code generated by MockGen. DO NOT EDIT.
// Source: ./snapshot.go

// Package mock_certagent is a generated GoMock package.
package mock_certagent

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1sets "github.com/solo-io/external-apis/pkg/api/k8s/core/v1/sets"
	certagent "github.com/solo-io/gloo-mesh/pkg/api/certificates.mesh.gloo.solo.io/agent/output/certagent"
	v1alpha2 "github.com/solo-io/gloo-mesh/pkg/api/certificates.mesh.gloo.solo.io/v1alpha2"
	v1alpha2sets "github.com/solo-io/gloo-mesh/pkg/api/certificates.mesh.gloo.solo.io/v1alpha2/sets"
	output "github.com/solo-io/skv2/contrib/pkg/output"
	multicluster "github.com/solo-io/skv2/pkg/multicluster"
	v1 "k8s.io/api/core/v1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockSnapshot is a mock of Snapshot interface
type MockSnapshot struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotMockRecorder
}

// MockSnapshotMockRecorder is the mock recorder for MockSnapshot
type MockSnapshotMockRecorder struct {
	mock *MockSnapshot
}

// NewMockSnapshot creates a new mock instance
func NewMockSnapshot(ctrl *gomock.Controller) *MockSnapshot {
	mock := &MockSnapshot{ctrl: ctrl}
	mock.recorder = &MockSnapshotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSnapshot) EXPECT() *MockSnapshotMockRecorder {
	return m.recorder
}

// CertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests mocks base method
func (m *MockSnapshot) CertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests() []certagent.LabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests")
	ret0, _ := ret[0].([]certagent.LabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet)
	return ret0
}

// CertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests indicates an expected call of CertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests
func (mr *MockSnapshotMockRecorder) CertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests", reflect.TypeOf((*MockSnapshot)(nil).CertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests))
}

// V1_Secrets mocks base method
func (m *MockSnapshot) V1_Secrets() []certagent.LabeledV1_SecretSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V1_Secrets")
	ret0, _ := ret[0].([]certagent.LabeledV1_SecretSet)
	return ret0
}

// V1_Secrets indicates an expected call of V1_Secrets
func (mr *MockSnapshotMockRecorder) V1_Secrets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V1_Secrets", reflect.TypeOf((*MockSnapshot)(nil).V1_Secrets))
}

// ApplyLocalCluster mocks base method
func (m *MockSnapshot) ApplyLocalCluster(ctx context.Context, clusterClient client.Client, errHandler output.ErrorHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ApplyLocalCluster", ctx, clusterClient, errHandler)
}

// ApplyLocalCluster indicates an expected call of ApplyLocalCluster
func (mr *MockSnapshotMockRecorder) ApplyLocalCluster(ctx, clusterClient, errHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyLocalCluster", reflect.TypeOf((*MockSnapshot)(nil).ApplyLocalCluster), ctx, clusterClient, errHandler)
}

// ApplyMultiCluster mocks base method
func (m *MockSnapshot) ApplyMultiCluster(ctx context.Context, multiClusterClient multicluster.Client, errHandler output.ErrorHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ApplyMultiCluster", ctx, multiClusterClient, errHandler)
}

// ApplyMultiCluster indicates an expected call of ApplyMultiCluster
func (mr *MockSnapshotMockRecorder) ApplyMultiCluster(ctx, multiClusterClient, errHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyMultiCluster", reflect.TypeOf((*MockSnapshot)(nil).ApplyMultiCluster), ctx, multiClusterClient, errHandler)
}

// MarshalJSON mocks base method
func (m *MockSnapshot) MarshalJSON() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalJSON")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalJSON indicates an expected call of MarshalJSON
func (mr *MockSnapshotMockRecorder) MarshalJSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalJSON", reflect.TypeOf((*MockSnapshot)(nil).MarshalJSON))
}

// MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet is a mock of LabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet interface
type MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSetMockRecorder
}

// MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSetMockRecorder is the mock recorder for MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet
type MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSetMockRecorder struct {
	mock *MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet
}

// NewMockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet creates a new mock instance
func NewMockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet(ctrl *gomock.Controller) *MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet {
	mock := &MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet{ctrl: ctrl}
	mock.recorder = &MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet) EXPECT() *MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet) Set() v1alpha2sets.CertificateRequestSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha2sets.CertificateRequestSet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet)(nil).Generic))
}

// MockLabeledV1_SecretSet is a mock of LabeledV1_SecretSet interface
type MockLabeledV1_SecretSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledV1_SecretSetMockRecorder
}

// MockLabeledV1_SecretSetMockRecorder is the mock recorder for MockLabeledV1_SecretSet
type MockLabeledV1_SecretSetMockRecorder struct {
	mock *MockLabeledV1_SecretSet
}

// NewMockLabeledV1_SecretSet creates a new mock instance
func NewMockLabeledV1_SecretSet(ctrl *gomock.Controller) *MockLabeledV1_SecretSet {
	mock := &MockLabeledV1_SecretSet{ctrl: ctrl}
	mock.recorder = &MockLabeledV1_SecretSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledV1_SecretSet) EXPECT() *MockLabeledV1_SecretSetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledV1_SecretSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledV1_SecretSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledV1_SecretSet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledV1_SecretSet) Set() v1sets.SecretSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1sets.SecretSet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledV1_SecretSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledV1_SecretSet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledV1_SecretSet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledV1_SecretSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledV1_SecretSet)(nil).Generic))
}

// MockBuilder is a mock of Builder interface
type MockBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockBuilderMockRecorder
}

// MockBuilderMockRecorder is the mock recorder for MockBuilder
type MockBuilderMockRecorder struct {
	mock *MockBuilder
}

// NewMockBuilder creates a new mock instance
func NewMockBuilder(ctrl *gomock.Controller) *MockBuilder {
	mock := &MockBuilder{ctrl: ctrl}
	mock.recorder = &MockBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBuilder) EXPECT() *MockBuilderMockRecorder {
	return m.recorder
}

// AddCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests mocks base method
func (m *MockBuilder) AddCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests(certificatesMeshGlooSoloIoV1Alpha2CertificateRequests ...*v1alpha2.CertificateRequest) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range certificatesMeshGlooSoloIoV1Alpha2CertificateRequests {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests", varargs...)
}

// AddCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests indicates an expected call of AddCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests
func (mr *MockBuilderMockRecorder) AddCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests(certificatesMeshGlooSoloIoV1Alpha2CertificateRequests ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests", reflect.TypeOf((*MockBuilder)(nil).AddCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests), certificatesMeshGlooSoloIoV1Alpha2CertificateRequests...)
}

// GetCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests mocks base method
func (m *MockBuilder) GetCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests() v1alpha2sets.CertificateRequestSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests")
	ret0, _ := ret[0].(v1alpha2sets.CertificateRequestSet)
	return ret0
}

// GetCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests indicates an expected call of GetCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests
func (mr *MockBuilderMockRecorder) GetCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests", reflect.TypeOf((*MockBuilder)(nil).GetCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests))
}

// AddV1_Secrets mocks base method
func (m *MockBuilder) AddV1_Secrets(v1Secrets ...*v1.Secret) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range v1Secrets {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddV1_Secrets", varargs...)
}

// AddV1_Secrets indicates an expected call of AddV1_Secrets
func (mr *MockBuilderMockRecorder) AddV1_Secrets(v1Secrets ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddV1_Secrets", reflect.TypeOf((*MockBuilder)(nil).AddV1_Secrets), v1Secrets...)
}

// GetV1_Secrets mocks base method
func (m *MockBuilder) GetV1_Secrets() v1sets.SecretSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV1_Secrets")
	ret0, _ := ret[0].(v1sets.SecretSet)
	return ret0
}

// GetV1_Secrets indicates an expected call of GetV1_Secrets
func (mr *MockBuilderMockRecorder) GetV1_Secrets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV1_Secrets", reflect.TypeOf((*MockBuilder)(nil).GetV1_Secrets))
}

// BuildLabelPartitionedSnapshot mocks base method
func (m *MockBuilder) BuildLabelPartitionedSnapshot(labelKey string) (certagent.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildLabelPartitionedSnapshot", labelKey)
	ret0, _ := ret[0].(certagent.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildLabelPartitionedSnapshot indicates an expected call of BuildLabelPartitionedSnapshot
func (mr *MockBuilderMockRecorder) BuildLabelPartitionedSnapshot(labelKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildLabelPartitionedSnapshot", reflect.TypeOf((*MockBuilder)(nil).BuildLabelPartitionedSnapshot), labelKey)
}

// BuildSinglePartitionedSnapshot mocks base method
func (m *MockBuilder) BuildSinglePartitionedSnapshot(snapshotLabels map[string]string) (certagent.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildSinglePartitionedSnapshot", snapshotLabels)
	ret0, _ := ret[0].(certagent.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildSinglePartitionedSnapshot indicates an expected call of BuildSinglePartitionedSnapshot
func (mr *MockBuilderMockRecorder) BuildSinglePartitionedSnapshot(snapshotLabels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildSinglePartitionedSnapshot", reflect.TypeOf((*MockBuilder)(nil).BuildSinglePartitionedSnapshot), snapshotLabels)
}

// AddCluster mocks base method
func (m *MockBuilder) AddCluster(cluster string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddCluster", cluster)
}

// AddCluster indicates an expected call of AddCluster
func (mr *MockBuilderMockRecorder) AddCluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCluster", reflect.TypeOf((*MockBuilder)(nil).AddCluster), cluster)
}

// Clusters mocks base method
func (m *MockBuilder) Clusters() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clusters")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Clusters indicates an expected call of Clusters
func (mr *MockBuilderMockRecorder) Clusters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clusters", reflect.TypeOf((*MockBuilder)(nil).Clusters))
}

// Merge mocks base method
func (m *MockBuilder) Merge(other certagent.Builder) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Merge", other)
}

// Merge indicates an expected call of Merge
func (mr *MockBuilderMockRecorder) Merge(other interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MockBuilder)(nil).Merge), other)
}

// Clone mocks base method
func (m *MockBuilder) Clone() certagent.Builder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(certagent.Builder)
	return ret0
}

// Clone indicates an expected call of Clone
func (mr *MockBuilderMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockBuilder)(nil).Clone))
}

// Delta mocks base method
func (m *MockBuilder) Delta(newSnap certagent.Builder) output.SnapshotDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSnap)
	ret0, _ := ret[0].(output.SnapshotDelta)
	return ret0
}

// Delta indicates an expected call of Delta
func (mr *MockBuilderMockRecorder) Delta(newSnap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockBuilder)(nil).Delta), newSnap)
}
