// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./snapshot.go -destination mocks/snapshot.go

// Definitions for Output Snapshots
package certagent

import (
	"context"
	"encoding/json"
	"sort"

	"k8s.io/apimachinery/pkg/runtime/schema"

	"github.com/solo-io/go-utils/contextutils"
	"github.com/solo-io/skv2/pkg/multicluster"

	"github.com/rotisserie/eris"
	"github.com/solo-io/skv2/contrib/pkg/output"
	"github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	"sigs.k8s.io/controller-runtime/pkg/client"

	certificates_mesh_gloo_solo_io_v1alpha2 "github.com/solo-io/gloo-mesh/pkg/api/certificates.mesh.gloo.solo.io/v1alpha2"
	certificates_mesh_gloo_solo_io_v1alpha2_sets "github.com/solo-io/gloo-mesh/pkg/api/certificates.mesh.gloo.solo.io/v1alpha2/sets"

	v1_sets "github.com/solo-io/external-apis/pkg/api/k8s/core/v1/sets"
	v1 "k8s.io/api/core/v1"
)

// this error can occur if constructing a Partitioned Snapshot from a resource
// that is missing the partition label
var MissingRequiredLabelError = func(labelKey, resourceKind string, obj ezkube.ResourceId) error {
	return eris.Errorf("expected label %v not on labels of %v %v", labelKey, resourceKind, sets.Key(obj))
}

// the snapshot of output resources produced by a translation
type Snapshot interface {

	// return the set of CertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests with a given set of labels
	CertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests() []LabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet
	// return the set of V1_Secrets with a given set of labels
	V1_Secrets() []LabeledV1_SecretSet

	// apply the snapshot to the local cluster, garbage collecting stale resources
	ApplyLocalCluster(ctx context.Context, clusterClient client.Client, errHandler output.ErrorHandler)

	// apply resources from the snapshot across multiple clusters, garbage collecting stale resources
	ApplyMultiCluster(ctx context.Context, multiClusterClient multicluster.Client, errHandler output.ErrorHandler)

	// serialize the entire snapshot as JSON
	MarshalJSON() ([]byte, error)
}

type snapshot struct {
	name string

	certificatesMeshGlooSoloIoV1Alpha2CertificateRequests []LabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet
	v1Secrets                                             []LabeledV1_SecretSet
	clusters                                              []string
}

func NewSnapshot(
	name string,

	certificatesMeshGlooSoloIoV1Alpha2CertificateRequests []LabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet,
	v1Secrets []LabeledV1_SecretSet,
	clusters ...string, // the set of clusters to apply the snapshot to. only required for multicluster snapshots.
) Snapshot {
	return &snapshot{
		name: name,

		certificatesMeshGlooSoloIoV1Alpha2CertificateRequests: certificatesMeshGlooSoloIoV1Alpha2CertificateRequests,
		v1Secrets: v1Secrets,
		clusters:  clusters,
	}
}

// automatically partitions the input resources
// by the presence of the provided label.
func NewLabelPartitionedSnapshot(
	name,
	labelKey string, // the key by which to partition the resources

	certificatesMeshGlooSoloIoV1Alpha2CertificateRequests certificates_mesh_gloo_solo_io_v1alpha2_sets.CertificateRequestSet,

	v1Secrets v1_sets.SecretSet,
	clusters ...string, // the set of clusters to apply the snapshot to. only required for multicluster snapshots.
) (Snapshot, error) {

	partitionedCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests, err := partitionCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestsByLabel(labelKey, certificatesMeshGlooSoloIoV1Alpha2CertificateRequests)
	if err != nil {
		return nil, err
	}
	partitionedV1_Secrets, err := partitionV1_SecretsByLabel(labelKey, v1Secrets)
	if err != nil {
		return nil, err
	}

	return NewSnapshot(
		name,

		partitionedCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests,
		partitionedV1_Secrets,
		clusters...,
	), nil
}

// simplified constructor for a snapshot
// with a single label partition (i.e. all resources share a single set of labels).
func NewSinglePartitionedSnapshot(
	name string,
	snapshotLabels map[string]string, // a single set of labels shared by all resources

	certificatesMeshGlooSoloIoV1Alpha2CertificateRequests certificates_mesh_gloo_solo_io_v1alpha2_sets.CertificateRequestSet,

	v1Secrets v1_sets.SecretSet,
	clusters ...string, // the set of clusters to apply the snapshot to. only required for multicluster snapshots.
) (Snapshot, error) {

	labeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequest, err := NewLabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet(certificatesMeshGlooSoloIoV1Alpha2CertificateRequests, snapshotLabels)
	if err != nil {
		return nil, err
	}
	labeledV1_Secret, err := NewLabeledV1_SecretSet(v1Secrets, snapshotLabels)
	if err != nil {
		return nil, err
	}

	return NewSnapshot(
		name,

		[]LabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet{labeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequest},
		[]LabeledV1_SecretSet{labeledV1_Secret},
		clusters...,
	), nil
}

// apply the desired resources to the cluster state; remove stale resources where necessary
func (s *snapshot) ApplyLocalCluster(ctx context.Context, cli client.Client, errHandler output.ErrorHandler) {
	var genericLists []output.ResourceList

	for _, outputSet := range s.certificatesMeshGlooSoloIoV1Alpha2CertificateRequests {
		genericLists = append(genericLists, outputSet.Generic())
	}
	for _, outputSet := range s.v1Secrets {
		genericLists = append(genericLists, outputSet.Generic())
	}

	output.Snapshot{
		Name:        s.name,
		ListsToSync: genericLists,
	}.SyncLocalCluster(ctx, cli, errHandler)
}

// apply the desired resources to multiple cluster states; remove stale resources where necessary
func (s *snapshot) ApplyMultiCluster(ctx context.Context, multiClusterClient multicluster.Client, errHandler output.ErrorHandler) {
	var genericLists []output.ResourceList

	for _, outputSet := range s.certificatesMeshGlooSoloIoV1Alpha2CertificateRequests {
		genericLists = append(genericLists, outputSet.Generic())
	}
	for _, outputSet := range s.v1Secrets {
		genericLists = append(genericLists, outputSet.Generic())
	}

	output.Snapshot{
		Name:        s.name,
		Clusters:    s.clusters,
		ListsToSync: genericLists,
	}.SyncMultiCluster(ctx, multiClusterClient, errHandler)
}

func partitionCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestsByLabel(labelKey string, set certificates_mesh_gloo_solo_io_v1alpha2_sets.CertificateRequestSet) ([]LabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet, error) {
	setsByLabel := map[string]certificates_mesh_gloo_solo_io_v1alpha2_sets.CertificateRequestSet{}

	for _, obj := range set.List() {
		if obj.Labels == nil {
			return nil, MissingRequiredLabelError(labelKey, "CertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequest", obj)
		}
		labelValue := obj.Labels[labelKey]
		if labelValue == "" {
			return nil, MissingRequiredLabelError(labelKey, "CertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequest", obj)
		}

		setForValue, ok := setsByLabel[labelValue]
		if !ok {
			setForValue = certificates_mesh_gloo_solo_io_v1alpha2_sets.NewCertificateRequestSet()
			setsByLabel[labelValue] = setForValue
		}
		setForValue.Insert(obj)
	}

	// partition by label key
	var partitionedCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests []LabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet

	for labelValue, setForValue := range setsByLabel {
		labels := map[string]string{labelKey: labelValue}

		partitionedSet, err := NewLabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet(setForValue, labels)
		if err != nil {
			return nil, err
		}

		partitionedCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests = append(partitionedCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests, partitionedSet)
	}

	// sort for idempotency
	sort.SliceStable(partitionedCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests, func(i, j int) bool {
		leftLabelValue := partitionedCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests[i].Labels()[labelKey]
		rightLabelValue := partitionedCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests[j].Labels()[labelKey]
		return leftLabelValue < rightLabelValue
	})

	return partitionedCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests, nil
}

func partitionV1_SecretsByLabel(labelKey string, set v1_sets.SecretSet) ([]LabeledV1_SecretSet, error) {
	setsByLabel := map[string]v1_sets.SecretSet{}

	for _, obj := range set.List() {
		if obj.Labels == nil {
			return nil, MissingRequiredLabelError(labelKey, "V1_Secret", obj)
		}
		labelValue := obj.Labels[labelKey]
		if labelValue == "" {
			return nil, MissingRequiredLabelError(labelKey, "V1_Secret", obj)
		}

		setForValue, ok := setsByLabel[labelValue]
		if !ok {
			setForValue = v1_sets.NewSecretSet()
			setsByLabel[labelValue] = setForValue
		}
		setForValue.Insert(obj)
	}

	// partition by label key
	var partitionedV1_Secrets []LabeledV1_SecretSet

	for labelValue, setForValue := range setsByLabel {
		labels := map[string]string{labelKey: labelValue}

		partitionedSet, err := NewLabeledV1_SecretSet(setForValue, labels)
		if err != nil {
			return nil, err
		}

		partitionedV1_Secrets = append(partitionedV1_Secrets, partitionedSet)
	}

	// sort for idempotency
	sort.SliceStable(partitionedV1_Secrets, func(i, j int) bool {
		leftLabelValue := partitionedV1_Secrets[i].Labels()[labelKey]
		rightLabelValue := partitionedV1_Secrets[j].Labels()[labelKey]
		return leftLabelValue < rightLabelValue
	})

	return partitionedV1_Secrets, nil
}

func (s snapshot) CertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests() []LabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet {
	return s.certificatesMeshGlooSoloIoV1Alpha2CertificateRequests
}

func (s snapshot) V1_Secrets() []LabeledV1_SecretSet {
	return s.v1Secrets
}

func (s snapshot) MarshalJSON() ([]byte, error) {
	snapshotMap := map[string]interface{}{"name": s.name}

	certificatesMeshGlooSoloIoV1Alpha2CertificateRequestSet := certificates_mesh_gloo_solo_io_v1alpha2_sets.NewCertificateRequestSet()
	for _, set := range s.certificatesMeshGlooSoloIoV1Alpha2CertificateRequests {
		certificatesMeshGlooSoloIoV1Alpha2CertificateRequestSet = certificatesMeshGlooSoloIoV1Alpha2CertificateRequestSet.Union(set.Set())
	}
	snapshotMap["certificatesMeshGlooSoloIoV1Alpha2CertificateRequests"] = certificatesMeshGlooSoloIoV1Alpha2CertificateRequestSet.List()

	v1SecretSet := v1_sets.NewSecretSet()
	for _, set := range s.v1Secrets {
		v1SecretSet = v1SecretSet.Union(set.Set())
	}
	snapshotMap["v1Secrets"] = v1SecretSet.List()

	snapshotMap["clusters"] = s.clusters

	return json.Marshal(snapshotMap)
}

// LabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet represents a set of certificatesMeshGlooSoloIoV1Alpha2CertificateRequests
// which share a common set of labels.
// These labels are used to find diffs between CertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSets.
type LabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet interface {
	// returns the set of Labels shared by this CertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet
	Labels() map[string]string

	// returns the set of CertificateRequestes with the given labels
	Set() certificates_mesh_gloo_solo_io_v1alpha2_sets.CertificateRequestSet

	// converts the set to a generic format which can be applied by the Snapshot.Apply functions
	Generic() output.ResourceList
}

type labeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet struct {
	set    certificates_mesh_gloo_solo_io_v1alpha2_sets.CertificateRequestSet
	labels map[string]string
}

func NewLabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet(set certificates_mesh_gloo_solo_io_v1alpha2_sets.CertificateRequestSet, labels map[string]string) (LabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet, error) {
	// validate that each CertificateRequest contains the labels, else this is not a valid LabeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet
	for _, item := range set.List() {
		for k, v := range labels {
			// k=v must be present in the item
			if item.Labels[k] != v {
				return nil, eris.Errorf("internal error: %v=%v missing on CertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequest %v", k, v, item.Name)
			}
		}
	}

	return &labeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet{set: set, labels: labels}, nil
}

func (l *labeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet) Labels() map[string]string {
	return l.labels
}

func (l *labeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet) Set() certificates_mesh_gloo_solo_io_v1alpha2_sets.CertificateRequestSet {
	return l.set
}

func (l labeledCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequestSet) Generic() output.ResourceList {
	var desiredResources []ezkube.Object
	for _, desired := range l.set.List() {
		desiredResources = append(desiredResources, desired)
	}

	// enable list func for garbage collection
	listFunc := func(ctx context.Context, cli client.Client) ([]ezkube.Object, error) {
		var list certificates_mesh_gloo_solo_io_v1alpha2.CertificateRequestList
		if err := cli.List(ctx, &list, client.MatchingLabels(l.labels)); err != nil {
			return nil, err
		}
		var items []ezkube.Object
		for _, item := range list.Items {
			item := item // pike
			items = append(items, &item)
		}
		return items, nil
	}

	return output.ResourceList{
		Resources:    desiredResources,
		ListFunc:     listFunc,
		ResourceKind: "CertificateRequest",
	}
}

// LabeledV1_SecretSet represents a set of v1Secrets
// which share a common set of labels.
// These labels are used to find diffs between V1_SecretSets.
type LabeledV1_SecretSet interface {
	// returns the set of Labels shared by this V1_SecretSet
	Labels() map[string]string

	// returns the set of Secretes with the given labels
	Set() v1_sets.SecretSet

	// converts the set to a generic format which can be applied by the Snapshot.Apply functions
	Generic() output.ResourceList
}

type labeledV1_SecretSet struct {
	set    v1_sets.SecretSet
	labels map[string]string
}

func NewLabeledV1_SecretSet(set v1_sets.SecretSet, labels map[string]string) (LabeledV1_SecretSet, error) {
	// validate that each Secret contains the labels, else this is not a valid LabeledV1_SecretSet
	for _, item := range set.List() {
		for k, v := range labels {
			// k=v must be present in the item
			if item.Labels[k] != v {
				return nil, eris.Errorf("internal error: %v=%v missing on V1_Secret %v", k, v, item.Name)
			}
		}
	}

	return &labeledV1_SecretSet{set: set, labels: labels}, nil
}

func (l *labeledV1_SecretSet) Labels() map[string]string {
	return l.labels
}

func (l *labeledV1_SecretSet) Set() v1_sets.SecretSet {
	return l.set
}

func (l labeledV1_SecretSet) Generic() output.ResourceList {
	var desiredResources []ezkube.Object
	for _, desired := range l.set.List() {
		desiredResources = append(desiredResources, desired)
	}

	// enable list func for garbage collection
	listFunc := func(ctx context.Context, cli client.Client) ([]ezkube.Object, error) {
		var list v1.SecretList
		if err := cli.List(ctx, &list, client.MatchingLabels(l.labels)); err != nil {
			return nil, err
		}
		var items []ezkube.Object
		for _, item := range list.Items {
			item := item // pike
			items = append(items, &item)
		}
		return items, nil
	}

	return output.ResourceList{
		Resources:    desiredResources,
		ListFunc:     listFunc,
		ResourceKind: "Secret",
	}
}

type builder struct {
	ctx      context.Context
	name     string
	clusters []string

	certificatesMeshGlooSoloIoV1Alpha2CertificateRequests certificates_mesh_gloo_solo_io_v1alpha2_sets.CertificateRequestSet

	v1Secrets v1_sets.SecretSet
}

func NewBuilder(ctx context.Context, name string) *builder {
	return &builder{
		ctx:  ctx,
		name: name,

		certificatesMeshGlooSoloIoV1Alpha2CertificateRequests: certificates_mesh_gloo_solo_io_v1alpha2_sets.NewCertificateRequestSet(),

		v1Secrets: v1_sets.NewSecretSet(),
	}
}

// the output Builder uses a builder pattern to allow
// iteratively collecting outputs before producing a final snapshot
type Builder interface {

	// add CertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests to the collected outputs
	AddCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests(certificatesMeshGlooSoloIoV1Alpha2CertificateRequests ...*certificates_mesh_gloo_solo_io_v1alpha2.CertificateRequest)

	// get the collected CertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests
	GetCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests() certificates_mesh_gloo_solo_io_v1alpha2_sets.CertificateRequestSet

	// add V1_Secrets to the collected outputs
	AddV1_Secrets(v1Secrets ...*v1.Secret)

	// get the collected V1_Secrets
	GetV1_Secrets() v1_sets.SecretSet

	// build the collected outputs into a label-partitioned snapshot
	BuildLabelPartitionedSnapshot(labelKey string) (Snapshot, error)

	// build the collected outputs into a snapshot with a single partition
	BuildSinglePartitionedSnapshot(snapshotLabels map[string]string) (Snapshot, error)

	// add a cluster to the collected clusters.
	// this can be used to collect clusters for use with MultiCluster snapshots.
	AddCluster(cluster string)

	// returns the set of clusters currently stored in this builder
	Clusters() []string

	// merge all the resources from another Builder into this one
	Merge(other Builder)

	// create a clone of this builder (deepcopying all resources)
	Clone() Builder

	// return the difference between the snapshot in this builder's and another
	Delta(newSnap Builder) output.SnapshotDelta
}

func (b *builder) AddCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests(certificatesMeshGlooSoloIoV1Alpha2CertificateRequests ...*certificates_mesh_gloo_solo_io_v1alpha2.CertificateRequest) {
	for _, obj := range certificatesMeshGlooSoloIoV1Alpha2CertificateRequests {
		if obj == nil {
			continue
		}
		contextutils.LoggerFrom(b.ctx).Debugf("added output CertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequest %v", sets.Key(obj))
		b.certificatesMeshGlooSoloIoV1Alpha2CertificateRequests.Insert(obj)
	}
}
func (b *builder) AddV1_Secrets(v1Secrets ...*v1.Secret) {
	for _, obj := range v1Secrets {
		if obj == nil {
			continue
		}
		contextutils.LoggerFrom(b.ctx).Debugf("added output V1_Secret %v", sets.Key(obj))
		b.v1Secrets.Insert(obj)
	}
}

func (b *builder) GetCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests() certificates_mesh_gloo_solo_io_v1alpha2_sets.CertificateRequestSet {
	return b.certificatesMeshGlooSoloIoV1Alpha2CertificateRequests
}

func (b *builder) GetV1_Secrets() v1_sets.SecretSet {
	return b.v1Secrets
}

func (b *builder) BuildLabelPartitionedSnapshot(labelKey string) (Snapshot, error) {
	return NewLabelPartitionedSnapshot(
		b.name,
		labelKey,

		b.certificatesMeshGlooSoloIoV1Alpha2CertificateRequests,

		b.v1Secrets,
		b.clusters...,
	)
}

func (b *builder) BuildSinglePartitionedSnapshot(snapshotLabels map[string]string) (Snapshot, error) {
	return NewSinglePartitionedSnapshot(
		b.name,
		snapshotLabels,

		b.certificatesMeshGlooSoloIoV1Alpha2CertificateRequests,

		b.v1Secrets,
		b.clusters...,
	)
}

func (b *builder) AddCluster(cluster string) {
	b.clusters = append(b.clusters, cluster)
}

func (b *builder) Clusters() []string {
	return b.clusters
}

func (b *builder) Merge(other Builder) {
	if other == nil {
		return
	}

	b.AddCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests(other.GetCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests().List()...)

	b.AddV1_Secrets(other.GetV1_Secrets().List()...)
	for _, cluster := range other.Clusters() {
		b.AddCluster(cluster)
	}
}

func (b *builder) Clone() Builder {
	if b == nil {
		return nil
	}
	clone := NewBuilder(b.ctx, b.name)

	for _, certificatesMeshGlooSoloIoV1Alpha2CertificateRequest := range b.GetCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests().List() {
		clone.AddCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests(certificatesMeshGlooSoloIoV1Alpha2CertificateRequest.DeepCopy())
	}

	for _, v1Secret := range b.GetV1_Secrets().List() {
		clone.AddV1_Secrets(v1Secret.DeepCopy())
	}
	for _, cluster := range b.Clusters() {
		clone.AddCluster(cluster)
	}
	return clone
}

func (b *builder) Delta(other Builder) output.SnapshotDelta {
	delta := output.SnapshotDelta{}
	if b == nil {
		return delta
	}

	// calculate delta between CertificateRequests
	certificatesMeshGlooSoloIoV1Alpha2CertificateRequestDelta := b.GetCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests().Delta(other.GetCertificatesMeshGlooSoloIo_V1Alpha2_CertificateRequests())
	certificatesMeshGlooSoloIoV1Alpha2CertificateRequestGvk := schema.GroupVersionKind{
		Group:   "certificates.mesh.gloo.solo.io",
		Version: "v1alpha2",
		Kind:    "CertificateRequest",
	}
	delta.AddInserted(certificatesMeshGlooSoloIoV1Alpha2CertificateRequestGvk, certificatesMeshGlooSoloIoV1Alpha2CertificateRequestDelta.Inserted)
	delta.AddRemoved(certificatesMeshGlooSoloIoV1Alpha2CertificateRequestGvk, certificatesMeshGlooSoloIoV1Alpha2CertificateRequestDelta.Removed)

	// calculate delta between Secrets
	v1SecretDelta := b.GetV1_Secrets().Delta(other.GetV1_Secrets())
	v1SecretGvk := schema.GroupVersionKind{
		Group:   "",
		Version: "v1",
		Kind:    "Secret",
	}
	delta.AddInserted(v1SecretGvk, v1SecretDelta.Inserted)
	delta.AddRemoved(v1SecretGvk, v1SecretDelta.Removed)
	return delta
}
