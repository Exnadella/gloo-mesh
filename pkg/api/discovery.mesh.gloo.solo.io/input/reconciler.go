// Code generated by skv2. DO NOT EDIT.

package input

import (
	"context"
	"time"

	"github.com/solo-io/skv2/contrib/pkg/input"
	sk_core_v1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
	"github.com/solo-io/skv2/pkg/multicluster"
	"github.com/solo-io/skv2/pkg/reconcile"

	appmesh_k8s_aws_v1beta2 "github.com/aws/aws-app-mesh-controller-for-k8s/apis/appmesh/v1beta2"
	appmesh_k8s_aws_v1beta2_controllers "github.com/solo-io/external-apis/pkg/api/appmesh/appmesh.k8s.aws/v1beta2/controller"
	apps_v1_controllers "github.com/solo-io/external-apis/pkg/api/k8s/apps/v1/controller"
	v1_controllers "github.com/solo-io/external-apis/pkg/api/k8s/core/v1/controller"
	networking_mesh_gloo_solo_io_v1alpha2 "github.com/solo-io/gloo-mesh/pkg/api/networking.mesh.gloo.solo.io/v1alpha2"
	networking_mesh_gloo_solo_io_v1alpha2_controllers "github.com/solo-io/gloo-mesh/pkg/api/networking.mesh.gloo.solo.io/v1alpha2/controller"
	settings_mesh_gloo_solo_io_v1alpha2 "github.com/solo-io/gloo-mesh/pkg/api/settings.mesh.gloo.solo.io/v1alpha2"
	settings_mesh_gloo_solo_io_v1alpha2_controllers "github.com/solo-io/gloo-mesh/pkg/api/settings.mesh.gloo.solo.io/v1alpha2/controller"
	apps_v1 "k8s.io/api/apps/v1"
	v1 "k8s.io/api/core/v1"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// The Input Reconciler calls a simple func(id) error whenever a
// storage event is received for any of:
// * AppmeshK8SAws_V1Beta2_Meshes
// * V1_ConfigMaps
// * V1_Services
// * V1_Pods
// * V1_Endpoints
// * V1_Nodes
// * Apps_V1_Deployments
// * Apps_V1_ReplicaSets
// * Apps_V1_DaemonSets
// * Apps_V1_StatefulSets
// from a remote cluster.
// * SettingsMeshGlooSoloIo_V1Alpha2_Settings
// * NetworkingMeshGlooSoloIo_V1Alpha2_VirtualMeshes
// from the local cluster.

type ReconcileOptions struct {
	Remote RemoteReconcileOptions
	Local  LocalReconcileOptions

	// the ReconcileInterval, if greater than 0, will limit the number of reconciles
	// to one per interval.
	ReconcileInterval time.Duration
}

// register the given multi cluster reconcile func with the cluster watcher
// register the given single cluster reconcile func with the local manager
func RegisterInputReconciler(
	ctx context.Context,
	clusters multicluster.ClusterWatcher,
	multiClusterReconcileFunc input.MultiClusterReconcileFunc,
	mgr manager.Manager,
	singleClusterReconcileFunc input.SingleClusterReconcileFunc,
	options ReconcileOptions,
) (input.InputReconciler, error) {

	base := input.NewInputReconciler(
		ctx,
		multiClusterReconcileFunc,
		singleClusterReconcileFunc,
		options.ReconcileInterval,
	)

	// initialize reconcile loops

	// initialize AppmeshK8SAws_V1Beta2_Meshes reconcile loop for remote clusters
	appmesh_k8s_aws_v1beta2_controllers.NewMulticlusterMeshReconcileLoop("Mesh", clusters, options.Remote.AppmeshK8SAws_V1Beta2_Meshes).AddMulticlusterMeshReconciler(ctx, &remoteAppmeshK8SAwsInputReconciler{base: base}, options.Remote.Predicates...)

	// initialize V1_ConfigMaps reconcile loop for remote clusters
	v1_controllers.NewMulticlusterConfigMapReconcileLoop("ConfigMap", clusters, options.Remote.V1_ConfigMaps).AddMulticlusterConfigMapReconciler(ctx, &remoteInputReconciler{base: base}, options.Remote.Predicates...)
	// initialize V1_Services reconcile loop for remote clusters
	v1_controllers.NewMulticlusterServiceReconcileLoop("Service", clusters, options.Remote.V1_Services).AddMulticlusterServiceReconciler(ctx, &remoteInputReconciler{base: base}, options.Remote.Predicates...)
	// initialize V1_Pods reconcile loop for remote clusters
	v1_controllers.NewMulticlusterPodReconcileLoop("Pod", clusters, options.Remote.V1_Pods).AddMulticlusterPodReconciler(ctx, &remoteInputReconciler{base: base}, options.Remote.Predicates...)
	// initialize V1_Endpoints reconcile loop for remote clusters
	v1_controllers.NewMulticlusterEndpointsReconcileLoop("Endpoints", clusters, options.Remote.V1_Endpoints).AddMulticlusterEndpointsReconciler(ctx, &remoteInputReconciler{base: base}, options.Remote.Predicates...)
	// initialize V1_Nodes reconcile loop for remote clusters
	v1_controllers.NewMulticlusterNodeReconcileLoop("Node", clusters, options.Remote.V1_Nodes).AddMulticlusterNodeReconciler(ctx, &remoteInputReconciler{base: base}, options.Remote.Predicates...)

	// initialize Apps_V1_Deployments reconcile loop for remote clusters
	apps_v1_controllers.NewMulticlusterDeploymentReconcileLoop("Deployment", clusters, options.Remote.Apps_V1_Deployments).AddMulticlusterDeploymentReconciler(ctx, &remoteAppsInputReconciler{base: base}, options.Remote.Predicates...)
	// initialize Apps_V1_ReplicaSets reconcile loop for remote clusters
	apps_v1_controllers.NewMulticlusterReplicaSetReconcileLoop("ReplicaSet", clusters, options.Remote.Apps_V1_ReplicaSets).AddMulticlusterReplicaSetReconciler(ctx, &remoteAppsInputReconciler{base: base}, options.Remote.Predicates...)
	// initialize Apps_V1_DaemonSets reconcile loop for remote clusters
	apps_v1_controllers.NewMulticlusterDaemonSetReconcileLoop("DaemonSet", clusters, options.Remote.Apps_V1_DaemonSets).AddMulticlusterDaemonSetReconciler(ctx, &remoteAppsInputReconciler{base: base}, options.Remote.Predicates...)
	// initialize Apps_V1_StatefulSets reconcile loop for remote clusters
	apps_v1_controllers.NewMulticlusterStatefulSetReconcileLoop("StatefulSet", clusters, options.Remote.Apps_V1_StatefulSets).AddMulticlusterStatefulSetReconciler(ctx, &remoteAppsInputReconciler{base: base}, options.Remote.Predicates...)

	// initialize SettingsMeshGlooSoloIo_V1Alpha2_Settings reconcile loop for local cluster
	if err := settings_mesh_gloo_solo_io_v1alpha2_controllers.NewSettingsReconcileLoop("Settings", mgr, options.Local.SettingsMeshGlooSoloIo_V1Alpha2_Settings).RunSettingsReconciler(ctx, &localSettingsMeshGlooSoloIoInputReconciler{base: base}, options.Local.Predicates...); err != nil {
		return nil, err
	}

	// initialize NetworkingMeshGlooSoloIo_V1Alpha2_VirtualMeshes reconcile loop for local cluster
	if err := networking_mesh_gloo_solo_io_v1alpha2_controllers.NewVirtualMeshReconcileLoop("VirtualMesh", mgr, options.Local.NetworkingMeshGlooSoloIo_V1Alpha2_VirtualMeshes).RunVirtualMeshReconciler(ctx, &localNetworkingMeshGlooSoloIoInputReconciler{base: base}, options.Local.Predicates...); err != nil {
		return nil, err
	}

	return base, nil
}

// Options for reconciling a snapshot in remote clusters
type RemoteReconcileOptions struct {

	// Options for reconciling AppmeshK8SAws_V1Beta2_Meshes
	AppmeshK8SAws_V1Beta2_Meshes reconcile.Options

	// Options for reconciling V1_ConfigMaps
	V1_ConfigMaps reconcile.Options
	// Options for reconciling V1_Services
	V1_Services reconcile.Options
	// Options for reconciling V1_Pods
	V1_Pods reconcile.Options
	// Options for reconciling V1_Endpoints
	V1_Endpoints reconcile.Options
	// Options for reconciling V1_Nodes
	V1_Nodes reconcile.Options

	// Options for reconciling Apps_V1_Deployments
	Apps_V1_Deployments reconcile.Options
	// Options for reconciling Apps_V1_ReplicaSets
	Apps_V1_ReplicaSets reconcile.Options
	// Options for reconciling Apps_V1_DaemonSets
	Apps_V1_DaemonSets reconcile.Options
	// Options for reconciling Apps_V1_StatefulSets
	Apps_V1_StatefulSets reconcile.Options

	// optional predicates for filtering remote events
	Predicates []predicate.Predicate
}

type remoteAppmeshK8SAwsInputReconciler struct {
	base input.InputReconciler
}

func (r *remoteAppmeshK8SAwsInputReconciler) ReconcileMesh(clusterName string, obj *appmesh_k8s_aws_v1beta2.Mesh) (reconcile.Result, error) {
	obj.ClusterName = clusterName
	return r.base.ReconcileRemoteGeneric(obj)
}

func (r *remoteAppmeshK8SAwsInputReconciler) ReconcileMeshDeletion(clusterName string, obj reconcile.Request) error {
	ref := &sk_core_v1.ClusterObjectRef{
		Name:        obj.Name,
		Namespace:   obj.Namespace,
		ClusterName: clusterName,
	}
	_, err := r.base.ReconcileRemoteGeneric(ref)
	return err
}

type remoteInputReconciler struct {
	base input.InputReconciler
}

func (r *remoteInputReconciler) ReconcileConfigMap(clusterName string, obj *v1.ConfigMap) (reconcile.Result, error) {
	obj.ClusterName = clusterName
	return r.base.ReconcileRemoteGeneric(obj)
}

func (r *remoteInputReconciler) ReconcileConfigMapDeletion(clusterName string, obj reconcile.Request) error {
	ref := &sk_core_v1.ClusterObjectRef{
		Name:        obj.Name,
		Namespace:   obj.Namespace,
		ClusterName: clusterName,
	}
	_, err := r.base.ReconcileRemoteGeneric(ref)
	return err
}

func (r *remoteInputReconciler) ReconcileService(clusterName string, obj *v1.Service) (reconcile.Result, error) {
	obj.ClusterName = clusterName
	return r.base.ReconcileRemoteGeneric(obj)
}

func (r *remoteInputReconciler) ReconcileServiceDeletion(clusterName string, obj reconcile.Request) error {
	ref := &sk_core_v1.ClusterObjectRef{
		Name:        obj.Name,
		Namespace:   obj.Namespace,
		ClusterName: clusterName,
	}
	_, err := r.base.ReconcileRemoteGeneric(ref)
	return err
}

func (r *remoteInputReconciler) ReconcilePod(clusterName string, obj *v1.Pod) (reconcile.Result, error) {
	obj.ClusterName = clusterName
	return r.base.ReconcileRemoteGeneric(obj)
}

func (r *remoteInputReconciler) ReconcilePodDeletion(clusterName string, obj reconcile.Request) error {
	ref := &sk_core_v1.ClusterObjectRef{
		Name:        obj.Name,
		Namespace:   obj.Namespace,
		ClusterName: clusterName,
	}
	_, err := r.base.ReconcileRemoteGeneric(ref)
	return err
}

func (r *remoteInputReconciler) ReconcileEndpoints(clusterName string, obj *v1.Endpoints) (reconcile.Result, error) {
	obj.ClusterName = clusterName
	return r.base.ReconcileRemoteGeneric(obj)
}

func (r *remoteInputReconciler) ReconcileEndpointsDeletion(clusterName string, obj reconcile.Request) error {
	ref := &sk_core_v1.ClusterObjectRef{
		Name:        obj.Name,
		Namespace:   obj.Namespace,
		ClusterName: clusterName,
	}
	_, err := r.base.ReconcileRemoteGeneric(ref)
	return err
}

func (r *remoteInputReconciler) ReconcileNode(clusterName string, obj *v1.Node) (reconcile.Result, error) {
	obj.ClusterName = clusterName
	return r.base.ReconcileRemoteGeneric(obj)
}

func (r *remoteInputReconciler) ReconcileNodeDeletion(clusterName string, obj reconcile.Request) error {
	ref := &sk_core_v1.ClusterObjectRef{
		Name:        obj.Name,
		Namespace:   obj.Namespace,
		ClusterName: clusterName,
	}
	_, err := r.base.ReconcileRemoteGeneric(ref)
	return err
}

type remoteAppsInputReconciler struct {
	base input.InputReconciler
}

func (r *remoteAppsInputReconciler) ReconcileDeployment(clusterName string, obj *apps_v1.Deployment) (reconcile.Result, error) {
	obj.ClusterName = clusterName
	return r.base.ReconcileRemoteGeneric(obj)
}

func (r *remoteAppsInputReconciler) ReconcileDeploymentDeletion(clusterName string, obj reconcile.Request) error {
	ref := &sk_core_v1.ClusterObjectRef{
		Name:        obj.Name,
		Namespace:   obj.Namespace,
		ClusterName: clusterName,
	}
	_, err := r.base.ReconcileRemoteGeneric(ref)
	return err
}

func (r *remoteAppsInputReconciler) ReconcileReplicaSet(clusterName string, obj *apps_v1.ReplicaSet) (reconcile.Result, error) {
	obj.ClusterName = clusterName
	return r.base.ReconcileRemoteGeneric(obj)
}

func (r *remoteAppsInputReconciler) ReconcileReplicaSetDeletion(clusterName string, obj reconcile.Request) error {
	ref := &sk_core_v1.ClusterObjectRef{
		Name:        obj.Name,
		Namespace:   obj.Namespace,
		ClusterName: clusterName,
	}
	_, err := r.base.ReconcileRemoteGeneric(ref)
	return err
}

func (r *remoteAppsInputReconciler) ReconcileDaemonSet(clusterName string, obj *apps_v1.DaemonSet) (reconcile.Result, error) {
	obj.ClusterName = clusterName
	return r.base.ReconcileRemoteGeneric(obj)
}

func (r *remoteAppsInputReconciler) ReconcileDaemonSetDeletion(clusterName string, obj reconcile.Request) error {
	ref := &sk_core_v1.ClusterObjectRef{
		Name:        obj.Name,
		Namespace:   obj.Namespace,
		ClusterName: clusterName,
	}
	_, err := r.base.ReconcileRemoteGeneric(ref)
	return err
}

func (r *remoteAppsInputReconciler) ReconcileStatefulSet(clusterName string, obj *apps_v1.StatefulSet) (reconcile.Result, error) {
	obj.ClusterName = clusterName
	return r.base.ReconcileRemoteGeneric(obj)
}

func (r *remoteAppsInputReconciler) ReconcileStatefulSetDeletion(clusterName string, obj reconcile.Request) error {
	ref := &sk_core_v1.ClusterObjectRef{
		Name:        obj.Name,
		Namespace:   obj.Namespace,
		ClusterName: clusterName,
	}
	_, err := r.base.ReconcileRemoteGeneric(ref)
	return err
}

// Options for reconciling a snapshot in remote clusters
type LocalReconcileOptions struct {

	// Options for reconciling SettingsMeshGlooSoloIo_V1Alpha2_Settings
	SettingsMeshGlooSoloIo_V1Alpha2_Settings reconcile.Options

	// Options for reconciling NetworkingMeshGlooSoloIo_V1Alpha2_VirtualMeshes
	NetworkingMeshGlooSoloIo_V1Alpha2_VirtualMeshes reconcile.Options

	// optional predicates for filtering local events
	Predicates []predicate.Predicate
}

type localSettingsMeshGlooSoloIoInputReconciler struct {
	base input.InputReconciler
}

func (r *localSettingsMeshGlooSoloIoInputReconciler) ReconcileSettings(obj *settings_mesh_gloo_solo_io_v1alpha2.Settings) (reconcile.Result, error) {
	return r.base.ReconcileLocalGeneric(obj)
}

func (r *localSettingsMeshGlooSoloIoInputReconciler) ReconcileSettingsDeletion(obj reconcile.Request) error {
	ref := &sk_core_v1.ObjectRef{
		Name:      obj.Name,
		Namespace: obj.Namespace,
	}
	_, err := r.base.ReconcileLocalGeneric(ref)
	return err
}

type localNetworkingMeshGlooSoloIoInputReconciler struct {
	base input.InputReconciler
}

func (r *localNetworkingMeshGlooSoloIoInputReconciler) ReconcileVirtualMesh(obj *networking_mesh_gloo_solo_io_v1alpha2.VirtualMesh) (reconcile.Result, error) {
	return r.base.ReconcileLocalGeneric(obj)
}

func (r *localNetworkingMeshGlooSoloIoInputReconciler) ReconcileVirtualMeshDeletion(obj reconcile.Request) error {
	ref := &sk_core_v1.ObjectRef{
		Name:      obj.Name,
		Namespace: obj.Namespace,
	}
	_, err := r.base.ReconcileLocalGeneric(ref)
	return err
}
