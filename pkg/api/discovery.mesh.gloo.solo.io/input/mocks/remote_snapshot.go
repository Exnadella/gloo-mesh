// Code generated by MockGen. DO NOT EDIT.
// Source: ./remote_snapshot.go

// Package mock_input is a generated GoMock package.
package mock_input

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1beta2sets "github.com/solo-io/external-apis/pkg/api/appmesh/appmesh.k8s.aws/v1beta2/sets"
	v1sets "github.com/solo-io/external-apis/pkg/api/k8s/apps/v1/sets"
	v1sets0 "github.com/solo-io/external-apis/pkg/api/k8s/core/v1/sets"
	input "github.com/solo-io/gloo-mesh/pkg/api/discovery.mesh.gloo.solo.io/input"
)

// MockDiscoveryInputSnapshot is a mock of DiscoveryInputSnapshot interface
type MockDiscoveryInputSnapshot struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveryInputSnapshotMockRecorder
}

// MockDiscoveryInputSnapshotMockRecorder is the mock recorder for MockDiscoveryInputSnapshot
type MockDiscoveryInputSnapshotMockRecorder struct {
	mock *MockDiscoveryInputSnapshot
}

// NewMockDiscoveryInputSnapshot creates a new mock instance
func NewMockDiscoveryInputSnapshot(ctrl *gomock.Controller) *MockDiscoveryInputSnapshot {
	mock := &MockDiscoveryInputSnapshot{ctrl: ctrl}
	mock.recorder = &MockDiscoveryInputSnapshotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDiscoveryInputSnapshot) EXPECT() *MockDiscoveryInputSnapshotMockRecorder {
	return m.recorder
}

// AppmeshK8SAws_V1Beta2_Meshes mocks base method
func (m *MockDiscoveryInputSnapshot) AppmeshK8SAws_V1Beta2_Meshes() v1beta2sets.MeshSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppmeshK8SAws_V1Beta2_Meshes")
	ret0, _ := ret[0].(v1beta2sets.MeshSet)
	return ret0
}

// AppmeshK8SAws_V1Beta2_Meshes indicates an expected call of AppmeshK8SAws_V1Beta2_Meshes
func (mr *MockDiscoveryInputSnapshotMockRecorder) AppmeshK8SAws_V1Beta2_Meshes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppmeshK8SAws_V1Beta2_Meshes", reflect.TypeOf((*MockDiscoveryInputSnapshot)(nil).AppmeshK8SAws_V1Beta2_Meshes))
}

// V1_ConfigMaps mocks base method
func (m *MockDiscoveryInputSnapshot) V1_ConfigMaps() v1sets0.ConfigMapSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V1_ConfigMaps")
	ret0, _ := ret[0].(v1sets0.ConfigMapSet)
	return ret0
}

// V1_ConfigMaps indicates an expected call of V1_ConfigMaps
func (mr *MockDiscoveryInputSnapshotMockRecorder) V1_ConfigMaps() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V1_ConfigMaps", reflect.TypeOf((*MockDiscoveryInputSnapshot)(nil).V1_ConfigMaps))
}

// V1_Services mocks base method
func (m *MockDiscoveryInputSnapshot) V1_Services() v1sets0.ServiceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V1_Services")
	ret0, _ := ret[0].(v1sets0.ServiceSet)
	return ret0
}

// V1_Services indicates an expected call of V1_Services
func (mr *MockDiscoveryInputSnapshotMockRecorder) V1_Services() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V1_Services", reflect.TypeOf((*MockDiscoveryInputSnapshot)(nil).V1_Services))
}

// V1_Pods mocks base method
func (m *MockDiscoveryInputSnapshot) V1_Pods() v1sets0.PodSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V1_Pods")
	ret0, _ := ret[0].(v1sets0.PodSet)
	return ret0
}

// V1_Pods indicates an expected call of V1_Pods
func (mr *MockDiscoveryInputSnapshotMockRecorder) V1_Pods() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V1_Pods", reflect.TypeOf((*MockDiscoveryInputSnapshot)(nil).V1_Pods))
}

// V1_Endpoints mocks base method
func (m *MockDiscoveryInputSnapshot) V1_Endpoints() v1sets0.EndpointsSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V1_Endpoints")
	ret0, _ := ret[0].(v1sets0.EndpointsSet)
	return ret0
}

// V1_Endpoints indicates an expected call of V1_Endpoints
func (mr *MockDiscoveryInputSnapshotMockRecorder) V1_Endpoints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V1_Endpoints", reflect.TypeOf((*MockDiscoveryInputSnapshot)(nil).V1_Endpoints))
}

// V1_Nodes mocks base method
func (m *MockDiscoveryInputSnapshot) V1_Nodes() v1sets0.NodeSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V1_Nodes")
	ret0, _ := ret[0].(v1sets0.NodeSet)
	return ret0
}

// V1_Nodes indicates an expected call of V1_Nodes
func (mr *MockDiscoveryInputSnapshotMockRecorder) V1_Nodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V1_Nodes", reflect.TypeOf((*MockDiscoveryInputSnapshot)(nil).V1_Nodes))
}

// Apps_V1_Deployments mocks base method
func (m *MockDiscoveryInputSnapshot) Apps_V1_Deployments() v1sets.DeploymentSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apps_V1_Deployments")
	ret0, _ := ret[0].(v1sets.DeploymentSet)
	return ret0
}

// Apps_V1_Deployments indicates an expected call of Apps_V1_Deployments
func (mr *MockDiscoveryInputSnapshotMockRecorder) Apps_V1_Deployments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apps_V1_Deployments", reflect.TypeOf((*MockDiscoveryInputSnapshot)(nil).Apps_V1_Deployments))
}

// Apps_V1_ReplicaSets mocks base method
func (m *MockDiscoveryInputSnapshot) Apps_V1_ReplicaSets() v1sets.ReplicaSetSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apps_V1_ReplicaSets")
	ret0, _ := ret[0].(v1sets.ReplicaSetSet)
	return ret0
}

// Apps_V1_ReplicaSets indicates an expected call of Apps_V1_ReplicaSets
func (mr *MockDiscoveryInputSnapshotMockRecorder) Apps_V1_ReplicaSets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apps_V1_ReplicaSets", reflect.TypeOf((*MockDiscoveryInputSnapshot)(nil).Apps_V1_ReplicaSets))
}

// Apps_V1_DaemonSets mocks base method
func (m *MockDiscoveryInputSnapshot) Apps_V1_DaemonSets() v1sets.DaemonSetSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apps_V1_DaemonSets")
	ret0, _ := ret[0].(v1sets.DaemonSetSet)
	return ret0
}

// Apps_V1_DaemonSets indicates an expected call of Apps_V1_DaemonSets
func (mr *MockDiscoveryInputSnapshotMockRecorder) Apps_V1_DaemonSets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apps_V1_DaemonSets", reflect.TypeOf((*MockDiscoveryInputSnapshot)(nil).Apps_V1_DaemonSets))
}

// Apps_V1_StatefulSets mocks base method
func (m *MockDiscoveryInputSnapshot) Apps_V1_StatefulSets() v1sets.StatefulSetSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apps_V1_StatefulSets")
	ret0, _ := ret[0].(v1sets.StatefulSetSet)
	return ret0
}

// Apps_V1_StatefulSets indicates an expected call of Apps_V1_StatefulSets
func (mr *MockDiscoveryInputSnapshotMockRecorder) Apps_V1_StatefulSets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apps_V1_StatefulSets", reflect.TypeOf((*MockDiscoveryInputSnapshot)(nil).Apps_V1_StatefulSets))
}

// MarshalJSON mocks base method
func (m *MockDiscoveryInputSnapshot) MarshalJSON() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalJSON")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalJSON indicates an expected call of MarshalJSON
func (mr *MockDiscoveryInputSnapshotMockRecorder) MarshalJSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalJSON", reflect.TypeOf((*MockDiscoveryInputSnapshot)(nil).MarshalJSON))
}

// MockDiscoveryInputBuilder is a mock of DiscoveryInputBuilder interface
type MockDiscoveryInputBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveryInputBuilderMockRecorder
}

// MockDiscoveryInputBuilderMockRecorder is the mock recorder for MockDiscoveryInputBuilder
type MockDiscoveryInputBuilderMockRecorder struct {
	mock *MockDiscoveryInputBuilder
}

// NewMockDiscoveryInputBuilder creates a new mock instance
func NewMockDiscoveryInputBuilder(ctrl *gomock.Controller) *MockDiscoveryInputBuilder {
	mock := &MockDiscoveryInputBuilder{ctrl: ctrl}
	mock.recorder = &MockDiscoveryInputBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDiscoveryInputBuilder) EXPECT() *MockDiscoveryInputBuilderMockRecorder {
	return m.recorder
}

// BuildSnapshot mocks base method
func (m *MockDiscoveryInputBuilder) BuildSnapshot(ctx context.Context, name string, opts input.DiscoveryInputBuildOptions) (input.DiscoveryInputSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildSnapshot", ctx, name, opts)
	ret0, _ := ret[0].(input.DiscoveryInputSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildSnapshot indicates an expected call of BuildSnapshot
func (mr *MockDiscoveryInputBuilderMockRecorder) BuildSnapshot(ctx, name, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildSnapshot", reflect.TypeOf((*MockDiscoveryInputBuilder)(nil).BuildSnapshot), ctx, name, opts)
}
