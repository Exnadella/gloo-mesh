// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./remote_snapshot.go -destination mocks/remote_snapshot.go

// The Input RemoteSnapshot contains the set of all:
// * AppmeshK8SAwsv1Beta2Meshes
// * AppmeshK8SAwsv1Beta2VirtualNodes
// * V1ConfigMaps
// * V1Services
// * V1Pods
// * V1Nodes
// * Appsv1Deployments
// * Appsv1ReplicaSets
// * Appsv1DaemonSets
// * Appsv1StatefulSets
// read from a given cluster or set of clusters, across all namespaces.
//
// A snapshot can be constructed from either a single Manager (for a single cluster)
// or a ClusterWatcher (for multiple clusters) using the RemoteSnapshotBuilder.
//
// Resources in a MultiCluster snapshot will have their ClusterName set to the
// name of the cluster from which the resource was read.

package input

import (
	"context"
	"encoding/json"

	"github.com/solo-io/skv2/pkg/verifier"
	"k8s.io/apimachinery/pkg/runtime/schema"

	"github.com/hashicorp/go-multierror"

	"github.com/solo-io/skv2/pkg/multicluster"
	"sigs.k8s.io/controller-runtime/pkg/client"

	appmesh_k8s_aws_v1beta2 "github.com/solo-io/external-apis/pkg/api/appmesh/appmesh.k8s.aws/v1beta2"
	appmesh_k8s_aws_v1beta2_sets "github.com/solo-io/external-apis/pkg/api/appmesh/appmesh.k8s.aws/v1beta2/sets"

	v1 "github.com/solo-io/external-apis/pkg/api/k8s/core/v1"
	v1_sets "github.com/solo-io/external-apis/pkg/api/k8s/core/v1/sets"

	apps_v1 "github.com/solo-io/external-apis/pkg/api/k8s/apps/v1"
	apps_v1_sets "github.com/solo-io/external-apis/pkg/api/k8s/apps/v1/sets"
)

// the snapshot of input resources consumed by translation
type RemoteSnapshot interface {

	// return the set of input AppmeshK8SAwsv1Beta2Meshes
	AppmeshK8SAwsv1Beta2Meshes() appmesh_k8s_aws_v1beta2_sets.MeshSet
	// return the set of input AppmeshK8SAwsv1Beta2VirtualNodes
	AppmeshK8SAwsv1Beta2VirtualNodes() appmesh_k8s_aws_v1beta2_sets.VirtualNodeSet

	// return the set of input V1ConfigMaps
	V1ConfigMaps() v1_sets.ConfigMapSet
	// return the set of input V1Services
	V1Services() v1_sets.ServiceSet
	// return the set of input V1Pods
	V1Pods() v1_sets.PodSet
	// return the set of input V1Nodes
	V1Nodes() v1_sets.NodeSet

	// return the set of input Appsv1Deployments
	Appsv1Deployments() apps_v1_sets.DeploymentSet
	// return the set of input Appsv1ReplicaSets
	Appsv1ReplicaSets() apps_v1_sets.ReplicaSetSet
	// return the set of input Appsv1DaemonSets
	Appsv1DaemonSets() apps_v1_sets.DaemonSetSet
	// return the set of input Appsv1StatefulSets
	Appsv1StatefulSets() apps_v1_sets.StatefulSetSet
	// serialize the entire snapshot as JSON
	MarshalJSON() ([]byte, error)
}

// options for syncing input object statuses
type RemoteSyncStatusOptions struct {

	// sync status of AppmeshK8SAwsv1Beta2Mesh objects
	AppmeshK8SAwsv1Beta2Mesh bool
	// sync status of AppmeshK8SAwsv1Beta2VirtualNode objects
	AppmeshK8SAwsv1Beta2VirtualNode bool

	// sync status of V1ConfigMap objects
	V1ConfigMap bool
	// sync status of V1Service objects
	V1Service bool
	// sync status of V1Pod objects
	V1Pod bool
	// sync status of V1Node objects
	V1Node bool

	// sync status of Appsv1Deployment objects
	Appsv1Deployment bool
	// sync status of Appsv1ReplicaSet objects
	Appsv1ReplicaSet bool
	// sync status of Appsv1DaemonSet objects
	Appsv1DaemonSet bool
	// sync status of Appsv1StatefulSet objects
	Appsv1StatefulSet bool
}

type snapshotRemote struct {
	name string

	appmeshK8SAwsv1Beta2Meshes       appmesh_k8s_aws_v1beta2_sets.MeshSet
	appmeshK8SAwsv1Beta2VirtualNodes appmesh_k8s_aws_v1beta2_sets.VirtualNodeSet

	v1ConfigMaps v1_sets.ConfigMapSet
	v1Services   v1_sets.ServiceSet
	v1Pods       v1_sets.PodSet
	v1Nodes      v1_sets.NodeSet

	appsv1Deployments  apps_v1_sets.DeploymentSet
	appsv1ReplicaSets  apps_v1_sets.ReplicaSetSet
	appsv1DaemonSets   apps_v1_sets.DaemonSetSet
	appsv1StatefulSets apps_v1_sets.StatefulSetSet
}

func NewRemoteSnapshot(
	name string,

	appmeshK8SAwsv1Beta2Meshes appmesh_k8s_aws_v1beta2_sets.MeshSet,
	appmeshK8SAwsv1Beta2VirtualNodes appmesh_k8s_aws_v1beta2_sets.VirtualNodeSet,

	v1ConfigMaps v1_sets.ConfigMapSet,
	v1Services v1_sets.ServiceSet,
	v1Pods v1_sets.PodSet,
	v1Nodes v1_sets.NodeSet,

	appsv1Deployments apps_v1_sets.DeploymentSet,
	appsv1ReplicaSets apps_v1_sets.ReplicaSetSet,
	appsv1DaemonSets apps_v1_sets.DaemonSetSet,
	appsv1StatefulSets apps_v1_sets.StatefulSetSet,

) RemoteSnapshot {
	return &snapshotRemote{
		name: name,

		appmeshK8SAwsv1Beta2Meshes:       appmeshK8SAwsv1Beta2Meshes,
		appmeshK8SAwsv1Beta2VirtualNodes: appmeshK8SAwsv1Beta2VirtualNodes,
		v1ConfigMaps:                     v1ConfigMaps,
		v1Services:                       v1Services,
		v1Pods:                           v1Pods,
		v1Nodes:                          v1Nodes,
		appsv1Deployments:                appsv1Deployments,
		appsv1ReplicaSets:                appsv1ReplicaSets,
		appsv1DaemonSets:                 appsv1DaemonSets,
		appsv1StatefulSets:               appsv1StatefulSets,
	}
}

func (s snapshotRemote) AppmeshK8SAwsv1Beta2Meshes() appmesh_k8s_aws_v1beta2_sets.MeshSet {
	return s.appmeshK8SAwsv1Beta2Meshes
}

func (s snapshotRemote) AppmeshK8SAwsv1Beta2VirtualNodes() appmesh_k8s_aws_v1beta2_sets.VirtualNodeSet {
	return s.appmeshK8SAwsv1Beta2VirtualNodes
}

func (s snapshotRemote) V1ConfigMaps() v1_sets.ConfigMapSet {
	return s.v1ConfigMaps
}

func (s snapshotRemote) V1Services() v1_sets.ServiceSet {
	return s.v1Services
}

func (s snapshotRemote) V1Pods() v1_sets.PodSet {
	return s.v1Pods
}

func (s snapshotRemote) V1Nodes() v1_sets.NodeSet {
	return s.v1Nodes
}

func (s snapshotRemote) Appsv1Deployments() apps_v1_sets.DeploymentSet {
	return s.appsv1Deployments
}

func (s snapshotRemote) Appsv1ReplicaSets() apps_v1_sets.ReplicaSetSet {
	return s.appsv1ReplicaSets
}

func (s snapshotRemote) Appsv1DaemonSets() apps_v1_sets.DaemonSetSet {
	return s.appsv1DaemonSets
}

func (s snapshotRemote) Appsv1StatefulSets() apps_v1_sets.StatefulSetSet {
	return s.appsv1StatefulSets
}

func (s snapshotRemote) MarshalJSON() ([]byte, error) {
	snapshotMap := map[string]interface{}{"name": s.name}

	snapshotMap["appmeshK8SAwsv1Beta2Meshes"] = s.appmeshK8SAwsv1Beta2Meshes.List()
	snapshotMap["appmeshK8SAwsv1Beta2VirtualNodes"] = s.appmeshK8SAwsv1Beta2VirtualNodes.List()
	snapshotMap["v1ConfigMaps"] = s.v1ConfigMaps.List()
	snapshotMap["v1Services"] = s.v1Services.List()
	snapshotMap["v1Pods"] = s.v1Pods.List()
	snapshotMap["v1Nodes"] = s.v1Nodes.List()
	snapshotMap["appsv1Deployments"] = s.appsv1Deployments.List()
	snapshotMap["appsv1ReplicaSets"] = s.appsv1ReplicaSets.List()
	snapshotMap["appsv1DaemonSets"] = s.appsv1DaemonSets.List()
	snapshotMap["appsv1StatefulSets"] = s.appsv1StatefulSets.List()
	return json.Marshal(snapshotMap)
}

// builds the input snapshot from API Clients.
type RemoteBuilder interface {
	BuildSnapshot(ctx context.Context, name string, opts RemoteBuildOptions) (RemoteSnapshot, error)
}

// Options for building a snapshot
type RemoteBuildOptions struct {

	// List options for composing a snapshot from AppmeshK8SAwsv1Beta2Meshes
	AppmeshK8SAwsv1Beta2Meshes ResourceRemoteBuildOptions
	// List options for composing a snapshot from AppmeshK8SAwsv1Beta2VirtualNodes
	AppmeshK8SAwsv1Beta2VirtualNodes ResourceRemoteBuildOptions

	// List options for composing a snapshot from V1ConfigMaps
	V1ConfigMaps ResourceRemoteBuildOptions
	// List options for composing a snapshot from V1Services
	V1Services ResourceRemoteBuildOptions
	// List options for composing a snapshot from V1Pods
	V1Pods ResourceRemoteBuildOptions
	// List options for composing a snapshot from V1Nodes
	V1Nodes ResourceRemoteBuildOptions

	// List options for composing a snapshot from Appsv1Deployments
	Appsv1Deployments ResourceRemoteBuildOptions
	// List options for composing a snapshot from Appsv1ReplicaSets
	Appsv1ReplicaSets ResourceRemoteBuildOptions
	// List options for composing a snapshot from Appsv1DaemonSets
	Appsv1DaemonSets ResourceRemoteBuildOptions
	// List options for composing a snapshot from Appsv1StatefulSets
	Appsv1StatefulSets ResourceRemoteBuildOptions
}

// Options for reading resources of a given type
type ResourceRemoteBuildOptions struct {

	// List options for composing a snapshot from a resource type
	ListOptions []client.ListOption

	// If provided, ensure the resource has been verified before adding it to snapshots
	Verifier verifier.ServerResourceVerifier
}

// build a snapshot from resources across multiple clusters
type multiClusterRemoteBuilder struct {
	clusters multicluster.Interface
	client   multicluster.Client
}

// Produces snapshots of resources across all clusters defined in the ClusterSet
func NewMultiClusterRemoteBuilder(
	clusters multicluster.Interface,
	client multicluster.Client,
) RemoteBuilder {
	return &multiClusterRemoteBuilder{
		clusters: clusters,
		client:   client,
	}
}

func (b *multiClusterRemoteBuilder) BuildSnapshot(ctx context.Context, name string, opts RemoteBuildOptions) (RemoteSnapshot, error) {

	appmeshK8SAwsv1Beta2Meshes := appmesh_k8s_aws_v1beta2_sets.NewMeshSet()
	appmeshK8SAwsv1Beta2VirtualNodes := appmesh_k8s_aws_v1beta2_sets.NewVirtualNodeSet()

	v1ConfigMaps := v1_sets.NewConfigMapSet()
	v1Services := v1_sets.NewServiceSet()
	v1Pods := v1_sets.NewPodSet()
	v1Nodes := v1_sets.NewNodeSet()

	appsv1Deployments := apps_v1_sets.NewDeploymentSet()
	appsv1ReplicaSets := apps_v1_sets.NewReplicaSetSet()
	appsv1DaemonSets := apps_v1_sets.NewDaemonSetSet()
	appsv1StatefulSets := apps_v1_sets.NewStatefulSetSet()

	var errs error

	for _, cluster := range b.clusters.ListClusters() {

		if err := b.insertAppmeshK8SAwsv1Beta2MeshesFromCluster(ctx, cluster, appmeshK8SAwsv1Beta2Meshes, opts.AppmeshK8SAwsv1Beta2Meshes); err != nil {
			errs = multierror.Append(errs, err)
		}
		if err := b.insertAppmeshK8SAwsv1Beta2VirtualNodesFromCluster(ctx, cluster, appmeshK8SAwsv1Beta2VirtualNodes, opts.AppmeshK8SAwsv1Beta2VirtualNodes); err != nil {
			errs = multierror.Append(errs, err)
		}
		if err := b.insertV1ConfigMapsFromCluster(ctx, cluster, v1ConfigMaps, opts.V1ConfigMaps); err != nil {
			errs = multierror.Append(errs, err)
		}
		if err := b.insertV1ServicesFromCluster(ctx, cluster, v1Services, opts.V1Services); err != nil {
			errs = multierror.Append(errs, err)
		}
		if err := b.insertV1PodsFromCluster(ctx, cluster, v1Pods, opts.V1Pods); err != nil {
			errs = multierror.Append(errs, err)
		}
		if err := b.insertV1NodesFromCluster(ctx, cluster, v1Nodes, opts.V1Nodes); err != nil {
			errs = multierror.Append(errs, err)
		}
		if err := b.insertAppsv1DeploymentsFromCluster(ctx, cluster, appsv1Deployments, opts.Appsv1Deployments); err != nil {
			errs = multierror.Append(errs, err)
		}
		if err := b.insertAppsv1ReplicaSetsFromCluster(ctx, cluster, appsv1ReplicaSets, opts.Appsv1ReplicaSets); err != nil {
			errs = multierror.Append(errs, err)
		}
		if err := b.insertAppsv1DaemonSetsFromCluster(ctx, cluster, appsv1DaemonSets, opts.Appsv1DaemonSets); err != nil {
			errs = multierror.Append(errs, err)
		}
		if err := b.insertAppsv1StatefulSetsFromCluster(ctx, cluster, appsv1StatefulSets, opts.Appsv1StatefulSets); err != nil {
			errs = multierror.Append(errs, err)
		}

	}

	outputSnap := NewRemoteSnapshot(
		name,

		appmeshK8SAwsv1Beta2Meshes,
		appmeshK8SAwsv1Beta2VirtualNodes,
		v1ConfigMaps,
		v1Services,
		v1Pods,
		v1Nodes,
		appsv1Deployments,
		appsv1ReplicaSets,
		appsv1DaemonSets,
		appsv1StatefulSets,
	)

	return outputSnap, errs
}

func (b *multiClusterRemoteBuilder) insertAppmeshK8SAwsv1Beta2MeshesFromCluster(ctx context.Context, cluster string, appmeshK8SAwsv1Beta2Meshes appmesh_k8s_aws_v1beta2_sets.MeshSet, opts ResourceRemoteBuildOptions) error {
	appmeshK8SAwsv1Beta2MeshClient, err := appmesh_k8s_aws_v1beta2.NewMulticlusterMeshClient(b.client).Cluster(cluster)
	if err != nil {
		return err
	}

	if opts.Verifier != nil {
		mgr, err := b.clusters.Cluster(cluster)
		if err != nil {
			return err
		}

		gvk := schema.GroupVersionKind{
			Group:   "appmesh.k8s.aws",
			Version: "v1beta2",
			Kind:    "Mesh",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			cluster,
			mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	appmeshK8SAwsv1Beta2MeshList, err := appmeshK8SAwsv1Beta2MeshClient.ListMesh(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range appmeshK8SAwsv1Beta2MeshList.Items {
		item := item               // pike
		item.ClusterName = cluster // set cluster for in-memory processing
		appmeshK8SAwsv1Beta2Meshes.Insert(&item)
	}

	return nil
}
func (b *multiClusterRemoteBuilder) insertAppmeshK8SAwsv1Beta2VirtualNodesFromCluster(ctx context.Context, cluster string, appmeshK8SAwsv1Beta2VirtualNodes appmesh_k8s_aws_v1beta2_sets.VirtualNodeSet, opts ResourceRemoteBuildOptions) error {
	appmeshK8SAwsv1Beta2VirtualNodeClient, err := appmesh_k8s_aws_v1beta2.NewMulticlusterVirtualNodeClient(b.client).Cluster(cluster)
	if err != nil {
		return err
	}

	if opts.Verifier != nil {
		mgr, err := b.clusters.Cluster(cluster)
		if err != nil {
			return err
		}

		gvk := schema.GroupVersionKind{
			Group:   "appmesh.k8s.aws",
			Version: "v1beta2",
			Kind:    "VirtualNode",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			cluster,
			mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	appmeshK8SAwsv1Beta2VirtualNodeList, err := appmeshK8SAwsv1Beta2VirtualNodeClient.ListVirtualNode(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range appmeshK8SAwsv1Beta2VirtualNodeList.Items {
		item := item               // pike
		item.ClusterName = cluster // set cluster for in-memory processing
		appmeshK8SAwsv1Beta2VirtualNodes.Insert(&item)
	}

	return nil
}

func (b *multiClusterRemoteBuilder) insertV1ConfigMapsFromCluster(ctx context.Context, cluster string, v1ConfigMaps v1_sets.ConfigMapSet, opts ResourceRemoteBuildOptions) error {
	v1ConfigMapClient, err := v1.NewMulticlusterConfigMapClient(b.client).Cluster(cluster)
	if err != nil {
		return err
	}

	if opts.Verifier != nil {
		mgr, err := b.clusters.Cluster(cluster)
		if err != nil {
			return err
		}

		gvk := schema.GroupVersionKind{
			Group:   "",
			Version: "v1",
			Kind:    "ConfigMap",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			cluster,
			mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	v1ConfigMapList, err := v1ConfigMapClient.ListConfigMap(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range v1ConfigMapList.Items {
		item := item               // pike
		item.ClusterName = cluster // set cluster for in-memory processing
		v1ConfigMaps.Insert(&item)
	}

	return nil
}
func (b *multiClusterRemoteBuilder) insertV1ServicesFromCluster(ctx context.Context, cluster string, v1Services v1_sets.ServiceSet, opts ResourceRemoteBuildOptions) error {
	v1ServiceClient, err := v1.NewMulticlusterServiceClient(b.client).Cluster(cluster)
	if err != nil {
		return err
	}

	if opts.Verifier != nil {
		mgr, err := b.clusters.Cluster(cluster)
		if err != nil {
			return err
		}

		gvk := schema.GroupVersionKind{
			Group:   "",
			Version: "v1",
			Kind:    "Service",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			cluster,
			mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	v1ServiceList, err := v1ServiceClient.ListService(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range v1ServiceList.Items {
		item := item               // pike
		item.ClusterName = cluster // set cluster for in-memory processing
		v1Services.Insert(&item)
	}

	return nil
}
func (b *multiClusterRemoteBuilder) insertV1PodsFromCluster(ctx context.Context, cluster string, v1Pods v1_sets.PodSet, opts ResourceRemoteBuildOptions) error {
	v1PodClient, err := v1.NewMulticlusterPodClient(b.client).Cluster(cluster)
	if err != nil {
		return err
	}

	if opts.Verifier != nil {
		mgr, err := b.clusters.Cluster(cluster)
		if err != nil {
			return err
		}

		gvk := schema.GroupVersionKind{
			Group:   "",
			Version: "v1",
			Kind:    "Pod",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			cluster,
			mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	v1PodList, err := v1PodClient.ListPod(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range v1PodList.Items {
		item := item               // pike
		item.ClusterName = cluster // set cluster for in-memory processing
		v1Pods.Insert(&item)
	}

	return nil
}
func (b *multiClusterRemoteBuilder) insertV1NodesFromCluster(ctx context.Context, cluster string, v1Nodes v1_sets.NodeSet, opts ResourceRemoteBuildOptions) error {
	v1NodeClient, err := v1.NewMulticlusterNodeClient(b.client).Cluster(cluster)
	if err != nil {
		return err
	}

	if opts.Verifier != nil {
		mgr, err := b.clusters.Cluster(cluster)
		if err != nil {
			return err
		}

		gvk := schema.GroupVersionKind{
			Group:   "",
			Version: "v1",
			Kind:    "Node",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			cluster,
			mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	v1NodeList, err := v1NodeClient.ListNode(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range v1NodeList.Items {
		item := item               // pike
		item.ClusterName = cluster // set cluster for in-memory processing
		v1Nodes.Insert(&item)
	}

	return nil
}

func (b *multiClusterRemoteBuilder) insertAppsv1DeploymentsFromCluster(ctx context.Context, cluster string, appsv1Deployments apps_v1_sets.DeploymentSet, opts ResourceRemoteBuildOptions) error {
	appsv1DeploymentClient, err := apps_v1.NewMulticlusterDeploymentClient(b.client).Cluster(cluster)
	if err != nil {
		return err
	}

	if opts.Verifier != nil {
		mgr, err := b.clusters.Cluster(cluster)
		if err != nil {
			return err
		}

		gvk := schema.GroupVersionKind{
			Group:   "apps",
			Version: "v1",
			Kind:    "Deployment",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			cluster,
			mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	appsv1DeploymentList, err := appsv1DeploymentClient.ListDeployment(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range appsv1DeploymentList.Items {
		item := item               // pike
		item.ClusterName = cluster // set cluster for in-memory processing
		appsv1Deployments.Insert(&item)
	}

	return nil
}
func (b *multiClusterRemoteBuilder) insertAppsv1ReplicaSetsFromCluster(ctx context.Context, cluster string, appsv1ReplicaSets apps_v1_sets.ReplicaSetSet, opts ResourceRemoteBuildOptions) error {
	appsv1ReplicaSetClient, err := apps_v1.NewMulticlusterReplicaSetClient(b.client).Cluster(cluster)
	if err != nil {
		return err
	}

	if opts.Verifier != nil {
		mgr, err := b.clusters.Cluster(cluster)
		if err != nil {
			return err
		}

		gvk := schema.GroupVersionKind{
			Group:   "apps",
			Version: "v1",
			Kind:    "ReplicaSet",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			cluster,
			mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	appsv1ReplicaSetList, err := appsv1ReplicaSetClient.ListReplicaSet(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range appsv1ReplicaSetList.Items {
		item := item               // pike
		item.ClusterName = cluster // set cluster for in-memory processing
		appsv1ReplicaSets.Insert(&item)
	}

	return nil
}
func (b *multiClusterRemoteBuilder) insertAppsv1DaemonSetsFromCluster(ctx context.Context, cluster string, appsv1DaemonSets apps_v1_sets.DaemonSetSet, opts ResourceRemoteBuildOptions) error {
	appsv1DaemonSetClient, err := apps_v1.NewMulticlusterDaemonSetClient(b.client).Cluster(cluster)
	if err != nil {
		return err
	}

	if opts.Verifier != nil {
		mgr, err := b.clusters.Cluster(cluster)
		if err != nil {
			return err
		}

		gvk := schema.GroupVersionKind{
			Group:   "apps",
			Version: "v1",
			Kind:    "DaemonSet",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			cluster,
			mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	appsv1DaemonSetList, err := appsv1DaemonSetClient.ListDaemonSet(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range appsv1DaemonSetList.Items {
		item := item               // pike
		item.ClusterName = cluster // set cluster for in-memory processing
		appsv1DaemonSets.Insert(&item)
	}

	return nil
}
func (b *multiClusterRemoteBuilder) insertAppsv1StatefulSetsFromCluster(ctx context.Context, cluster string, appsv1StatefulSets apps_v1_sets.StatefulSetSet, opts ResourceRemoteBuildOptions) error {
	appsv1StatefulSetClient, err := apps_v1.NewMulticlusterStatefulSetClient(b.client).Cluster(cluster)
	if err != nil {
		return err
	}

	if opts.Verifier != nil {
		mgr, err := b.clusters.Cluster(cluster)
		if err != nil {
			return err
		}

		gvk := schema.GroupVersionKind{
			Group:   "apps",
			Version: "v1",
			Kind:    "StatefulSet",
		}

		if resourceRegistered, err := opts.Verifier.VerifyServerResource(
			cluster,
			mgr.GetConfig(),
			gvk,
		); err != nil {
			return err
		} else if !resourceRegistered {
			return nil
		}
	}

	appsv1StatefulSetList, err := appsv1StatefulSetClient.ListStatefulSet(ctx, opts.ListOptions...)
	if err != nil {
		return err
	}

	for _, item := range appsv1StatefulSetList.Items {
		item := item               // pike
		item.ClusterName = cluster // set cluster for in-memory processing
		appsv1StatefulSets.Insert(&item)
	}

	return nil
}
