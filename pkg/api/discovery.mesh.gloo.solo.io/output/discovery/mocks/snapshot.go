// Code generated by MockGen. DO NOT EDIT.
// Source: ./snapshot.go

// Package mock_discovery is a generated GoMock package.
package mock_discovery

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	discovery "github.com/solo-io/gloo-mesh/pkg/api/discovery.mesh.gloo.solo.io/output/discovery"
	v1alpha2 "github.com/solo-io/gloo-mesh/pkg/api/discovery.mesh.gloo.solo.io/v1alpha2"
	v1alpha2sets "github.com/solo-io/gloo-mesh/pkg/api/discovery.mesh.gloo.solo.io/v1alpha2/sets"
	output "github.com/solo-io/skv2/contrib/pkg/output"
	multicluster "github.com/solo-io/skv2/pkg/multicluster"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockSnapshot is a mock of Snapshot interface
type MockSnapshot struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotMockRecorder
}

// MockSnapshotMockRecorder is the mock recorder for MockSnapshot
type MockSnapshotMockRecorder struct {
	mock *MockSnapshot
}

// NewMockSnapshot creates a new mock instance
func NewMockSnapshot(ctrl *gomock.Controller) *MockSnapshot {
	mock := &MockSnapshot{ctrl: ctrl}
	mock.recorder = &MockSnapshotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSnapshot) EXPECT() *MockSnapshotMockRecorder {
	return m.recorder
}

// DiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargets mocks base method
func (m *MockSnapshot) DiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargets() []discovery.LabeledDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargetSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargets")
	ret0, _ := ret[0].([]discovery.LabeledDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargetSet)
	return ret0
}

// DiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargets indicates an expected call of DiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargets
func (mr *MockSnapshotMockRecorder) DiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargets", reflect.TypeOf((*MockSnapshot)(nil).DiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargets))
}

// DiscoveryMeshGlooSoloIo_V1Alpha2_Workloads mocks base method
func (m *MockSnapshot) DiscoveryMeshGlooSoloIo_V1Alpha2_Workloads() []discovery.LabeledDiscoveryMeshGlooSoloIo_V1Alpha2_WorkloadSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoveryMeshGlooSoloIo_V1Alpha2_Workloads")
	ret0, _ := ret[0].([]discovery.LabeledDiscoveryMeshGlooSoloIo_V1Alpha2_WorkloadSet)
	return ret0
}

// DiscoveryMeshGlooSoloIo_V1Alpha2_Workloads indicates an expected call of DiscoveryMeshGlooSoloIo_V1Alpha2_Workloads
func (mr *MockSnapshotMockRecorder) DiscoveryMeshGlooSoloIo_V1Alpha2_Workloads() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoveryMeshGlooSoloIo_V1Alpha2_Workloads", reflect.TypeOf((*MockSnapshot)(nil).DiscoveryMeshGlooSoloIo_V1Alpha2_Workloads))
}

// DiscoveryMeshGlooSoloIo_V1Alpha2_Meshes mocks base method
func (m *MockSnapshot) DiscoveryMeshGlooSoloIo_V1Alpha2_Meshes() []discovery.LabeledDiscoveryMeshGlooSoloIo_V1Alpha2_MeshSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoveryMeshGlooSoloIo_V1Alpha2_Meshes")
	ret0, _ := ret[0].([]discovery.LabeledDiscoveryMeshGlooSoloIo_V1Alpha2_MeshSet)
	return ret0
}

// DiscoveryMeshGlooSoloIo_V1Alpha2_Meshes indicates an expected call of DiscoveryMeshGlooSoloIo_V1Alpha2_Meshes
func (mr *MockSnapshotMockRecorder) DiscoveryMeshGlooSoloIo_V1Alpha2_Meshes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoveryMeshGlooSoloIo_V1Alpha2_Meshes", reflect.TypeOf((*MockSnapshot)(nil).DiscoveryMeshGlooSoloIo_V1Alpha2_Meshes))
}

// ApplyLocalCluster mocks base method
func (m *MockSnapshot) ApplyLocalCluster(ctx context.Context, clusterClient client.Client, errHandler output.ErrorHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ApplyLocalCluster", ctx, clusterClient, errHandler)
}

// ApplyLocalCluster indicates an expected call of ApplyLocalCluster
func (mr *MockSnapshotMockRecorder) ApplyLocalCluster(ctx, clusterClient, errHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyLocalCluster", reflect.TypeOf((*MockSnapshot)(nil).ApplyLocalCluster), ctx, clusterClient, errHandler)
}

// ApplyMultiCluster mocks base method
func (m *MockSnapshot) ApplyMultiCluster(ctx context.Context, multiClusterClient multicluster.Client, errHandler output.ErrorHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ApplyMultiCluster", ctx, multiClusterClient, errHandler)
}

// ApplyMultiCluster indicates an expected call of ApplyMultiCluster
func (mr *MockSnapshotMockRecorder) ApplyMultiCluster(ctx, multiClusterClient, errHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyMultiCluster", reflect.TypeOf((*MockSnapshot)(nil).ApplyMultiCluster), ctx, multiClusterClient, errHandler)
}

// MarshalJSON mocks base method
func (m *MockSnapshot) MarshalJSON() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalJSON")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalJSON indicates an expected call of MarshalJSON
func (mr *MockSnapshotMockRecorder) MarshalJSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalJSON", reflect.TypeOf((*MockSnapshot)(nil).MarshalJSON))
}

// MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargetSet is a mock of LabeledDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargetSet interface
type MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargetSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargetSetMockRecorder
}

// MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargetSetMockRecorder is the mock recorder for MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargetSet
type MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargetSetMockRecorder struct {
	mock *MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargetSet
}

// NewMockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargetSet creates a new mock instance
func NewMockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargetSet(ctrl *gomock.Controller) *MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargetSet {
	mock := &MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargetSet{ctrl: ctrl}
	mock.recorder = &MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargetSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargetSet) EXPECT() *MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargetSetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargetSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargetSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargetSet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargetSet) Set() v1alpha2sets.TrafficTargetSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha2sets.TrafficTargetSet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargetSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargetSet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargetSet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargetSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargetSet)(nil).Generic))
}

// MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_WorkloadSet is a mock of LabeledDiscoveryMeshGlooSoloIo_V1Alpha2_WorkloadSet interface
type MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_WorkloadSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_WorkloadSetMockRecorder
}

// MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_WorkloadSetMockRecorder is the mock recorder for MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_WorkloadSet
type MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_WorkloadSetMockRecorder struct {
	mock *MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_WorkloadSet
}

// NewMockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_WorkloadSet creates a new mock instance
func NewMockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_WorkloadSet(ctrl *gomock.Controller) *MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_WorkloadSet {
	mock := &MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_WorkloadSet{ctrl: ctrl}
	mock.recorder = &MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_WorkloadSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_WorkloadSet) EXPECT() *MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_WorkloadSetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_WorkloadSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_WorkloadSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_WorkloadSet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_WorkloadSet) Set() v1alpha2sets.WorkloadSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha2sets.WorkloadSet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_WorkloadSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_WorkloadSet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_WorkloadSet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_WorkloadSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_WorkloadSet)(nil).Generic))
}

// MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_MeshSet is a mock of LabeledDiscoveryMeshGlooSoloIo_V1Alpha2_MeshSet interface
type MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_MeshSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_MeshSetMockRecorder
}

// MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_MeshSetMockRecorder is the mock recorder for MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_MeshSet
type MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_MeshSetMockRecorder struct {
	mock *MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_MeshSet
}

// NewMockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_MeshSet creates a new mock instance
func NewMockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_MeshSet(ctrl *gomock.Controller) *MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_MeshSet {
	mock := &MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_MeshSet{ctrl: ctrl}
	mock.recorder = &MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_MeshSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_MeshSet) EXPECT() *MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_MeshSetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_MeshSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_MeshSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_MeshSet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_MeshSet) Set() v1alpha2sets.MeshSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha2sets.MeshSet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_MeshSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_MeshSet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_MeshSet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_MeshSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledDiscoveryMeshGlooSoloIo_V1Alpha2_MeshSet)(nil).Generic))
}

// MockBuilder is a mock of Builder interface
type MockBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockBuilderMockRecorder
}

// MockBuilderMockRecorder is the mock recorder for MockBuilder
type MockBuilderMockRecorder struct {
	mock *MockBuilder
}

// NewMockBuilder creates a new mock instance
func NewMockBuilder(ctrl *gomock.Controller) *MockBuilder {
	mock := &MockBuilder{ctrl: ctrl}
	mock.recorder = &MockBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBuilder) EXPECT() *MockBuilderMockRecorder {
	return m.recorder
}

// AddDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargets mocks base method
func (m *MockBuilder) AddDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargets(discoveryMeshGlooSoloIoV1Alpha2TrafficTargets ...*v1alpha2.TrafficTarget) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range discoveryMeshGlooSoloIoV1Alpha2TrafficTargets {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargets", varargs...)
}

// AddDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargets indicates an expected call of AddDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargets
func (mr *MockBuilderMockRecorder) AddDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargets(discoveryMeshGlooSoloIoV1Alpha2TrafficTargets ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargets", reflect.TypeOf((*MockBuilder)(nil).AddDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargets), discoveryMeshGlooSoloIoV1Alpha2TrafficTargets...)
}

// GetDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargets mocks base method
func (m *MockBuilder) GetDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargets() v1alpha2sets.TrafficTargetSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargets")
	ret0, _ := ret[0].(v1alpha2sets.TrafficTargetSet)
	return ret0
}

// GetDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargets indicates an expected call of GetDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargets
func (mr *MockBuilderMockRecorder) GetDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargets", reflect.TypeOf((*MockBuilder)(nil).GetDiscoveryMeshGlooSoloIo_V1Alpha2_TrafficTargets))
}

// AddDiscoveryMeshGlooSoloIo_V1Alpha2_Workloads mocks base method
func (m *MockBuilder) AddDiscoveryMeshGlooSoloIo_V1Alpha2_Workloads(discoveryMeshGlooSoloIoV1Alpha2Workloads ...*v1alpha2.Workload) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range discoveryMeshGlooSoloIoV1Alpha2Workloads {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddDiscoveryMeshGlooSoloIo_V1Alpha2_Workloads", varargs...)
}

// AddDiscoveryMeshGlooSoloIo_V1Alpha2_Workloads indicates an expected call of AddDiscoveryMeshGlooSoloIo_V1Alpha2_Workloads
func (mr *MockBuilderMockRecorder) AddDiscoveryMeshGlooSoloIo_V1Alpha2_Workloads(discoveryMeshGlooSoloIoV1Alpha2Workloads ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDiscoveryMeshGlooSoloIo_V1Alpha2_Workloads", reflect.TypeOf((*MockBuilder)(nil).AddDiscoveryMeshGlooSoloIo_V1Alpha2_Workloads), discoveryMeshGlooSoloIoV1Alpha2Workloads...)
}

// GetDiscoveryMeshGlooSoloIo_V1Alpha2_Workloads mocks base method
func (m *MockBuilder) GetDiscoveryMeshGlooSoloIo_V1Alpha2_Workloads() v1alpha2sets.WorkloadSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscoveryMeshGlooSoloIo_V1Alpha2_Workloads")
	ret0, _ := ret[0].(v1alpha2sets.WorkloadSet)
	return ret0
}

// GetDiscoveryMeshGlooSoloIo_V1Alpha2_Workloads indicates an expected call of GetDiscoveryMeshGlooSoloIo_V1Alpha2_Workloads
func (mr *MockBuilderMockRecorder) GetDiscoveryMeshGlooSoloIo_V1Alpha2_Workloads() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscoveryMeshGlooSoloIo_V1Alpha2_Workloads", reflect.TypeOf((*MockBuilder)(nil).GetDiscoveryMeshGlooSoloIo_V1Alpha2_Workloads))
}

// AddDiscoveryMeshGlooSoloIo_V1Alpha2_Meshes mocks base method
func (m *MockBuilder) AddDiscoveryMeshGlooSoloIo_V1Alpha2_Meshes(discoveryMeshGlooSoloIoV1Alpha2Meshes ...*v1alpha2.Mesh) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range discoveryMeshGlooSoloIoV1Alpha2Meshes {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddDiscoveryMeshGlooSoloIo_V1Alpha2_Meshes", varargs...)
}

// AddDiscoveryMeshGlooSoloIo_V1Alpha2_Meshes indicates an expected call of AddDiscoveryMeshGlooSoloIo_V1Alpha2_Meshes
func (mr *MockBuilderMockRecorder) AddDiscoveryMeshGlooSoloIo_V1Alpha2_Meshes(discoveryMeshGlooSoloIoV1Alpha2Meshes ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDiscoveryMeshGlooSoloIo_V1Alpha2_Meshes", reflect.TypeOf((*MockBuilder)(nil).AddDiscoveryMeshGlooSoloIo_V1Alpha2_Meshes), discoveryMeshGlooSoloIoV1Alpha2Meshes...)
}

// GetDiscoveryMeshGlooSoloIo_V1Alpha2_Meshes mocks base method
func (m *MockBuilder) GetDiscoveryMeshGlooSoloIo_V1Alpha2_Meshes() v1alpha2sets.MeshSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscoveryMeshGlooSoloIo_V1Alpha2_Meshes")
	ret0, _ := ret[0].(v1alpha2sets.MeshSet)
	return ret0
}

// GetDiscoveryMeshGlooSoloIo_V1Alpha2_Meshes indicates an expected call of GetDiscoveryMeshGlooSoloIo_V1Alpha2_Meshes
func (mr *MockBuilderMockRecorder) GetDiscoveryMeshGlooSoloIo_V1Alpha2_Meshes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscoveryMeshGlooSoloIo_V1Alpha2_Meshes", reflect.TypeOf((*MockBuilder)(nil).GetDiscoveryMeshGlooSoloIo_V1Alpha2_Meshes))
}

// BuildLabelPartitionedSnapshot mocks base method
func (m *MockBuilder) BuildLabelPartitionedSnapshot(labelKey string) (discovery.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildLabelPartitionedSnapshot", labelKey)
	ret0, _ := ret[0].(discovery.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildLabelPartitionedSnapshot indicates an expected call of BuildLabelPartitionedSnapshot
func (mr *MockBuilderMockRecorder) BuildLabelPartitionedSnapshot(labelKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildLabelPartitionedSnapshot", reflect.TypeOf((*MockBuilder)(nil).BuildLabelPartitionedSnapshot), labelKey)
}

// BuildSinglePartitionedSnapshot mocks base method
func (m *MockBuilder) BuildSinglePartitionedSnapshot(snapshotLabels map[string]string) (discovery.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildSinglePartitionedSnapshot", snapshotLabels)
	ret0, _ := ret[0].(discovery.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildSinglePartitionedSnapshot indicates an expected call of BuildSinglePartitionedSnapshot
func (mr *MockBuilderMockRecorder) BuildSinglePartitionedSnapshot(snapshotLabels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildSinglePartitionedSnapshot", reflect.TypeOf((*MockBuilder)(nil).BuildSinglePartitionedSnapshot), snapshotLabels)
}

// AddCluster mocks base method
func (m *MockBuilder) AddCluster(cluster string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddCluster", cluster)
}

// AddCluster indicates an expected call of AddCluster
func (mr *MockBuilderMockRecorder) AddCluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCluster", reflect.TypeOf((*MockBuilder)(nil).AddCluster), cluster)
}

// Clusters mocks base method
func (m *MockBuilder) Clusters() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clusters")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Clusters indicates an expected call of Clusters
func (mr *MockBuilderMockRecorder) Clusters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clusters", reflect.TypeOf((*MockBuilder)(nil).Clusters))
}

// Merge mocks base method
func (m *MockBuilder) Merge(other discovery.Builder) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Merge", other)
}

// Merge indicates an expected call of Merge
func (mr *MockBuilderMockRecorder) Merge(other interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MockBuilder)(nil).Merge), other)
}

// Clone mocks base method
func (m *MockBuilder) Clone() discovery.Builder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(discovery.Builder)
	return ret0
}

// Clone indicates an expected call of Clone
func (mr *MockBuilderMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockBuilder)(nil).Clone))
}

// Delta mocks base method
func (m *MockBuilder) Delta(newSnap discovery.Builder) output.SnapshotDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSnap)
	ret0, _ := ret[0].(output.SnapshotDelta)
	return ret0
}

// Delta indicates an expected call of Delta
func (mr *MockBuilderMockRecorder) Delta(newSnap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockBuilder)(nil).Delta), newSnap)
}
