// Code generated by MockGen. DO NOT EDIT.
// Source: ./snapshot.go

// Package mock_discovery is a generated GoMock package.
package mock_discovery

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	discovery "github.com/solo-io/gloo-mesh/pkg/api/discovery.mesh.gloo.solo.io/output/discovery"
	v1alpha2 "github.com/solo-io/gloo-mesh/pkg/api/discovery.mesh.gloo.solo.io/v1alpha2"
	v1alpha2sets "github.com/solo-io/gloo-mesh/pkg/api/discovery.mesh.gloo.solo.io/v1alpha2/sets"
	output "github.com/solo-io/skv2/contrib/pkg/output"
	multicluster "github.com/solo-io/skv2/pkg/multicluster"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockSnapshot is a mock of Snapshot interface
type MockSnapshot struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotMockRecorder
}

// MockSnapshotMockRecorder is the mock recorder for MockSnapshot
type MockSnapshotMockRecorder struct {
	mock *MockSnapshot
}

// NewMockSnapshot creates a new mock instance
func NewMockSnapshot(ctrl *gomock.Controller) *MockSnapshot {
	mock := &MockSnapshot{ctrl: ctrl}
	mock.recorder = &MockSnapshotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSnapshot) EXPECT() *MockSnapshotMockRecorder {
	return m.recorder
}

// DiscoveryMeshGlooSoloIov1Alpha2TrafficTargets mocks base method
func (m *MockSnapshot) DiscoveryMeshGlooSoloIov1Alpha2TrafficTargets() []discovery.LabeledDiscoveryMeshGlooSoloIov1Alpha2TrafficTargetSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoveryMeshGlooSoloIov1Alpha2TrafficTargets")
	ret0, _ := ret[0].([]discovery.LabeledDiscoveryMeshGlooSoloIov1Alpha2TrafficTargetSet)
	return ret0
}

// DiscoveryMeshGlooSoloIov1Alpha2TrafficTargets indicates an expected call of DiscoveryMeshGlooSoloIov1Alpha2TrafficTargets
func (mr *MockSnapshotMockRecorder) DiscoveryMeshGlooSoloIov1Alpha2TrafficTargets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoveryMeshGlooSoloIov1Alpha2TrafficTargets", reflect.TypeOf((*MockSnapshot)(nil).DiscoveryMeshGlooSoloIov1Alpha2TrafficTargets))
}

// DiscoveryMeshGlooSoloIov1Alpha2Workloads mocks base method
func (m *MockSnapshot) DiscoveryMeshGlooSoloIov1Alpha2Workloads() []discovery.LabeledDiscoveryMeshGlooSoloIov1Alpha2WorkloadSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoveryMeshGlooSoloIov1Alpha2Workloads")
	ret0, _ := ret[0].([]discovery.LabeledDiscoveryMeshGlooSoloIov1Alpha2WorkloadSet)
	return ret0
}

// DiscoveryMeshGlooSoloIov1Alpha2Workloads indicates an expected call of DiscoveryMeshGlooSoloIov1Alpha2Workloads
func (mr *MockSnapshotMockRecorder) DiscoveryMeshGlooSoloIov1Alpha2Workloads() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoveryMeshGlooSoloIov1Alpha2Workloads", reflect.TypeOf((*MockSnapshot)(nil).DiscoveryMeshGlooSoloIov1Alpha2Workloads))
}

// DiscoveryMeshGlooSoloIov1Alpha2Meshes mocks base method
func (m *MockSnapshot) DiscoveryMeshGlooSoloIov1Alpha2Meshes() []discovery.LabeledDiscoveryMeshGlooSoloIov1Alpha2MeshSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoveryMeshGlooSoloIov1Alpha2Meshes")
	ret0, _ := ret[0].([]discovery.LabeledDiscoveryMeshGlooSoloIov1Alpha2MeshSet)
	return ret0
}

// DiscoveryMeshGlooSoloIov1Alpha2Meshes indicates an expected call of DiscoveryMeshGlooSoloIov1Alpha2Meshes
func (mr *MockSnapshotMockRecorder) DiscoveryMeshGlooSoloIov1Alpha2Meshes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoveryMeshGlooSoloIov1Alpha2Meshes", reflect.TypeOf((*MockSnapshot)(nil).DiscoveryMeshGlooSoloIov1Alpha2Meshes))
}

// ApplyLocalCluster mocks base method
func (m *MockSnapshot) ApplyLocalCluster(ctx context.Context, clusterClient client.Client, errHandler output.ErrorHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ApplyLocalCluster", ctx, clusterClient, errHandler)
}

// ApplyLocalCluster indicates an expected call of ApplyLocalCluster
func (mr *MockSnapshotMockRecorder) ApplyLocalCluster(ctx, clusterClient, errHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyLocalCluster", reflect.TypeOf((*MockSnapshot)(nil).ApplyLocalCluster), ctx, clusterClient, errHandler)
}

// ApplyMultiCluster mocks base method
func (m *MockSnapshot) ApplyMultiCluster(ctx context.Context, multiClusterClient multicluster.Client, errHandler output.ErrorHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ApplyMultiCluster", ctx, multiClusterClient, errHandler)
}

// ApplyMultiCluster indicates an expected call of ApplyMultiCluster
func (mr *MockSnapshotMockRecorder) ApplyMultiCluster(ctx, multiClusterClient, errHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyMultiCluster", reflect.TypeOf((*MockSnapshot)(nil).ApplyMultiCluster), ctx, multiClusterClient, errHandler)
}

// MarshalJSON mocks base method
func (m *MockSnapshot) MarshalJSON() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalJSON")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalJSON indicates an expected call of MarshalJSON
func (mr *MockSnapshotMockRecorder) MarshalJSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalJSON", reflect.TypeOf((*MockSnapshot)(nil).MarshalJSON))
}

// MockLabeledDiscoveryMeshGlooSoloIov1Alpha2TrafficTargetSet is a mock of LabeledDiscoveryMeshGlooSoloIov1Alpha2TrafficTargetSet interface
type MockLabeledDiscoveryMeshGlooSoloIov1Alpha2TrafficTargetSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledDiscoveryMeshGlooSoloIov1Alpha2TrafficTargetSetMockRecorder
}

// MockLabeledDiscoveryMeshGlooSoloIov1Alpha2TrafficTargetSetMockRecorder is the mock recorder for MockLabeledDiscoveryMeshGlooSoloIov1Alpha2TrafficTargetSet
type MockLabeledDiscoveryMeshGlooSoloIov1Alpha2TrafficTargetSetMockRecorder struct {
	mock *MockLabeledDiscoveryMeshGlooSoloIov1Alpha2TrafficTargetSet
}

// NewMockLabeledDiscoveryMeshGlooSoloIov1Alpha2TrafficTargetSet creates a new mock instance
func NewMockLabeledDiscoveryMeshGlooSoloIov1Alpha2TrafficTargetSet(ctrl *gomock.Controller) *MockLabeledDiscoveryMeshGlooSoloIov1Alpha2TrafficTargetSet {
	mock := &MockLabeledDiscoveryMeshGlooSoloIov1Alpha2TrafficTargetSet{ctrl: ctrl}
	mock.recorder = &MockLabeledDiscoveryMeshGlooSoloIov1Alpha2TrafficTargetSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledDiscoveryMeshGlooSoloIov1Alpha2TrafficTargetSet) EXPECT() *MockLabeledDiscoveryMeshGlooSoloIov1Alpha2TrafficTargetSetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledDiscoveryMeshGlooSoloIov1Alpha2TrafficTargetSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledDiscoveryMeshGlooSoloIov1Alpha2TrafficTargetSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledDiscoveryMeshGlooSoloIov1Alpha2TrafficTargetSet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledDiscoveryMeshGlooSoloIov1Alpha2TrafficTargetSet) Set() v1alpha2sets.TrafficTargetSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha2sets.TrafficTargetSet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledDiscoveryMeshGlooSoloIov1Alpha2TrafficTargetSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledDiscoveryMeshGlooSoloIov1Alpha2TrafficTargetSet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledDiscoveryMeshGlooSoloIov1Alpha2TrafficTargetSet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledDiscoveryMeshGlooSoloIov1Alpha2TrafficTargetSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledDiscoveryMeshGlooSoloIov1Alpha2TrafficTargetSet)(nil).Generic))
}

// MockLabeledDiscoveryMeshGlooSoloIov1Alpha2WorkloadSet is a mock of LabeledDiscoveryMeshGlooSoloIov1Alpha2WorkloadSet interface
type MockLabeledDiscoveryMeshGlooSoloIov1Alpha2WorkloadSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledDiscoveryMeshGlooSoloIov1Alpha2WorkloadSetMockRecorder
}

// MockLabeledDiscoveryMeshGlooSoloIov1Alpha2WorkloadSetMockRecorder is the mock recorder for MockLabeledDiscoveryMeshGlooSoloIov1Alpha2WorkloadSet
type MockLabeledDiscoveryMeshGlooSoloIov1Alpha2WorkloadSetMockRecorder struct {
	mock *MockLabeledDiscoveryMeshGlooSoloIov1Alpha2WorkloadSet
}

// NewMockLabeledDiscoveryMeshGlooSoloIov1Alpha2WorkloadSet creates a new mock instance
func NewMockLabeledDiscoveryMeshGlooSoloIov1Alpha2WorkloadSet(ctrl *gomock.Controller) *MockLabeledDiscoveryMeshGlooSoloIov1Alpha2WorkloadSet {
	mock := &MockLabeledDiscoveryMeshGlooSoloIov1Alpha2WorkloadSet{ctrl: ctrl}
	mock.recorder = &MockLabeledDiscoveryMeshGlooSoloIov1Alpha2WorkloadSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledDiscoveryMeshGlooSoloIov1Alpha2WorkloadSet) EXPECT() *MockLabeledDiscoveryMeshGlooSoloIov1Alpha2WorkloadSetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledDiscoveryMeshGlooSoloIov1Alpha2WorkloadSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledDiscoveryMeshGlooSoloIov1Alpha2WorkloadSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledDiscoveryMeshGlooSoloIov1Alpha2WorkloadSet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledDiscoveryMeshGlooSoloIov1Alpha2WorkloadSet) Set() v1alpha2sets.WorkloadSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha2sets.WorkloadSet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledDiscoveryMeshGlooSoloIov1Alpha2WorkloadSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledDiscoveryMeshGlooSoloIov1Alpha2WorkloadSet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledDiscoveryMeshGlooSoloIov1Alpha2WorkloadSet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledDiscoveryMeshGlooSoloIov1Alpha2WorkloadSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledDiscoveryMeshGlooSoloIov1Alpha2WorkloadSet)(nil).Generic))
}

// MockLabeledDiscoveryMeshGlooSoloIov1Alpha2MeshSet is a mock of LabeledDiscoveryMeshGlooSoloIov1Alpha2MeshSet interface
type MockLabeledDiscoveryMeshGlooSoloIov1Alpha2MeshSet struct {
	ctrl     *gomock.Controller
	recorder *MockLabeledDiscoveryMeshGlooSoloIov1Alpha2MeshSetMockRecorder
}

// MockLabeledDiscoveryMeshGlooSoloIov1Alpha2MeshSetMockRecorder is the mock recorder for MockLabeledDiscoveryMeshGlooSoloIov1Alpha2MeshSet
type MockLabeledDiscoveryMeshGlooSoloIov1Alpha2MeshSetMockRecorder struct {
	mock *MockLabeledDiscoveryMeshGlooSoloIov1Alpha2MeshSet
}

// NewMockLabeledDiscoveryMeshGlooSoloIov1Alpha2MeshSet creates a new mock instance
func NewMockLabeledDiscoveryMeshGlooSoloIov1Alpha2MeshSet(ctrl *gomock.Controller) *MockLabeledDiscoveryMeshGlooSoloIov1Alpha2MeshSet {
	mock := &MockLabeledDiscoveryMeshGlooSoloIov1Alpha2MeshSet{ctrl: ctrl}
	mock.recorder = &MockLabeledDiscoveryMeshGlooSoloIov1Alpha2MeshSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLabeledDiscoveryMeshGlooSoloIov1Alpha2MeshSet) EXPECT() *MockLabeledDiscoveryMeshGlooSoloIov1Alpha2MeshSetMockRecorder {
	return m.recorder
}

// Labels mocks base method
func (m *MockLabeledDiscoveryMeshGlooSoloIov1Alpha2MeshSet) Labels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Labels indicates an expected call of Labels
func (mr *MockLabeledDiscoveryMeshGlooSoloIov1Alpha2MeshSetMockRecorder) Labels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockLabeledDiscoveryMeshGlooSoloIov1Alpha2MeshSet)(nil).Labels))
}

// Set mocks base method
func (m *MockLabeledDiscoveryMeshGlooSoloIov1Alpha2MeshSet) Set() v1alpha2sets.MeshSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(v1alpha2sets.MeshSet)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLabeledDiscoveryMeshGlooSoloIov1Alpha2MeshSetMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLabeledDiscoveryMeshGlooSoloIov1Alpha2MeshSet)(nil).Set))
}

// Generic mocks base method
func (m *MockLabeledDiscoveryMeshGlooSoloIov1Alpha2MeshSet) Generic() output.ResourceList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(output.ResourceList)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockLabeledDiscoveryMeshGlooSoloIov1Alpha2MeshSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockLabeledDiscoveryMeshGlooSoloIov1Alpha2MeshSet)(nil).Generic))
}

// MockBuilder is a mock of Builder interface
type MockBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockBuilderMockRecorder
}

// MockBuilderMockRecorder is the mock recorder for MockBuilder
type MockBuilderMockRecorder struct {
	mock *MockBuilder
}

// NewMockBuilder creates a new mock instance
func NewMockBuilder(ctrl *gomock.Controller) *MockBuilder {
	mock := &MockBuilder{ctrl: ctrl}
	mock.recorder = &MockBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBuilder) EXPECT() *MockBuilderMockRecorder {
	return m.recorder
}

// AddDiscoveryMeshGlooSoloIov1Alpha2TrafficTargets mocks base method
func (m *MockBuilder) AddDiscoveryMeshGlooSoloIov1Alpha2TrafficTargets(discoveryMeshGlooSoloIov1Alpha2TrafficTargets ...*v1alpha2.TrafficTarget) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range discoveryMeshGlooSoloIov1Alpha2TrafficTargets {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddDiscoveryMeshGlooSoloIov1Alpha2TrafficTargets", varargs...)
}

// AddDiscoveryMeshGlooSoloIov1Alpha2TrafficTargets indicates an expected call of AddDiscoveryMeshGlooSoloIov1Alpha2TrafficTargets
func (mr *MockBuilderMockRecorder) AddDiscoveryMeshGlooSoloIov1Alpha2TrafficTargets(discoveryMeshGlooSoloIov1Alpha2TrafficTargets ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDiscoveryMeshGlooSoloIov1Alpha2TrafficTargets", reflect.TypeOf((*MockBuilder)(nil).AddDiscoveryMeshGlooSoloIov1Alpha2TrafficTargets), discoveryMeshGlooSoloIov1Alpha2TrafficTargets...)
}

// GetDiscoveryMeshGlooSoloIov1Alpha2TrafficTargets mocks base method
func (m *MockBuilder) GetDiscoveryMeshGlooSoloIov1Alpha2TrafficTargets() v1alpha2sets.TrafficTargetSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscoveryMeshGlooSoloIov1Alpha2TrafficTargets")
	ret0, _ := ret[0].(v1alpha2sets.TrafficTargetSet)
	return ret0
}

// GetDiscoveryMeshGlooSoloIov1Alpha2TrafficTargets indicates an expected call of GetDiscoveryMeshGlooSoloIov1Alpha2TrafficTargets
func (mr *MockBuilderMockRecorder) GetDiscoveryMeshGlooSoloIov1Alpha2TrafficTargets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscoveryMeshGlooSoloIov1Alpha2TrafficTargets", reflect.TypeOf((*MockBuilder)(nil).GetDiscoveryMeshGlooSoloIov1Alpha2TrafficTargets))
}

// AddDiscoveryMeshGlooSoloIov1Alpha2Workloads mocks base method
func (m *MockBuilder) AddDiscoveryMeshGlooSoloIov1Alpha2Workloads(discoveryMeshGlooSoloIov1Alpha2Workloads ...*v1alpha2.Workload) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range discoveryMeshGlooSoloIov1Alpha2Workloads {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddDiscoveryMeshGlooSoloIov1Alpha2Workloads", varargs...)
}

// AddDiscoveryMeshGlooSoloIov1Alpha2Workloads indicates an expected call of AddDiscoveryMeshGlooSoloIov1Alpha2Workloads
func (mr *MockBuilderMockRecorder) AddDiscoveryMeshGlooSoloIov1Alpha2Workloads(discoveryMeshGlooSoloIov1Alpha2Workloads ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDiscoveryMeshGlooSoloIov1Alpha2Workloads", reflect.TypeOf((*MockBuilder)(nil).AddDiscoveryMeshGlooSoloIov1Alpha2Workloads), discoveryMeshGlooSoloIov1Alpha2Workloads...)
}

// GetDiscoveryMeshGlooSoloIov1Alpha2Workloads mocks base method
func (m *MockBuilder) GetDiscoveryMeshGlooSoloIov1Alpha2Workloads() v1alpha2sets.WorkloadSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscoveryMeshGlooSoloIov1Alpha2Workloads")
	ret0, _ := ret[0].(v1alpha2sets.WorkloadSet)
	return ret0
}

// GetDiscoveryMeshGlooSoloIov1Alpha2Workloads indicates an expected call of GetDiscoveryMeshGlooSoloIov1Alpha2Workloads
func (mr *MockBuilderMockRecorder) GetDiscoveryMeshGlooSoloIov1Alpha2Workloads() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscoveryMeshGlooSoloIov1Alpha2Workloads", reflect.TypeOf((*MockBuilder)(nil).GetDiscoveryMeshGlooSoloIov1Alpha2Workloads))
}

// AddDiscoveryMeshGlooSoloIov1Alpha2Meshes mocks base method
func (m *MockBuilder) AddDiscoveryMeshGlooSoloIov1Alpha2Meshes(discoveryMeshGlooSoloIov1Alpha2Meshes ...*v1alpha2.Mesh) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range discoveryMeshGlooSoloIov1Alpha2Meshes {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddDiscoveryMeshGlooSoloIov1Alpha2Meshes", varargs...)
}

// AddDiscoveryMeshGlooSoloIov1Alpha2Meshes indicates an expected call of AddDiscoveryMeshGlooSoloIov1Alpha2Meshes
func (mr *MockBuilderMockRecorder) AddDiscoveryMeshGlooSoloIov1Alpha2Meshes(discoveryMeshGlooSoloIov1Alpha2Meshes ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDiscoveryMeshGlooSoloIov1Alpha2Meshes", reflect.TypeOf((*MockBuilder)(nil).AddDiscoveryMeshGlooSoloIov1Alpha2Meshes), discoveryMeshGlooSoloIov1Alpha2Meshes...)
}

// GetDiscoveryMeshGlooSoloIov1Alpha2Meshes mocks base method
func (m *MockBuilder) GetDiscoveryMeshGlooSoloIov1Alpha2Meshes() v1alpha2sets.MeshSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscoveryMeshGlooSoloIov1Alpha2Meshes")
	ret0, _ := ret[0].(v1alpha2sets.MeshSet)
	return ret0
}

// GetDiscoveryMeshGlooSoloIov1Alpha2Meshes indicates an expected call of GetDiscoveryMeshGlooSoloIov1Alpha2Meshes
func (mr *MockBuilderMockRecorder) GetDiscoveryMeshGlooSoloIov1Alpha2Meshes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscoveryMeshGlooSoloIov1Alpha2Meshes", reflect.TypeOf((*MockBuilder)(nil).GetDiscoveryMeshGlooSoloIov1Alpha2Meshes))
}

// BuildLabelPartitionedSnapshot mocks base method
func (m *MockBuilder) BuildLabelPartitionedSnapshot(labelKey string) (discovery.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildLabelPartitionedSnapshot", labelKey)
	ret0, _ := ret[0].(discovery.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildLabelPartitionedSnapshot indicates an expected call of BuildLabelPartitionedSnapshot
func (mr *MockBuilderMockRecorder) BuildLabelPartitionedSnapshot(labelKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildLabelPartitionedSnapshot", reflect.TypeOf((*MockBuilder)(nil).BuildLabelPartitionedSnapshot), labelKey)
}

// BuildSinglePartitionedSnapshot mocks base method
func (m *MockBuilder) BuildSinglePartitionedSnapshot(snapshotLabels map[string]string) (discovery.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildSinglePartitionedSnapshot", snapshotLabels)
	ret0, _ := ret[0].(discovery.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildSinglePartitionedSnapshot indicates an expected call of BuildSinglePartitionedSnapshot
func (mr *MockBuilderMockRecorder) BuildSinglePartitionedSnapshot(snapshotLabels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildSinglePartitionedSnapshot", reflect.TypeOf((*MockBuilder)(nil).BuildSinglePartitionedSnapshot), snapshotLabels)
}

// AddCluster mocks base method
func (m *MockBuilder) AddCluster(cluster string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddCluster", cluster)
}

// AddCluster indicates an expected call of AddCluster
func (mr *MockBuilderMockRecorder) AddCluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCluster", reflect.TypeOf((*MockBuilder)(nil).AddCluster), cluster)
}

// Clusters mocks base method
func (m *MockBuilder) Clusters() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clusters")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Clusters indicates an expected call of Clusters
func (mr *MockBuilderMockRecorder) Clusters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clusters", reflect.TypeOf((*MockBuilder)(nil).Clusters))
}

// Merge mocks base method
func (m *MockBuilder) Merge(other discovery.Builder) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Merge", other)
}

// Merge indicates an expected call of Merge
func (mr *MockBuilderMockRecorder) Merge(other interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MockBuilder)(nil).Merge), other)
}

// Clone mocks base method
func (m *MockBuilder) Clone() discovery.Builder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(discovery.Builder)
	return ret0
}

// Clone indicates an expected call of Clone
func (mr *MockBuilderMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockBuilder)(nil).Clone))
}

// Delta mocks base method
func (m *MockBuilder) Delta(newSnap discovery.Builder) output.SnapshotDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSnap)
	ret0, _ := ret[0].(output.SnapshotDelta)
	return ret0
}

// Delta indicates an expected call of Delta
func (mr *MockBuilderMockRecorder) Delta(newSnap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockBuilder)(nil).Delta), newSnap)
}
