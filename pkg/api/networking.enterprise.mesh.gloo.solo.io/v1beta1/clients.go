// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./clients.go -destination mocks/clients.go

package v1beta1

import (
	"context"

	"github.com/solo-io/skv2/pkg/controllerutils"
	"github.com/solo-io/skv2/pkg/multicluster"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// MulticlusterClientset for the networking.enterprise.mesh.gloo.solo.io/v1beta1 APIs
type MulticlusterClientset interface {
	// Cluster returns a Clientset for the given cluster
	Cluster(cluster string) (Clientset, error)
}

type multiclusterClientset struct {
	client multicluster.Client
}

func NewMulticlusterClientset(client multicluster.Client) MulticlusterClientset {
	return &multiclusterClientset{client: client}
}

func (m *multiclusterClientset) Cluster(cluster string) (Clientset, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

// clienset for the networking.enterprise.mesh.gloo.solo.io/v1beta1 APIs
type Clientset interface {
	// clienset for the networking.enterprise.mesh.gloo.solo.io/v1beta1/v1beta1 APIs
	WasmDeployments() WasmDeploymentClient
	// clienset for the networking.enterprise.mesh.gloo.solo.io/v1beta1/v1beta1 APIs
	VirtualDestinations() VirtualDestinationClient
	// clienset for the networking.enterprise.mesh.gloo.solo.io/v1beta1/v1beta1 APIs
	FederatedGateways() FederatedGatewayClient
	// clienset for the networking.enterprise.mesh.gloo.solo.io/v1beta1/v1beta1 APIs
	RouteTables() RouteTableClient
	// clienset for the networking.enterprise.mesh.gloo.solo.io/v1beta1/v1beta1 APIs
	DelegatedRouteTables() DelegatedRouteTableClient
}

type clientSet struct {
	client client.Client
}

func NewClientsetFromConfig(cfg *rest.Config) (Clientset, error) {
	scheme := scheme.Scheme
	if err := AddToScheme(scheme); err != nil {
		return nil, err
	}
	client, err := client.New(cfg, client.Options{
		Scheme: scheme,
	})
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

func NewClientset(client client.Client) Clientset {
	return &clientSet{client: client}
}

// clienset for the networking.enterprise.mesh.gloo.solo.io/v1beta1/v1beta1 APIs
func (c *clientSet) WasmDeployments() WasmDeploymentClient {
	return NewWasmDeploymentClient(c.client)
}

// clienset for the networking.enterprise.mesh.gloo.solo.io/v1beta1/v1beta1 APIs
func (c *clientSet) VirtualDestinations() VirtualDestinationClient {
	return NewVirtualDestinationClient(c.client)
}

// clienset for the networking.enterprise.mesh.gloo.solo.io/v1beta1/v1beta1 APIs
func (c *clientSet) FederatedGateways() FederatedGatewayClient {
	return NewFederatedGatewayClient(c.client)
}

// clienset for the networking.enterprise.mesh.gloo.solo.io/v1beta1/v1beta1 APIs
func (c *clientSet) RouteTables() RouteTableClient {
	return NewRouteTableClient(c.client)
}

// clienset for the networking.enterprise.mesh.gloo.solo.io/v1beta1/v1beta1 APIs
func (c *clientSet) DelegatedRouteTables() DelegatedRouteTableClient {
	return NewDelegatedRouteTableClient(c.client)
}

// Reader knows how to read and list WasmDeployments.
type WasmDeploymentReader interface {
	// Get retrieves a WasmDeployment for the given object key
	GetWasmDeployment(ctx context.Context, key client.ObjectKey) (*WasmDeployment, error)

	// List retrieves list of WasmDeployments for a given namespace and list options.
	ListWasmDeployment(ctx context.Context, opts ...client.ListOption) (*WasmDeploymentList, error)
}

// WasmDeploymentTransitionFunction instructs the WasmDeploymentWriter how to transition between an existing
// WasmDeployment object and a desired on an Upsert
type WasmDeploymentTransitionFunction func(existing, desired *WasmDeployment) error

// Writer knows how to create, delete, and update WasmDeployments.
type WasmDeploymentWriter interface {
	// Create saves the WasmDeployment object.
	CreateWasmDeployment(ctx context.Context, obj *WasmDeployment, opts ...client.CreateOption) error

	// Delete deletes the WasmDeployment object.
	DeleteWasmDeployment(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given WasmDeployment object.
	UpdateWasmDeployment(ctx context.Context, obj *WasmDeployment, opts ...client.UpdateOption) error

	// Patch patches the given WasmDeployment object.
	PatchWasmDeployment(ctx context.Context, obj *WasmDeployment, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all WasmDeployment objects matching the given options.
	DeleteAllOfWasmDeployment(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the WasmDeployment object.
	UpsertWasmDeployment(ctx context.Context, obj *WasmDeployment, transitionFuncs ...WasmDeploymentTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a WasmDeployment object.
type WasmDeploymentStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given WasmDeployment object.
	UpdateWasmDeploymentStatus(ctx context.Context, obj *WasmDeployment, opts ...client.UpdateOption) error

	// Patch patches the given WasmDeployment object's subresource.
	PatchWasmDeploymentStatus(ctx context.Context, obj *WasmDeployment, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on WasmDeployments.
type WasmDeploymentClient interface {
	WasmDeploymentReader
	WasmDeploymentWriter
	WasmDeploymentStatusWriter
}

type wasmDeploymentClient struct {
	client client.Client
}

func NewWasmDeploymentClient(client client.Client) *wasmDeploymentClient {
	return &wasmDeploymentClient{client: client}
}

func (c *wasmDeploymentClient) GetWasmDeployment(ctx context.Context, key client.ObjectKey) (*WasmDeployment, error) {
	obj := &WasmDeployment{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *wasmDeploymentClient) ListWasmDeployment(ctx context.Context, opts ...client.ListOption) (*WasmDeploymentList, error) {
	list := &WasmDeploymentList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *wasmDeploymentClient) CreateWasmDeployment(ctx context.Context, obj *WasmDeployment, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *wasmDeploymentClient) DeleteWasmDeployment(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &WasmDeployment{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *wasmDeploymentClient) UpdateWasmDeployment(ctx context.Context, obj *WasmDeployment, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *wasmDeploymentClient) PatchWasmDeployment(ctx context.Context, obj *WasmDeployment, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *wasmDeploymentClient) DeleteAllOfWasmDeployment(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &WasmDeployment{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *wasmDeploymentClient) UpsertWasmDeployment(ctx context.Context, obj *WasmDeployment, transitionFuncs ...WasmDeploymentTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*WasmDeployment), desired.(*WasmDeployment)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *wasmDeploymentClient) UpdateWasmDeploymentStatus(ctx context.Context, obj *WasmDeployment, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *wasmDeploymentClient) PatchWasmDeploymentStatus(ctx context.Context, obj *WasmDeployment, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides WasmDeploymentClients for multiple clusters.
type MulticlusterWasmDeploymentClient interface {
	// Cluster returns a WasmDeploymentClient for the given cluster
	Cluster(cluster string) (WasmDeploymentClient, error)
}

type multiclusterWasmDeploymentClient struct {
	client multicluster.Client
}

func NewMulticlusterWasmDeploymentClient(client multicluster.Client) MulticlusterWasmDeploymentClient {
	return &multiclusterWasmDeploymentClient{client: client}
}

func (m *multiclusterWasmDeploymentClient) Cluster(cluster string) (WasmDeploymentClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewWasmDeploymentClient(client), nil
}

// Reader knows how to read and list VirtualDestinations.
type VirtualDestinationReader interface {
	// Get retrieves a VirtualDestination for the given object key
	GetVirtualDestination(ctx context.Context, key client.ObjectKey) (*VirtualDestination, error)

	// List retrieves list of VirtualDestinations for a given namespace and list options.
	ListVirtualDestination(ctx context.Context, opts ...client.ListOption) (*VirtualDestinationList, error)
}

// VirtualDestinationTransitionFunction instructs the VirtualDestinationWriter how to transition between an existing
// VirtualDestination object and a desired on an Upsert
type VirtualDestinationTransitionFunction func(existing, desired *VirtualDestination) error

// Writer knows how to create, delete, and update VirtualDestinations.
type VirtualDestinationWriter interface {
	// Create saves the VirtualDestination object.
	CreateVirtualDestination(ctx context.Context, obj *VirtualDestination, opts ...client.CreateOption) error

	// Delete deletes the VirtualDestination object.
	DeleteVirtualDestination(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given VirtualDestination object.
	UpdateVirtualDestination(ctx context.Context, obj *VirtualDestination, opts ...client.UpdateOption) error

	// Patch patches the given VirtualDestination object.
	PatchVirtualDestination(ctx context.Context, obj *VirtualDestination, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all VirtualDestination objects matching the given options.
	DeleteAllOfVirtualDestination(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the VirtualDestination object.
	UpsertVirtualDestination(ctx context.Context, obj *VirtualDestination, transitionFuncs ...VirtualDestinationTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a VirtualDestination object.
type VirtualDestinationStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given VirtualDestination object.
	UpdateVirtualDestinationStatus(ctx context.Context, obj *VirtualDestination, opts ...client.UpdateOption) error

	// Patch patches the given VirtualDestination object's subresource.
	PatchVirtualDestinationStatus(ctx context.Context, obj *VirtualDestination, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on VirtualDestinations.
type VirtualDestinationClient interface {
	VirtualDestinationReader
	VirtualDestinationWriter
	VirtualDestinationStatusWriter
}

type virtualDestinationClient struct {
	client client.Client
}

func NewVirtualDestinationClient(client client.Client) *virtualDestinationClient {
	return &virtualDestinationClient{client: client}
}

func (c *virtualDestinationClient) GetVirtualDestination(ctx context.Context, key client.ObjectKey) (*VirtualDestination, error) {
	obj := &VirtualDestination{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *virtualDestinationClient) ListVirtualDestination(ctx context.Context, opts ...client.ListOption) (*VirtualDestinationList, error) {
	list := &VirtualDestinationList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *virtualDestinationClient) CreateVirtualDestination(ctx context.Context, obj *VirtualDestination, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *virtualDestinationClient) DeleteVirtualDestination(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &VirtualDestination{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *virtualDestinationClient) UpdateVirtualDestination(ctx context.Context, obj *VirtualDestination, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *virtualDestinationClient) PatchVirtualDestination(ctx context.Context, obj *VirtualDestination, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *virtualDestinationClient) DeleteAllOfVirtualDestination(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &VirtualDestination{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *virtualDestinationClient) UpsertVirtualDestination(ctx context.Context, obj *VirtualDestination, transitionFuncs ...VirtualDestinationTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*VirtualDestination), desired.(*VirtualDestination)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *virtualDestinationClient) UpdateVirtualDestinationStatus(ctx context.Context, obj *VirtualDestination, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *virtualDestinationClient) PatchVirtualDestinationStatus(ctx context.Context, obj *VirtualDestination, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides VirtualDestinationClients for multiple clusters.
type MulticlusterVirtualDestinationClient interface {
	// Cluster returns a VirtualDestinationClient for the given cluster
	Cluster(cluster string) (VirtualDestinationClient, error)
}

type multiclusterVirtualDestinationClient struct {
	client multicluster.Client
}

func NewMulticlusterVirtualDestinationClient(client multicluster.Client) MulticlusterVirtualDestinationClient {
	return &multiclusterVirtualDestinationClient{client: client}
}

func (m *multiclusterVirtualDestinationClient) Cluster(cluster string) (VirtualDestinationClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewVirtualDestinationClient(client), nil
}

// Reader knows how to read and list FederatedGateways.
type FederatedGatewayReader interface {
	// Get retrieves a FederatedGateway for the given object key
	GetFederatedGateway(ctx context.Context, key client.ObjectKey) (*FederatedGateway, error)

	// List retrieves list of FederatedGateways for a given namespace and list options.
	ListFederatedGateway(ctx context.Context, opts ...client.ListOption) (*FederatedGatewayList, error)
}

// FederatedGatewayTransitionFunction instructs the FederatedGatewayWriter how to transition between an existing
// FederatedGateway object and a desired on an Upsert
type FederatedGatewayTransitionFunction func(existing, desired *FederatedGateway) error

// Writer knows how to create, delete, and update FederatedGateways.
type FederatedGatewayWriter interface {
	// Create saves the FederatedGateway object.
	CreateFederatedGateway(ctx context.Context, obj *FederatedGateway, opts ...client.CreateOption) error

	// Delete deletes the FederatedGateway object.
	DeleteFederatedGateway(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given FederatedGateway object.
	UpdateFederatedGateway(ctx context.Context, obj *FederatedGateway, opts ...client.UpdateOption) error

	// Patch patches the given FederatedGateway object.
	PatchFederatedGateway(ctx context.Context, obj *FederatedGateway, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all FederatedGateway objects matching the given options.
	DeleteAllOfFederatedGateway(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the FederatedGateway object.
	UpsertFederatedGateway(ctx context.Context, obj *FederatedGateway, transitionFuncs ...FederatedGatewayTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a FederatedGateway object.
type FederatedGatewayStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given FederatedGateway object.
	UpdateFederatedGatewayStatus(ctx context.Context, obj *FederatedGateway, opts ...client.UpdateOption) error

	// Patch patches the given FederatedGateway object's subresource.
	PatchFederatedGatewayStatus(ctx context.Context, obj *FederatedGateway, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on FederatedGateways.
type FederatedGatewayClient interface {
	FederatedGatewayReader
	FederatedGatewayWriter
	FederatedGatewayStatusWriter
}

type federatedGatewayClient struct {
	client client.Client
}

func NewFederatedGatewayClient(client client.Client) *federatedGatewayClient {
	return &federatedGatewayClient{client: client}
}

func (c *federatedGatewayClient) GetFederatedGateway(ctx context.Context, key client.ObjectKey) (*FederatedGateway, error) {
	obj := &FederatedGateway{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *federatedGatewayClient) ListFederatedGateway(ctx context.Context, opts ...client.ListOption) (*FederatedGatewayList, error) {
	list := &FederatedGatewayList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *federatedGatewayClient) CreateFederatedGateway(ctx context.Context, obj *FederatedGateway, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *federatedGatewayClient) DeleteFederatedGateway(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &FederatedGateway{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *federatedGatewayClient) UpdateFederatedGateway(ctx context.Context, obj *FederatedGateway, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *federatedGatewayClient) PatchFederatedGateway(ctx context.Context, obj *FederatedGateway, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *federatedGatewayClient) DeleteAllOfFederatedGateway(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &FederatedGateway{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *federatedGatewayClient) UpsertFederatedGateway(ctx context.Context, obj *FederatedGateway, transitionFuncs ...FederatedGatewayTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*FederatedGateway), desired.(*FederatedGateway)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *federatedGatewayClient) UpdateFederatedGatewayStatus(ctx context.Context, obj *FederatedGateway, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *federatedGatewayClient) PatchFederatedGatewayStatus(ctx context.Context, obj *FederatedGateway, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides FederatedGatewayClients for multiple clusters.
type MulticlusterFederatedGatewayClient interface {
	// Cluster returns a FederatedGatewayClient for the given cluster
	Cluster(cluster string) (FederatedGatewayClient, error)
}

type multiclusterFederatedGatewayClient struct {
	client multicluster.Client
}

func NewMulticlusterFederatedGatewayClient(client multicluster.Client) MulticlusterFederatedGatewayClient {
	return &multiclusterFederatedGatewayClient{client: client}
}

func (m *multiclusterFederatedGatewayClient) Cluster(cluster string) (FederatedGatewayClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewFederatedGatewayClient(client), nil
}

// Reader knows how to read and list RouteTables.
type RouteTableReader interface {
	// Get retrieves a RouteTable for the given object key
	GetRouteTable(ctx context.Context, key client.ObjectKey) (*RouteTable, error)

	// List retrieves list of RouteTables for a given namespace and list options.
	ListRouteTable(ctx context.Context, opts ...client.ListOption) (*RouteTableList, error)
}

// RouteTableTransitionFunction instructs the RouteTableWriter how to transition between an existing
// RouteTable object and a desired on an Upsert
type RouteTableTransitionFunction func(existing, desired *RouteTable) error

// Writer knows how to create, delete, and update RouteTables.
type RouteTableWriter interface {
	// Create saves the RouteTable object.
	CreateRouteTable(ctx context.Context, obj *RouteTable, opts ...client.CreateOption) error

	// Delete deletes the RouteTable object.
	DeleteRouteTable(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given RouteTable object.
	UpdateRouteTable(ctx context.Context, obj *RouteTable, opts ...client.UpdateOption) error

	// Patch patches the given RouteTable object.
	PatchRouteTable(ctx context.Context, obj *RouteTable, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all RouteTable objects matching the given options.
	DeleteAllOfRouteTable(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the RouteTable object.
	UpsertRouteTable(ctx context.Context, obj *RouteTable, transitionFuncs ...RouteTableTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a RouteTable object.
type RouteTableStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given RouteTable object.
	UpdateRouteTableStatus(ctx context.Context, obj *RouteTable, opts ...client.UpdateOption) error

	// Patch patches the given RouteTable object's subresource.
	PatchRouteTableStatus(ctx context.Context, obj *RouteTable, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on RouteTables.
type RouteTableClient interface {
	RouteTableReader
	RouteTableWriter
	RouteTableStatusWriter
}

type routeTableClient struct {
	client client.Client
}

func NewRouteTableClient(client client.Client) *routeTableClient {
	return &routeTableClient{client: client}
}

func (c *routeTableClient) GetRouteTable(ctx context.Context, key client.ObjectKey) (*RouteTable, error) {
	obj := &RouteTable{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *routeTableClient) ListRouteTable(ctx context.Context, opts ...client.ListOption) (*RouteTableList, error) {
	list := &RouteTableList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *routeTableClient) CreateRouteTable(ctx context.Context, obj *RouteTable, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *routeTableClient) DeleteRouteTable(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &RouteTable{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *routeTableClient) UpdateRouteTable(ctx context.Context, obj *RouteTable, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *routeTableClient) PatchRouteTable(ctx context.Context, obj *RouteTable, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *routeTableClient) DeleteAllOfRouteTable(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &RouteTable{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *routeTableClient) UpsertRouteTable(ctx context.Context, obj *RouteTable, transitionFuncs ...RouteTableTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*RouteTable), desired.(*RouteTable)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *routeTableClient) UpdateRouteTableStatus(ctx context.Context, obj *RouteTable, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *routeTableClient) PatchRouteTableStatus(ctx context.Context, obj *RouteTable, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides RouteTableClients for multiple clusters.
type MulticlusterRouteTableClient interface {
	// Cluster returns a RouteTableClient for the given cluster
	Cluster(cluster string) (RouteTableClient, error)
}

type multiclusterRouteTableClient struct {
	client multicluster.Client
}

func NewMulticlusterRouteTableClient(client multicluster.Client) MulticlusterRouteTableClient {
	return &multiclusterRouteTableClient{client: client}
}

func (m *multiclusterRouteTableClient) Cluster(cluster string) (RouteTableClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewRouteTableClient(client), nil
}

// Reader knows how to read and list DelegatedRouteTables.
type DelegatedRouteTableReader interface {
	// Get retrieves a DelegatedRouteTable for the given object key
	GetDelegatedRouteTable(ctx context.Context, key client.ObjectKey) (*DelegatedRouteTable, error)

	// List retrieves list of DelegatedRouteTables for a given namespace and list options.
	ListDelegatedRouteTable(ctx context.Context, opts ...client.ListOption) (*DelegatedRouteTableList, error)
}

// DelegatedRouteTableTransitionFunction instructs the DelegatedRouteTableWriter how to transition between an existing
// DelegatedRouteTable object and a desired on an Upsert
type DelegatedRouteTableTransitionFunction func(existing, desired *DelegatedRouteTable) error

// Writer knows how to create, delete, and update DelegatedRouteTables.
type DelegatedRouteTableWriter interface {
	// Create saves the DelegatedRouteTable object.
	CreateDelegatedRouteTable(ctx context.Context, obj *DelegatedRouteTable, opts ...client.CreateOption) error

	// Delete deletes the DelegatedRouteTable object.
	DeleteDelegatedRouteTable(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given DelegatedRouteTable object.
	UpdateDelegatedRouteTable(ctx context.Context, obj *DelegatedRouteTable, opts ...client.UpdateOption) error

	// Patch patches the given DelegatedRouteTable object.
	PatchDelegatedRouteTable(ctx context.Context, obj *DelegatedRouteTable, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all DelegatedRouteTable objects matching the given options.
	DeleteAllOfDelegatedRouteTable(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the DelegatedRouteTable object.
	UpsertDelegatedRouteTable(ctx context.Context, obj *DelegatedRouteTable, transitionFuncs ...DelegatedRouteTableTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a DelegatedRouteTable object.
type DelegatedRouteTableStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given DelegatedRouteTable object.
	UpdateDelegatedRouteTableStatus(ctx context.Context, obj *DelegatedRouteTable, opts ...client.UpdateOption) error

	// Patch patches the given DelegatedRouteTable object's subresource.
	PatchDelegatedRouteTableStatus(ctx context.Context, obj *DelegatedRouteTable, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on DelegatedRouteTables.
type DelegatedRouteTableClient interface {
	DelegatedRouteTableReader
	DelegatedRouteTableWriter
	DelegatedRouteTableStatusWriter
}

type delegatedRouteTableClient struct {
	client client.Client
}

func NewDelegatedRouteTableClient(client client.Client) *delegatedRouteTableClient {
	return &delegatedRouteTableClient{client: client}
}

func (c *delegatedRouteTableClient) GetDelegatedRouteTable(ctx context.Context, key client.ObjectKey) (*DelegatedRouteTable, error) {
	obj := &DelegatedRouteTable{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *delegatedRouteTableClient) ListDelegatedRouteTable(ctx context.Context, opts ...client.ListOption) (*DelegatedRouteTableList, error) {
	list := &DelegatedRouteTableList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *delegatedRouteTableClient) CreateDelegatedRouteTable(ctx context.Context, obj *DelegatedRouteTable, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *delegatedRouteTableClient) DeleteDelegatedRouteTable(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &DelegatedRouteTable{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *delegatedRouteTableClient) UpdateDelegatedRouteTable(ctx context.Context, obj *DelegatedRouteTable, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *delegatedRouteTableClient) PatchDelegatedRouteTable(ctx context.Context, obj *DelegatedRouteTable, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *delegatedRouteTableClient) DeleteAllOfDelegatedRouteTable(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &DelegatedRouteTable{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *delegatedRouteTableClient) UpsertDelegatedRouteTable(ctx context.Context, obj *DelegatedRouteTable, transitionFuncs ...DelegatedRouteTableTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*DelegatedRouteTable), desired.(*DelegatedRouteTable)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *delegatedRouteTableClient) UpdateDelegatedRouteTableStatus(ctx context.Context, obj *DelegatedRouteTable, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *delegatedRouteTableClient) PatchDelegatedRouteTableStatus(ctx context.Context, obj *DelegatedRouteTable, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides DelegatedRouteTableClients for multiple clusters.
type MulticlusterDelegatedRouteTableClient interface {
	// Cluster returns a DelegatedRouteTableClient for the given cluster
	Cluster(cluster string) (DelegatedRouteTableClient, error)
}

type multiclusterDelegatedRouteTableClient struct {
	client multicluster.Client
}

func NewMulticlusterDelegatedRouteTableClient(client multicluster.Client) MulticlusterDelegatedRouteTableClient {
	return &multiclusterDelegatedRouteTableClient{client: client}
}

func (m *multiclusterDelegatedRouteTableClient) Cluster(cluster string) (DelegatedRouteTableClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewDelegatedRouteTableClient(client), nil
}
