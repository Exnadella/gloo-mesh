// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients.go

// Package mock_v1beta1 is a generated GoMock package.
package mock_v1beta1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1beta1 "github.com/solo-io/gloo-mesh/pkg/api/networking.enterprise.mesh.gloo.solo.io/v1beta1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockMulticlusterClientset is a mock of MulticlusterClientset interface
type MockMulticlusterClientset struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterClientsetMockRecorder
}

// MockMulticlusterClientsetMockRecorder is the mock recorder for MockMulticlusterClientset
type MockMulticlusterClientsetMockRecorder struct {
	mock *MockMulticlusterClientset
}

// NewMockMulticlusterClientset creates a new mock instance
func NewMockMulticlusterClientset(ctrl *gomock.Controller) *MockMulticlusterClientset {
	mock := &MockMulticlusterClientset{ctrl: ctrl}
	mock.recorder = &MockMulticlusterClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterClientset) EXPECT() *MockMulticlusterClientsetMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockMulticlusterClientset) Cluster(cluster string) (v1beta1.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1beta1.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster
func (mr *MockMulticlusterClientsetMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterClientset)(nil).Cluster), cluster)
}

// MockClientset is a mock of Clientset interface
type MockClientset struct {
	ctrl     *gomock.Controller
	recorder *MockClientsetMockRecorder
}

// MockClientsetMockRecorder is the mock recorder for MockClientset
type MockClientsetMockRecorder struct {
	mock *MockClientset
}

// NewMockClientset creates a new mock instance
func NewMockClientset(ctrl *gomock.Controller) *MockClientset {
	mock := &MockClientset{ctrl: ctrl}
	mock.recorder = &MockClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientset) EXPECT() *MockClientsetMockRecorder {
	return m.recorder
}

// WasmDeployments mocks base method
func (m *MockClientset) WasmDeployments() v1beta1.WasmDeploymentClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WasmDeployments")
	ret0, _ := ret[0].(v1beta1.WasmDeploymentClient)
	return ret0
}

// WasmDeployments indicates an expected call of WasmDeployments
func (mr *MockClientsetMockRecorder) WasmDeployments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WasmDeployments", reflect.TypeOf((*MockClientset)(nil).WasmDeployments))
}

// VirtualDestinations mocks base method
func (m *MockClientset) VirtualDestinations() v1beta1.VirtualDestinationClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualDestinations")
	ret0, _ := ret[0].(v1beta1.VirtualDestinationClient)
	return ret0
}

// VirtualDestinations indicates an expected call of VirtualDestinations
func (mr *MockClientsetMockRecorder) VirtualDestinations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualDestinations", reflect.TypeOf((*MockClientset)(nil).VirtualDestinations))
}

// FederatedGateways mocks base method
func (m *MockClientset) FederatedGateways() v1beta1.FederatedGatewayClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FederatedGateways")
	ret0, _ := ret[0].(v1beta1.FederatedGatewayClient)
	return ret0
}

// FederatedGateways indicates an expected call of FederatedGateways
func (mr *MockClientsetMockRecorder) FederatedGateways() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FederatedGateways", reflect.TypeOf((*MockClientset)(nil).FederatedGateways))
}

// RouteTables mocks base method
func (m *MockClientset) RouteTables() v1beta1.RouteTableClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteTables")
	ret0, _ := ret[0].(v1beta1.RouteTableClient)
	return ret0
}

// RouteTables indicates an expected call of RouteTables
func (mr *MockClientsetMockRecorder) RouteTables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteTables", reflect.TypeOf((*MockClientset)(nil).RouteTables))
}

// DelegatedRouteTables mocks base method
func (m *MockClientset) DelegatedRouteTables() v1beta1.DelegatedRouteTableClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelegatedRouteTables")
	ret0, _ := ret[0].(v1beta1.DelegatedRouteTableClient)
	return ret0
}

// DelegatedRouteTables indicates an expected call of DelegatedRouteTables
func (mr *MockClientsetMockRecorder) DelegatedRouteTables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelegatedRouteTables", reflect.TypeOf((*MockClientset)(nil).DelegatedRouteTables))
}

// MockWasmDeploymentReader is a mock of WasmDeploymentReader interface
type MockWasmDeploymentReader struct {
	ctrl     *gomock.Controller
	recorder *MockWasmDeploymentReaderMockRecorder
}

// MockWasmDeploymentReaderMockRecorder is the mock recorder for MockWasmDeploymentReader
type MockWasmDeploymentReaderMockRecorder struct {
	mock *MockWasmDeploymentReader
}

// NewMockWasmDeploymentReader creates a new mock instance
func NewMockWasmDeploymentReader(ctrl *gomock.Controller) *MockWasmDeploymentReader {
	mock := &MockWasmDeploymentReader{ctrl: ctrl}
	mock.recorder = &MockWasmDeploymentReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWasmDeploymentReader) EXPECT() *MockWasmDeploymentReaderMockRecorder {
	return m.recorder
}

// GetWasmDeployment mocks base method
func (m *MockWasmDeploymentReader) GetWasmDeployment(ctx context.Context, key client.ObjectKey) (*v1beta1.WasmDeployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWasmDeployment", ctx, key)
	ret0, _ := ret[0].(*v1beta1.WasmDeployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWasmDeployment indicates an expected call of GetWasmDeployment
func (mr *MockWasmDeploymentReaderMockRecorder) GetWasmDeployment(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWasmDeployment", reflect.TypeOf((*MockWasmDeploymentReader)(nil).GetWasmDeployment), ctx, key)
}

// ListWasmDeployment mocks base method
func (m *MockWasmDeploymentReader) ListWasmDeployment(ctx context.Context, opts ...client.ListOption) (*v1beta1.WasmDeploymentList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWasmDeployment", varargs...)
	ret0, _ := ret[0].(*v1beta1.WasmDeploymentList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWasmDeployment indicates an expected call of ListWasmDeployment
func (mr *MockWasmDeploymentReaderMockRecorder) ListWasmDeployment(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWasmDeployment", reflect.TypeOf((*MockWasmDeploymentReader)(nil).ListWasmDeployment), varargs...)
}

// MockWasmDeploymentWriter is a mock of WasmDeploymentWriter interface
type MockWasmDeploymentWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWasmDeploymentWriterMockRecorder
}

// MockWasmDeploymentWriterMockRecorder is the mock recorder for MockWasmDeploymentWriter
type MockWasmDeploymentWriterMockRecorder struct {
	mock *MockWasmDeploymentWriter
}

// NewMockWasmDeploymentWriter creates a new mock instance
func NewMockWasmDeploymentWriter(ctrl *gomock.Controller) *MockWasmDeploymentWriter {
	mock := &MockWasmDeploymentWriter{ctrl: ctrl}
	mock.recorder = &MockWasmDeploymentWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWasmDeploymentWriter) EXPECT() *MockWasmDeploymentWriterMockRecorder {
	return m.recorder
}

// CreateWasmDeployment mocks base method
func (m *MockWasmDeploymentWriter) CreateWasmDeployment(ctx context.Context, obj *v1beta1.WasmDeployment, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWasmDeployment", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWasmDeployment indicates an expected call of CreateWasmDeployment
func (mr *MockWasmDeploymentWriterMockRecorder) CreateWasmDeployment(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWasmDeployment", reflect.TypeOf((*MockWasmDeploymentWriter)(nil).CreateWasmDeployment), varargs...)
}

// DeleteWasmDeployment mocks base method
func (m *MockWasmDeploymentWriter) DeleteWasmDeployment(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWasmDeployment", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWasmDeployment indicates an expected call of DeleteWasmDeployment
func (mr *MockWasmDeploymentWriterMockRecorder) DeleteWasmDeployment(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWasmDeployment", reflect.TypeOf((*MockWasmDeploymentWriter)(nil).DeleteWasmDeployment), varargs...)
}

// UpdateWasmDeployment mocks base method
func (m *MockWasmDeploymentWriter) UpdateWasmDeployment(ctx context.Context, obj *v1beta1.WasmDeployment, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWasmDeployment", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWasmDeployment indicates an expected call of UpdateWasmDeployment
func (mr *MockWasmDeploymentWriterMockRecorder) UpdateWasmDeployment(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWasmDeployment", reflect.TypeOf((*MockWasmDeploymentWriter)(nil).UpdateWasmDeployment), varargs...)
}

// PatchWasmDeployment mocks base method
func (m *MockWasmDeploymentWriter) PatchWasmDeployment(ctx context.Context, obj *v1beta1.WasmDeployment, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchWasmDeployment", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchWasmDeployment indicates an expected call of PatchWasmDeployment
func (mr *MockWasmDeploymentWriterMockRecorder) PatchWasmDeployment(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchWasmDeployment", reflect.TypeOf((*MockWasmDeploymentWriter)(nil).PatchWasmDeployment), varargs...)
}

// DeleteAllOfWasmDeployment mocks base method
func (m *MockWasmDeploymentWriter) DeleteAllOfWasmDeployment(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfWasmDeployment", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfWasmDeployment indicates an expected call of DeleteAllOfWasmDeployment
func (mr *MockWasmDeploymentWriterMockRecorder) DeleteAllOfWasmDeployment(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfWasmDeployment", reflect.TypeOf((*MockWasmDeploymentWriter)(nil).DeleteAllOfWasmDeployment), varargs...)
}

// UpsertWasmDeployment mocks base method
func (m *MockWasmDeploymentWriter) UpsertWasmDeployment(ctx context.Context, obj *v1beta1.WasmDeployment, transitionFuncs ...v1beta1.WasmDeploymentTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertWasmDeployment", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertWasmDeployment indicates an expected call of UpsertWasmDeployment
func (mr *MockWasmDeploymentWriterMockRecorder) UpsertWasmDeployment(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertWasmDeployment", reflect.TypeOf((*MockWasmDeploymentWriter)(nil).UpsertWasmDeployment), varargs...)
}

// MockWasmDeploymentStatusWriter is a mock of WasmDeploymentStatusWriter interface
type MockWasmDeploymentStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWasmDeploymentStatusWriterMockRecorder
}

// MockWasmDeploymentStatusWriterMockRecorder is the mock recorder for MockWasmDeploymentStatusWriter
type MockWasmDeploymentStatusWriterMockRecorder struct {
	mock *MockWasmDeploymentStatusWriter
}

// NewMockWasmDeploymentStatusWriter creates a new mock instance
func NewMockWasmDeploymentStatusWriter(ctrl *gomock.Controller) *MockWasmDeploymentStatusWriter {
	mock := &MockWasmDeploymentStatusWriter{ctrl: ctrl}
	mock.recorder = &MockWasmDeploymentStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWasmDeploymentStatusWriter) EXPECT() *MockWasmDeploymentStatusWriterMockRecorder {
	return m.recorder
}

// UpdateWasmDeploymentStatus mocks base method
func (m *MockWasmDeploymentStatusWriter) UpdateWasmDeploymentStatus(ctx context.Context, obj *v1beta1.WasmDeployment, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWasmDeploymentStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWasmDeploymentStatus indicates an expected call of UpdateWasmDeploymentStatus
func (mr *MockWasmDeploymentStatusWriterMockRecorder) UpdateWasmDeploymentStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWasmDeploymentStatus", reflect.TypeOf((*MockWasmDeploymentStatusWriter)(nil).UpdateWasmDeploymentStatus), varargs...)
}

// PatchWasmDeploymentStatus mocks base method
func (m *MockWasmDeploymentStatusWriter) PatchWasmDeploymentStatus(ctx context.Context, obj *v1beta1.WasmDeployment, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchWasmDeploymentStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchWasmDeploymentStatus indicates an expected call of PatchWasmDeploymentStatus
func (mr *MockWasmDeploymentStatusWriterMockRecorder) PatchWasmDeploymentStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchWasmDeploymentStatus", reflect.TypeOf((*MockWasmDeploymentStatusWriter)(nil).PatchWasmDeploymentStatus), varargs...)
}

// MockWasmDeploymentClient is a mock of WasmDeploymentClient interface
type MockWasmDeploymentClient struct {
	ctrl     *gomock.Controller
	recorder *MockWasmDeploymentClientMockRecorder
}

// MockWasmDeploymentClientMockRecorder is the mock recorder for MockWasmDeploymentClient
type MockWasmDeploymentClientMockRecorder struct {
	mock *MockWasmDeploymentClient
}

// NewMockWasmDeploymentClient creates a new mock instance
func NewMockWasmDeploymentClient(ctrl *gomock.Controller) *MockWasmDeploymentClient {
	mock := &MockWasmDeploymentClient{ctrl: ctrl}
	mock.recorder = &MockWasmDeploymentClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWasmDeploymentClient) EXPECT() *MockWasmDeploymentClientMockRecorder {
	return m.recorder
}

// GetWasmDeployment mocks base method
func (m *MockWasmDeploymentClient) GetWasmDeployment(ctx context.Context, key client.ObjectKey) (*v1beta1.WasmDeployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWasmDeployment", ctx, key)
	ret0, _ := ret[0].(*v1beta1.WasmDeployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWasmDeployment indicates an expected call of GetWasmDeployment
func (mr *MockWasmDeploymentClientMockRecorder) GetWasmDeployment(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWasmDeployment", reflect.TypeOf((*MockWasmDeploymentClient)(nil).GetWasmDeployment), ctx, key)
}

// ListWasmDeployment mocks base method
func (m *MockWasmDeploymentClient) ListWasmDeployment(ctx context.Context, opts ...client.ListOption) (*v1beta1.WasmDeploymentList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWasmDeployment", varargs...)
	ret0, _ := ret[0].(*v1beta1.WasmDeploymentList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWasmDeployment indicates an expected call of ListWasmDeployment
func (mr *MockWasmDeploymentClientMockRecorder) ListWasmDeployment(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWasmDeployment", reflect.TypeOf((*MockWasmDeploymentClient)(nil).ListWasmDeployment), varargs...)
}

// CreateWasmDeployment mocks base method
func (m *MockWasmDeploymentClient) CreateWasmDeployment(ctx context.Context, obj *v1beta1.WasmDeployment, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWasmDeployment", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWasmDeployment indicates an expected call of CreateWasmDeployment
func (mr *MockWasmDeploymentClientMockRecorder) CreateWasmDeployment(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWasmDeployment", reflect.TypeOf((*MockWasmDeploymentClient)(nil).CreateWasmDeployment), varargs...)
}

// DeleteWasmDeployment mocks base method
func (m *MockWasmDeploymentClient) DeleteWasmDeployment(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWasmDeployment", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWasmDeployment indicates an expected call of DeleteWasmDeployment
func (mr *MockWasmDeploymentClientMockRecorder) DeleteWasmDeployment(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWasmDeployment", reflect.TypeOf((*MockWasmDeploymentClient)(nil).DeleteWasmDeployment), varargs...)
}

// UpdateWasmDeployment mocks base method
func (m *MockWasmDeploymentClient) UpdateWasmDeployment(ctx context.Context, obj *v1beta1.WasmDeployment, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWasmDeployment", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWasmDeployment indicates an expected call of UpdateWasmDeployment
func (mr *MockWasmDeploymentClientMockRecorder) UpdateWasmDeployment(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWasmDeployment", reflect.TypeOf((*MockWasmDeploymentClient)(nil).UpdateWasmDeployment), varargs...)
}

// PatchWasmDeployment mocks base method
func (m *MockWasmDeploymentClient) PatchWasmDeployment(ctx context.Context, obj *v1beta1.WasmDeployment, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchWasmDeployment", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchWasmDeployment indicates an expected call of PatchWasmDeployment
func (mr *MockWasmDeploymentClientMockRecorder) PatchWasmDeployment(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchWasmDeployment", reflect.TypeOf((*MockWasmDeploymentClient)(nil).PatchWasmDeployment), varargs...)
}

// DeleteAllOfWasmDeployment mocks base method
func (m *MockWasmDeploymentClient) DeleteAllOfWasmDeployment(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfWasmDeployment", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfWasmDeployment indicates an expected call of DeleteAllOfWasmDeployment
func (mr *MockWasmDeploymentClientMockRecorder) DeleteAllOfWasmDeployment(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfWasmDeployment", reflect.TypeOf((*MockWasmDeploymentClient)(nil).DeleteAllOfWasmDeployment), varargs...)
}

// UpsertWasmDeployment mocks base method
func (m *MockWasmDeploymentClient) UpsertWasmDeployment(ctx context.Context, obj *v1beta1.WasmDeployment, transitionFuncs ...v1beta1.WasmDeploymentTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertWasmDeployment", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertWasmDeployment indicates an expected call of UpsertWasmDeployment
func (mr *MockWasmDeploymentClientMockRecorder) UpsertWasmDeployment(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertWasmDeployment", reflect.TypeOf((*MockWasmDeploymentClient)(nil).UpsertWasmDeployment), varargs...)
}

// UpdateWasmDeploymentStatus mocks base method
func (m *MockWasmDeploymentClient) UpdateWasmDeploymentStatus(ctx context.Context, obj *v1beta1.WasmDeployment, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWasmDeploymentStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWasmDeploymentStatus indicates an expected call of UpdateWasmDeploymentStatus
func (mr *MockWasmDeploymentClientMockRecorder) UpdateWasmDeploymentStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWasmDeploymentStatus", reflect.TypeOf((*MockWasmDeploymentClient)(nil).UpdateWasmDeploymentStatus), varargs...)
}

// PatchWasmDeploymentStatus mocks base method
func (m *MockWasmDeploymentClient) PatchWasmDeploymentStatus(ctx context.Context, obj *v1beta1.WasmDeployment, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchWasmDeploymentStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchWasmDeploymentStatus indicates an expected call of PatchWasmDeploymentStatus
func (mr *MockWasmDeploymentClientMockRecorder) PatchWasmDeploymentStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchWasmDeploymentStatus", reflect.TypeOf((*MockWasmDeploymentClient)(nil).PatchWasmDeploymentStatus), varargs...)
}

// MockMulticlusterWasmDeploymentClient is a mock of MulticlusterWasmDeploymentClient interface
type MockMulticlusterWasmDeploymentClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterWasmDeploymentClientMockRecorder
}

// MockMulticlusterWasmDeploymentClientMockRecorder is the mock recorder for MockMulticlusterWasmDeploymentClient
type MockMulticlusterWasmDeploymentClientMockRecorder struct {
	mock *MockMulticlusterWasmDeploymentClient
}

// NewMockMulticlusterWasmDeploymentClient creates a new mock instance
func NewMockMulticlusterWasmDeploymentClient(ctrl *gomock.Controller) *MockMulticlusterWasmDeploymentClient {
	mock := &MockMulticlusterWasmDeploymentClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterWasmDeploymentClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterWasmDeploymentClient) EXPECT() *MockMulticlusterWasmDeploymentClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockMulticlusterWasmDeploymentClient) Cluster(cluster string) (v1beta1.WasmDeploymentClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1beta1.WasmDeploymentClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster
func (mr *MockMulticlusterWasmDeploymentClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterWasmDeploymentClient)(nil).Cluster), cluster)
}

// MockVirtualDestinationReader is a mock of VirtualDestinationReader interface
type MockVirtualDestinationReader struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualDestinationReaderMockRecorder
}

// MockVirtualDestinationReaderMockRecorder is the mock recorder for MockVirtualDestinationReader
type MockVirtualDestinationReaderMockRecorder struct {
	mock *MockVirtualDestinationReader
}

// NewMockVirtualDestinationReader creates a new mock instance
func NewMockVirtualDestinationReader(ctrl *gomock.Controller) *MockVirtualDestinationReader {
	mock := &MockVirtualDestinationReader{ctrl: ctrl}
	mock.recorder = &MockVirtualDestinationReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualDestinationReader) EXPECT() *MockVirtualDestinationReaderMockRecorder {
	return m.recorder
}

// GetVirtualDestination mocks base method
func (m *MockVirtualDestinationReader) GetVirtualDestination(ctx context.Context, key client.ObjectKey) (*v1beta1.VirtualDestination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualDestination", ctx, key)
	ret0, _ := ret[0].(*v1beta1.VirtualDestination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualDestination indicates an expected call of GetVirtualDestination
func (mr *MockVirtualDestinationReaderMockRecorder) GetVirtualDestination(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualDestination", reflect.TypeOf((*MockVirtualDestinationReader)(nil).GetVirtualDestination), ctx, key)
}

// ListVirtualDestination mocks base method
func (m *MockVirtualDestinationReader) ListVirtualDestination(ctx context.Context, opts ...client.ListOption) (*v1beta1.VirtualDestinationList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVirtualDestination", varargs...)
	ret0, _ := ret[0].(*v1beta1.VirtualDestinationList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualDestination indicates an expected call of ListVirtualDestination
func (mr *MockVirtualDestinationReaderMockRecorder) ListVirtualDestination(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualDestination", reflect.TypeOf((*MockVirtualDestinationReader)(nil).ListVirtualDestination), varargs...)
}

// MockVirtualDestinationWriter is a mock of VirtualDestinationWriter interface
type MockVirtualDestinationWriter struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualDestinationWriterMockRecorder
}

// MockVirtualDestinationWriterMockRecorder is the mock recorder for MockVirtualDestinationWriter
type MockVirtualDestinationWriterMockRecorder struct {
	mock *MockVirtualDestinationWriter
}

// NewMockVirtualDestinationWriter creates a new mock instance
func NewMockVirtualDestinationWriter(ctrl *gomock.Controller) *MockVirtualDestinationWriter {
	mock := &MockVirtualDestinationWriter{ctrl: ctrl}
	mock.recorder = &MockVirtualDestinationWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualDestinationWriter) EXPECT() *MockVirtualDestinationWriterMockRecorder {
	return m.recorder
}

// CreateVirtualDestination mocks base method
func (m *MockVirtualDestinationWriter) CreateVirtualDestination(ctx context.Context, obj *v1beta1.VirtualDestination, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVirtualDestination", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVirtualDestination indicates an expected call of CreateVirtualDestination
func (mr *MockVirtualDestinationWriterMockRecorder) CreateVirtualDestination(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualDestination", reflect.TypeOf((*MockVirtualDestinationWriter)(nil).CreateVirtualDestination), varargs...)
}

// DeleteVirtualDestination mocks base method
func (m *MockVirtualDestinationWriter) DeleteVirtualDestination(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVirtualDestination", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualDestination indicates an expected call of DeleteVirtualDestination
func (mr *MockVirtualDestinationWriterMockRecorder) DeleteVirtualDestination(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualDestination", reflect.TypeOf((*MockVirtualDestinationWriter)(nil).DeleteVirtualDestination), varargs...)
}

// UpdateVirtualDestination mocks base method
func (m *MockVirtualDestinationWriter) UpdateVirtualDestination(ctx context.Context, obj *v1beta1.VirtualDestination, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualDestination", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualDestination indicates an expected call of UpdateVirtualDestination
func (mr *MockVirtualDestinationWriterMockRecorder) UpdateVirtualDestination(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualDestination", reflect.TypeOf((*MockVirtualDestinationWriter)(nil).UpdateVirtualDestination), varargs...)
}

// PatchVirtualDestination mocks base method
func (m *MockVirtualDestinationWriter) PatchVirtualDestination(ctx context.Context, obj *v1beta1.VirtualDestination, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchVirtualDestination", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualDestination indicates an expected call of PatchVirtualDestination
func (mr *MockVirtualDestinationWriterMockRecorder) PatchVirtualDestination(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualDestination", reflect.TypeOf((*MockVirtualDestinationWriter)(nil).PatchVirtualDestination), varargs...)
}

// DeleteAllOfVirtualDestination mocks base method
func (m *MockVirtualDestinationWriter) DeleteAllOfVirtualDestination(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfVirtualDestination", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfVirtualDestination indicates an expected call of DeleteAllOfVirtualDestination
func (mr *MockVirtualDestinationWriterMockRecorder) DeleteAllOfVirtualDestination(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfVirtualDestination", reflect.TypeOf((*MockVirtualDestinationWriter)(nil).DeleteAllOfVirtualDestination), varargs...)
}

// UpsertVirtualDestination mocks base method
func (m *MockVirtualDestinationWriter) UpsertVirtualDestination(ctx context.Context, obj *v1beta1.VirtualDestination, transitionFuncs ...v1beta1.VirtualDestinationTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertVirtualDestination", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertVirtualDestination indicates an expected call of UpsertVirtualDestination
func (mr *MockVirtualDestinationWriterMockRecorder) UpsertVirtualDestination(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertVirtualDestination", reflect.TypeOf((*MockVirtualDestinationWriter)(nil).UpsertVirtualDestination), varargs...)
}

// MockVirtualDestinationStatusWriter is a mock of VirtualDestinationStatusWriter interface
type MockVirtualDestinationStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualDestinationStatusWriterMockRecorder
}

// MockVirtualDestinationStatusWriterMockRecorder is the mock recorder for MockVirtualDestinationStatusWriter
type MockVirtualDestinationStatusWriterMockRecorder struct {
	mock *MockVirtualDestinationStatusWriter
}

// NewMockVirtualDestinationStatusWriter creates a new mock instance
func NewMockVirtualDestinationStatusWriter(ctrl *gomock.Controller) *MockVirtualDestinationStatusWriter {
	mock := &MockVirtualDestinationStatusWriter{ctrl: ctrl}
	mock.recorder = &MockVirtualDestinationStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualDestinationStatusWriter) EXPECT() *MockVirtualDestinationStatusWriterMockRecorder {
	return m.recorder
}

// UpdateVirtualDestinationStatus mocks base method
func (m *MockVirtualDestinationStatusWriter) UpdateVirtualDestinationStatus(ctx context.Context, obj *v1beta1.VirtualDestination, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualDestinationStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualDestinationStatus indicates an expected call of UpdateVirtualDestinationStatus
func (mr *MockVirtualDestinationStatusWriterMockRecorder) UpdateVirtualDestinationStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualDestinationStatus", reflect.TypeOf((*MockVirtualDestinationStatusWriter)(nil).UpdateVirtualDestinationStatus), varargs...)
}

// PatchVirtualDestinationStatus mocks base method
func (m *MockVirtualDestinationStatusWriter) PatchVirtualDestinationStatus(ctx context.Context, obj *v1beta1.VirtualDestination, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchVirtualDestinationStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualDestinationStatus indicates an expected call of PatchVirtualDestinationStatus
func (mr *MockVirtualDestinationStatusWriterMockRecorder) PatchVirtualDestinationStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualDestinationStatus", reflect.TypeOf((*MockVirtualDestinationStatusWriter)(nil).PatchVirtualDestinationStatus), varargs...)
}

// MockVirtualDestinationClient is a mock of VirtualDestinationClient interface
type MockVirtualDestinationClient struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualDestinationClientMockRecorder
}

// MockVirtualDestinationClientMockRecorder is the mock recorder for MockVirtualDestinationClient
type MockVirtualDestinationClientMockRecorder struct {
	mock *MockVirtualDestinationClient
}

// NewMockVirtualDestinationClient creates a new mock instance
func NewMockVirtualDestinationClient(ctrl *gomock.Controller) *MockVirtualDestinationClient {
	mock := &MockVirtualDestinationClient{ctrl: ctrl}
	mock.recorder = &MockVirtualDestinationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualDestinationClient) EXPECT() *MockVirtualDestinationClientMockRecorder {
	return m.recorder
}

// GetVirtualDestination mocks base method
func (m *MockVirtualDestinationClient) GetVirtualDestination(ctx context.Context, key client.ObjectKey) (*v1beta1.VirtualDestination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualDestination", ctx, key)
	ret0, _ := ret[0].(*v1beta1.VirtualDestination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualDestination indicates an expected call of GetVirtualDestination
func (mr *MockVirtualDestinationClientMockRecorder) GetVirtualDestination(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualDestination", reflect.TypeOf((*MockVirtualDestinationClient)(nil).GetVirtualDestination), ctx, key)
}

// ListVirtualDestination mocks base method
func (m *MockVirtualDestinationClient) ListVirtualDestination(ctx context.Context, opts ...client.ListOption) (*v1beta1.VirtualDestinationList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVirtualDestination", varargs...)
	ret0, _ := ret[0].(*v1beta1.VirtualDestinationList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualDestination indicates an expected call of ListVirtualDestination
func (mr *MockVirtualDestinationClientMockRecorder) ListVirtualDestination(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualDestination", reflect.TypeOf((*MockVirtualDestinationClient)(nil).ListVirtualDestination), varargs...)
}

// CreateVirtualDestination mocks base method
func (m *MockVirtualDestinationClient) CreateVirtualDestination(ctx context.Context, obj *v1beta1.VirtualDestination, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVirtualDestination", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVirtualDestination indicates an expected call of CreateVirtualDestination
func (mr *MockVirtualDestinationClientMockRecorder) CreateVirtualDestination(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualDestination", reflect.TypeOf((*MockVirtualDestinationClient)(nil).CreateVirtualDestination), varargs...)
}

// DeleteVirtualDestination mocks base method
func (m *MockVirtualDestinationClient) DeleteVirtualDestination(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVirtualDestination", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualDestination indicates an expected call of DeleteVirtualDestination
func (mr *MockVirtualDestinationClientMockRecorder) DeleteVirtualDestination(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualDestination", reflect.TypeOf((*MockVirtualDestinationClient)(nil).DeleteVirtualDestination), varargs...)
}

// UpdateVirtualDestination mocks base method
func (m *MockVirtualDestinationClient) UpdateVirtualDestination(ctx context.Context, obj *v1beta1.VirtualDestination, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualDestination", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualDestination indicates an expected call of UpdateVirtualDestination
func (mr *MockVirtualDestinationClientMockRecorder) UpdateVirtualDestination(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualDestination", reflect.TypeOf((*MockVirtualDestinationClient)(nil).UpdateVirtualDestination), varargs...)
}

// PatchVirtualDestination mocks base method
func (m *MockVirtualDestinationClient) PatchVirtualDestination(ctx context.Context, obj *v1beta1.VirtualDestination, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchVirtualDestination", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualDestination indicates an expected call of PatchVirtualDestination
func (mr *MockVirtualDestinationClientMockRecorder) PatchVirtualDestination(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualDestination", reflect.TypeOf((*MockVirtualDestinationClient)(nil).PatchVirtualDestination), varargs...)
}

// DeleteAllOfVirtualDestination mocks base method
func (m *MockVirtualDestinationClient) DeleteAllOfVirtualDestination(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfVirtualDestination", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfVirtualDestination indicates an expected call of DeleteAllOfVirtualDestination
func (mr *MockVirtualDestinationClientMockRecorder) DeleteAllOfVirtualDestination(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfVirtualDestination", reflect.TypeOf((*MockVirtualDestinationClient)(nil).DeleteAllOfVirtualDestination), varargs...)
}

// UpsertVirtualDestination mocks base method
func (m *MockVirtualDestinationClient) UpsertVirtualDestination(ctx context.Context, obj *v1beta1.VirtualDestination, transitionFuncs ...v1beta1.VirtualDestinationTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertVirtualDestination", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertVirtualDestination indicates an expected call of UpsertVirtualDestination
func (mr *MockVirtualDestinationClientMockRecorder) UpsertVirtualDestination(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertVirtualDestination", reflect.TypeOf((*MockVirtualDestinationClient)(nil).UpsertVirtualDestination), varargs...)
}

// UpdateVirtualDestinationStatus mocks base method
func (m *MockVirtualDestinationClient) UpdateVirtualDestinationStatus(ctx context.Context, obj *v1beta1.VirtualDestination, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualDestinationStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualDestinationStatus indicates an expected call of UpdateVirtualDestinationStatus
func (mr *MockVirtualDestinationClientMockRecorder) UpdateVirtualDestinationStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualDestinationStatus", reflect.TypeOf((*MockVirtualDestinationClient)(nil).UpdateVirtualDestinationStatus), varargs...)
}

// PatchVirtualDestinationStatus mocks base method
func (m *MockVirtualDestinationClient) PatchVirtualDestinationStatus(ctx context.Context, obj *v1beta1.VirtualDestination, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchVirtualDestinationStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualDestinationStatus indicates an expected call of PatchVirtualDestinationStatus
func (mr *MockVirtualDestinationClientMockRecorder) PatchVirtualDestinationStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualDestinationStatus", reflect.TypeOf((*MockVirtualDestinationClient)(nil).PatchVirtualDestinationStatus), varargs...)
}

// MockMulticlusterVirtualDestinationClient is a mock of MulticlusterVirtualDestinationClient interface
type MockMulticlusterVirtualDestinationClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterVirtualDestinationClientMockRecorder
}

// MockMulticlusterVirtualDestinationClientMockRecorder is the mock recorder for MockMulticlusterVirtualDestinationClient
type MockMulticlusterVirtualDestinationClientMockRecorder struct {
	mock *MockMulticlusterVirtualDestinationClient
}

// NewMockMulticlusterVirtualDestinationClient creates a new mock instance
func NewMockMulticlusterVirtualDestinationClient(ctrl *gomock.Controller) *MockMulticlusterVirtualDestinationClient {
	mock := &MockMulticlusterVirtualDestinationClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterVirtualDestinationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterVirtualDestinationClient) EXPECT() *MockMulticlusterVirtualDestinationClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockMulticlusterVirtualDestinationClient) Cluster(cluster string) (v1beta1.VirtualDestinationClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1beta1.VirtualDestinationClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster
func (mr *MockMulticlusterVirtualDestinationClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterVirtualDestinationClient)(nil).Cluster), cluster)
}

// MockFederatedGatewayReader is a mock of FederatedGatewayReader interface
type MockFederatedGatewayReader struct {
	ctrl     *gomock.Controller
	recorder *MockFederatedGatewayReaderMockRecorder
}

// MockFederatedGatewayReaderMockRecorder is the mock recorder for MockFederatedGatewayReader
type MockFederatedGatewayReaderMockRecorder struct {
	mock *MockFederatedGatewayReader
}

// NewMockFederatedGatewayReader creates a new mock instance
func NewMockFederatedGatewayReader(ctrl *gomock.Controller) *MockFederatedGatewayReader {
	mock := &MockFederatedGatewayReader{ctrl: ctrl}
	mock.recorder = &MockFederatedGatewayReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFederatedGatewayReader) EXPECT() *MockFederatedGatewayReaderMockRecorder {
	return m.recorder
}

// GetFederatedGateway mocks base method
func (m *MockFederatedGatewayReader) GetFederatedGateway(ctx context.Context, key client.ObjectKey) (*v1beta1.FederatedGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFederatedGateway", ctx, key)
	ret0, _ := ret[0].(*v1beta1.FederatedGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFederatedGateway indicates an expected call of GetFederatedGateway
func (mr *MockFederatedGatewayReaderMockRecorder) GetFederatedGateway(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFederatedGateway", reflect.TypeOf((*MockFederatedGatewayReader)(nil).GetFederatedGateway), ctx, key)
}

// ListFederatedGateway mocks base method
func (m *MockFederatedGatewayReader) ListFederatedGateway(ctx context.Context, opts ...client.ListOption) (*v1beta1.FederatedGatewayList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFederatedGateway", varargs...)
	ret0, _ := ret[0].(*v1beta1.FederatedGatewayList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFederatedGateway indicates an expected call of ListFederatedGateway
func (mr *MockFederatedGatewayReaderMockRecorder) ListFederatedGateway(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFederatedGateway", reflect.TypeOf((*MockFederatedGatewayReader)(nil).ListFederatedGateway), varargs...)
}

// MockFederatedGatewayWriter is a mock of FederatedGatewayWriter interface
type MockFederatedGatewayWriter struct {
	ctrl     *gomock.Controller
	recorder *MockFederatedGatewayWriterMockRecorder
}

// MockFederatedGatewayWriterMockRecorder is the mock recorder for MockFederatedGatewayWriter
type MockFederatedGatewayWriterMockRecorder struct {
	mock *MockFederatedGatewayWriter
}

// NewMockFederatedGatewayWriter creates a new mock instance
func NewMockFederatedGatewayWriter(ctrl *gomock.Controller) *MockFederatedGatewayWriter {
	mock := &MockFederatedGatewayWriter{ctrl: ctrl}
	mock.recorder = &MockFederatedGatewayWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFederatedGatewayWriter) EXPECT() *MockFederatedGatewayWriterMockRecorder {
	return m.recorder
}

// CreateFederatedGateway mocks base method
func (m *MockFederatedGatewayWriter) CreateFederatedGateway(ctx context.Context, obj *v1beta1.FederatedGateway, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFederatedGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFederatedGateway indicates an expected call of CreateFederatedGateway
func (mr *MockFederatedGatewayWriterMockRecorder) CreateFederatedGateway(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFederatedGateway", reflect.TypeOf((*MockFederatedGatewayWriter)(nil).CreateFederatedGateway), varargs...)
}

// DeleteFederatedGateway mocks base method
func (m *MockFederatedGatewayWriter) DeleteFederatedGateway(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFederatedGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFederatedGateway indicates an expected call of DeleteFederatedGateway
func (mr *MockFederatedGatewayWriterMockRecorder) DeleteFederatedGateway(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFederatedGateway", reflect.TypeOf((*MockFederatedGatewayWriter)(nil).DeleteFederatedGateway), varargs...)
}

// UpdateFederatedGateway mocks base method
func (m *MockFederatedGatewayWriter) UpdateFederatedGateway(ctx context.Context, obj *v1beta1.FederatedGateway, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFederatedGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFederatedGateway indicates an expected call of UpdateFederatedGateway
func (mr *MockFederatedGatewayWriterMockRecorder) UpdateFederatedGateway(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFederatedGateway", reflect.TypeOf((*MockFederatedGatewayWriter)(nil).UpdateFederatedGateway), varargs...)
}

// PatchFederatedGateway mocks base method
func (m *MockFederatedGatewayWriter) PatchFederatedGateway(ctx context.Context, obj *v1beta1.FederatedGateway, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchFederatedGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchFederatedGateway indicates an expected call of PatchFederatedGateway
func (mr *MockFederatedGatewayWriterMockRecorder) PatchFederatedGateway(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchFederatedGateway", reflect.TypeOf((*MockFederatedGatewayWriter)(nil).PatchFederatedGateway), varargs...)
}

// DeleteAllOfFederatedGateway mocks base method
func (m *MockFederatedGatewayWriter) DeleteAllOfFederatedGateway(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfFederatedGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfFederatedGateway indicates an expected call of DeleteAllOfFederatedGateway
func (mr *MockFederatedGatewayWriterMockRecorder) DeleteAllOfFederatedGateway(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfFederatedGateway", reflect.TypeOf((*MockFederatedGatewayWriter)(nil).DeleteAllOfFederatedGateway), varargs...)
}

// UpsertFederatedGateway mocks base method
func (m *MockFederatedGatewayWriter) UpsertFederatedGateway(ctx context.Context, obj *v1beta1.FederatedGateway, transitionFuncs ...v1beta1.FederatedGatewayTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertFederatedGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertFederatedGateway indicates an expected call of UpsertFederatedGateway
func (mr *MockFederatedGatewayWriterMockRecorder) UpsertFederatedGateway(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertFederatedGateway", reflect.TypeOf((*MockFederatedGatewayWriter)(nil).UpsertFederatedGateway), varargs...)
}

// MockFederatedGatewayStatusWriter is a mock of FederatedGatewayStatusWriter interface
type MockFederatedGatewayStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockFederatedGatewayStatusWriterMockRecorder
}

// MockFederatedGatewayStatusWriterMockRecorder is the mock recorder for MockFederatedGatewayStatusWriter
type MockFederatedGatewayStatusWriterMockRecorder struct {
	mock *MockFederatedGatewayStatusWriter
}

// NewMockFederatedGatewayStatusWriter creates a new mock instance
func NewMockFederatedGatewayStatusWriter(ctrl *gomock.Controller) *MockFederatedGatewayStatusWriter {
	mock := &MockFederatedGatewayStatusWriter{ctrl: ctrl}
	mock.recorder = &MockFederatedGatewayStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFederatedGatewayStatusWriter) EXPECT() *MockFederatedGatewayStatusWriterMockRecorder {
	return m.recorder
}

// UpdateFederatedGatewayStatus mocks base method
func (m *MockFederatedGatewayStatusWriter) UpdateFederatedGatewayStatus(ctx context.Context, obj *v1beta1.FederatedGateway, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFederatedGatewayStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFederatedGatewayStatus indicates an expected call of UpdateFederatedGatewayStatus
func (mr *MockFederatedGatewayStatusWriterMockRecorder) UpdateFederatedGatewayStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFederatedGatewayStatus", reflect.TypeOf((*MockFederatedGatewayStatusWriter)(nil).UpdateFederatedGatewayStatus), varargs...)
}

// PatchFederatedGatewayStatus mocks base method
func (m *MockFederatedGatewayStatusWriter) PatchFederatedGatewayStatus(ctx context.Context, obj *v1beta1.FederatedGateway, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchFederatedGatewayStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchFederatedGatewayStatus indicates an expected call of PatchFederatedGatewayStatus
func (mr *MockFederatedGatewayStatusWriterMockRecorder) PatchFederatedGatewayStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchFederatedGatewayStatus", reflect.TypeOf((*MockFederatedGatewayStatusWriter)(nil).PatchFederatedGatewayStatus), varargs...)
}

// MockFederatedGatewayClient is a mock of FederatedGatewayClient interface
type MockFederatedGatewayClient struct {
	ctrl     *gomock.Controller
	recorder *MockFederatedGatewayClientMockRecorder
}

// MockFederatedGatewayClientMockRecorder is the mock recorder for MockFederatedGatewayClient
type MockFederatedGatewayClientMockRecorder struct {
	mock *MockFederatedGatewayClient
}

// NewMockFederatedGatewayClient creates a new mock instance
func NewMockFederatedGatewayClient(ctrl *gomock.Controller) *MockFederatedGatewayClient {
	mock := &MockFederatedGatewayClient{ctrl: ctrl}
	mock.recorder = &MockFederatedGatewayClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFederatedGatewayClient) EXPECT() *MockFederatedGatewayClientMockRecorder {
	return m.recorder
}

// GetFederatedGateway mocks base method
func (m *MockFederatedGatewayClient) GetFederatedGateway(ctx context.Context, key client.ObjectKey) (*v1beta1.FederatedGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFederatedGateway", ctx, key)
	ret0, _ := ret[0].(*v1beta1.FederatedGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFederatedGateway indicates an expected call of GetFederatedGateway
func (mr *MockFederatedGatewayClientMockRecorder) GetFederatedGateway(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFederatedGateway", reflect.TypeOf((*MockFederatedGatewayClient)(nil).GetFederatedGateway), ctx, key)
}

// ListFederatedGateway mocks base method
func (m *MockFederatedGatewayClient) ListFederatedGateway(ctx context.Context, opts ...client.ListOption) (*v1beta1.FederatedGatewayList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFederatedGateway", varargs...)
	ret0, _ := ret[0].(*v1beta1.FederatedGatewayList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFederatedGateway indicates an expected call of ListFederatedGateway
func (mr *MockFederatedGatewayClientMockRecorder) ListFederatedGateway(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFederatedGateway", reflect.TypeOf((*MockFederatedGatewayClient)(nil).ListFederatedGateway), varargs...)
}

// CreateFederatedGateway mocks base method
func (m *MockFederatedGatewayClient) CreateFederatedGateway(ctx context.Context, obj *v1beta1.FederatedGateway, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFederatedGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFederatedGateway indicates an expected call of CreateFederatedGateway
func (mr *MockFederatedGatewayClientMockRecorder) CreateFederatedGateway(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFederatedGateway", reflect.TypeOf((*MockFederatedGatewayClient)(nil).CreateFederatedGateway), varargs...)
}

// DeleteFederatedGateway mocks base method
func (m *MockFederatedGatewayClient) DeleteFederatedGateway(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFederatedGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFederatedGateway indicates an expected call of DeleteFederatedGateway
func (mr *MockFederatedGatewayClientMockRecorder) DeleteFederatedGateway(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFederatedGateway", reflect.TypeOf((*MockFederatedGatewayClient)(nil).DeleteFederatedGateway), varargs...)
}

// UpdateFederatedGateway mocks base method
func (m *MockFederatedGatewayClient) UpdateFederatedGateway(ctx context.Context, obj *v1beta1.FederatedGateway, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFederatedGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFederatedGateway indicates an expected call of UpdateFederatedGateway
func (mr *MockFederatedGatewayClientMockRecorder) UpdateFederatedGateway(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFederatedGateway", reflect.TypeOf((*MockFederatedGatewayClient)(nil).UpdateFederatedGateway), varargs...)
}

// PatchFederatedGateway mocks base method
func (m *MockFederatedGatewayClient) PatchFederatedGateway(ctx context.Context, obj *v1beta1.FederatedGateway, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchFederatedGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchFederatedGateway indicates an expected call of PatchFederatedGateway
func (mr *MockFederatedGatewayClientMockRecorder) PatchFederatedGateway(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchFederatedGateway", reflect.TypeOf((*MockFederatedGatewayClient)(nil).PatchFederatedGateway), varargs...)
}

// DeleteAllOfFederatedGateway mocks base method
func (m *MockFederatedGatewayClient) DeleteAllOfFederatedGateway(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfFederatedGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfFederatedGateway indicates an expected call of DeleteAllOfFederatedGateway
func (mr *MockFederatedGatewayClientMockRecorder) DeleteAllOfFederatedGateway(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfFederatedGateway", reflect.TypeOf((*MockFederatedGatewayClient)(nil).DeleteAllOfFederatedGateway), varargs...)
}

// UpsertFederatedGateway mocks base method
func (m *MockFederatedGatewayClient) UpsertFederatedGateway(ctx context.Context, obj *v1beta1.FederatedGateway, transitionFuncs ...v1beta1.FederatedGatewayTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertFederatedGateway", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertFederatedGateway indicates an expected call of UpsertFederatedGateway
func (mr *MockFederatedGatewayClientMockRecorder) UpsertFederatedGateway(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertFederatedGateway", reflect.TypeOf((*MockFederatedGatewayClient)(nil).UpsertFederatedGateway), varargs...)
}

// UpdateFederatedGatewayStatus mocks base method
func (m *MockFederatedGatewayClient) UpdateFederatedGatewayStatus(ctx context.Context, obj *v1beta1.FederatedGateway, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFederatedGatewayStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFederatedGatewayStatus indicates an expected call of UpdateFederatedGatewayStatus
func (mr *MockFederatedGatewayClientMockRecorder) UpdateFederatedGatewayStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFederatedGatewayStatus", reflect.TypeOf((*MockFederatedGatewayClient)(nil).UpdateFederatedGatewayStatus), varargs...)
}

// PatchFederatedGatewayStatus mocks base method
func (m *MockFederatedGatewayClient) PatchFederatedGatewayStatus(ctx context.Context, obj *v1beta1.FederatedGateway, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchFederatedGatewayStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchFederatedGatewayStatus indicates an expected call of PatchFederatedGatewayStatus
func (mr *MockFederatedGatewayClientMockRecorder) PatchFederatedGatewayStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchFederatedGatewayStatus", reflect.TypeOf((*MockFederatedGatewayClient)(nil).PatchFederatedGatewayStatus), varargs...)
}

// MockMulticlusterFederatedGatewayClient is a mock of MulticlusterFederatedGatewayClient interface
type MockMulticlusterFederatedGatewayClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterFederatedGatewayClientMockRecorder
}

// MockMulticlusterFederatedGatewayClientMockRecorder is the mock recorder for MockMulticlusterFederatedGatewayClient
type MockMulticlusterFederatedGatewayClientMockRecorder struct {
	mock *MockMulticlusterFederatedGatewayClient
}

// NewMockMulticlusterFederatedGatewayClient creates a new mock instance
func NewMockMulticlusterFederatedGatewayClient(ctrl *gomock.Controller) *MockMulticlusterFederatedGatewayClient {
	mock := &MockMulticlusterFederatedGatewayClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterFederatedGatewayClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterFederatedGatewayClient) EXPECT() *MockMulticlusterFederatedGatewayClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockMulticlusterFederatedGatewayClient) Cluster(cluster string) (v1beta1.FederatedGatewayClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1beta1.FederatedGatewayClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster
func (mr *MockMulticlusterFederatedGatewayClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterFederatedGatewayClient)(nil).Cluster), cluster)
}

// MockRouteTableReader is a mock of RouteTableReader interface
type MockRouteTableReader struct {
	ctrl     *gomock.Controller
	recorder *MockRouteTableReaderMockRecorder
}

// MockRouteTableReaderMockRecorder is the mock recorder for MockRouteTableReader
type MockRouteTableReaderMockRecorder struct {
	mock *MockRouteTableReader
}

// NewMockRouteTableReader creates a new mock instance
func NewMockRouteTableReader(ctrl *gomock.Controller) *MockRouteTableReader {
	mock := &MockRouteTableReader{ctrl: ctrl}
	mock.recorder = &MockRouteTableReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouteTableReader) EXPECT() *MockRouteTableReaderMockRecorder {
	return m.recorder
}

// GetRouteTable mocks base method
func (m *MockRouteTableReader) GetRouteTable(ctx context.Context, key client.ObjectKey) (*v1beta1.RouteTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteTable", ctx, key)
	ret0, _ := ret[0].(*v1beta1.RouteTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouteTable indicates an expected call of GetRouteTable
func (mr *MockRouteTableReaderMockRecorder) GetRouteTable(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteTable", reflect.TypeOf((*MockRouteTableReader)(nil).GetRouteTable), ctx, key)
}

// ListRouteTable mocks base method
func (m *MockRouteTableReader) ListRouteTable(ctx context.Context, opts ...client.ListOption) (*v1beta1.RouteTableList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRouteTable", varargs...)
	ret0, _ := ret[0].(*v1beta1.RouteTableList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRouteTable indicates an expected call of ListRouteTable
func (mr *MockRouteTableReaderMockRecorder) ListRouteTable(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRouteTable", reflect.TypeOf((*MockRouteTableReader)(nil).ListRouteTable), varargs...)
}

// MockRouteTableWriter is a mock of RouteTableWriter interface
type MockRouteTableWriter struct {
	ctrl     *gomock.Controller
	recorder *MockRouteTableWriterMockRecorder
}

// MockRouteTableWriterMockRecorder is the mock recorder for MockRouteTableWriter
type MockRouteTableWriterMockRecorder struct {
	mock *MockRouteTableWriter
}

// NewMockRouteTableWriter creates a new mock instance
func NewMockRouteTableWriter(ctrl *gomock.Controller) *MockRouteTableWriter {
	mock := &MockRouteTableWriter{ctrl: ctrl}
	mock.recorder = &MockRouteTableWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouteTableWriter) EXPECT() *MockRouteTableWriterMockRecorder {
	return m.recorder
}

// CreateRouteTable mocks base method
func (m *MockRouteTableWriter) CreateRouteTable(ctx context.Context, obj *v1beta1.RouteTable, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRouteTable indicates an expected call of CreateRouteTable
func (mr *MockRouteTableWriterMockRecorder) CreateRouteTable(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRouteTable", reflect.TypeOf((*MockRouteTableWriter)(nil).CreateRouteTable), varargs...)
}

// DeleteRouteTable mocks base method
func (m *MockRouteTableWriter) DeleteRouteTable(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRouteTable indicates an expected call of DeleteRouteTable
func (mr *MockRouteTableWriterMockRecorder) DeleteRouteTable(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteTable", reflect.TypeOf((*MockRouteTableWriter)(nil).DeleteRouteTable), varargs...)
}

// UpdateRouteTable mocks base method
func (m *MockRouteTableWriter) UpdateRouteTable(ctx context.Context, obj *v1beta1.RouteTable, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRouteTable indicates an expected call of UpdateRouteTable
func (mr *MockRouteTableWriterMockRecorder) UpdateRouteTable(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouteTable", reflect.TypeOf((*MockRouteTableWriter)(nil).UpdateRouteTable), varargs...)
}

// PatchRouteTable mocks base method
func (m *MockRouteTableWriter) PatchRouteTable(ctx context.Context, obj *v1beta1.RouteTable, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRouteTable indicates an expected call of PatchRouteTable
func (mr *MockRouteTableWriterMockRecorder) PatchRouteTable(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRouteTable", reflect.TypeOf((*MockRouteTableWriter)(nil).PatchRouteTable), varargs...)
}

// DeleteAllOfRouteTable mocks base method
func (m *MockRouteTableWriter) DeleteAllOfRouteTable(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfRouteTable indicates an expected call of DeleteAllOfRouteTable
func (mr *MockRouteTableWriterMockRecorder) DeleteAllOfRouteTable(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfRouteTable", reflect.TypeOf((*MockRouteTableWriter)(nil).DeleteAllOfRouteTable), varargs...)
}

// UpsertRouteTable mocks base method
func (m *MockRouteTableWriter) UpsertRouteTable(ctx context.Context, obj *v1beta1.RouteTable, transitionFuncs ...v1beta1.RouteTableTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRouteTable indicates an expected call of UpsertRouteTable
func (mr *MockRouteTableWriterMockRecorder) UpsertRouteTable(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRouteTable", reflect.TypeOf((*MockRouteTableWriter)(nil).UpsertRouteTable), varargs...)
}

// MockRouteTableStatusWriter is a mock of RouteTableStatusWriter interface
type MockRouteTableStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockRouteTableStatusWriterMockRecorder
}

// MockRouteTableStatusWriterMockRecorder is the mock recorder for MockRouteTableStatusWriter
type MockRouteTableStatusWriterMockRecorder struct {
	mock *MockRouteTableStatusWriter
}

// NewMockRouteTableStatusWriter creates a new mock instance
func NewMockRouteTableStatusWriter(ctrl *gomock.Controller) *MockRouteTableStatusWriter {
	mock := &MockRouteTableStatusWriter{ctrl: ctrl}
	mock.recorder = &MockRouteTableStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouteTableStatusWriter) EXPECT() *MockRouteTableStatusWriterMockRecorder {
	return m.recorder
}

// UpdateRouteTableStatus mocks base method
func (m *MockRouteTableStatusWriter) UpdateRouteTableStatus(ctx context.Context, obj *v1beta1.RouteTable, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRouteTableStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRouteTableStatus indicates an expected call of UpdateRouteTableStatus
func (mr *MockRouteTableStatusWriterMockRecorder) UpdateRouteTableStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouteTableStatus", reflect.TypeOf((*MockRouteTableStatusWriter)(nil).UpdateRouteTableStatus), varargs...)
}

// PatchRouteTableStatus mocks base method
func (m *MockRouteTableStatusWriter) PatchRouteTableStatus(ctx context.Context, obj *v1beta1.RouteTable, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRouteTableStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRouteTableStatus indicates an expected call of PatchRouteTableStatus
func (mr *MockRouteTableStatusWriterMockRecorder) PatchRouteTableStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRouteTableStatus", reflect.TypeOf((*MockRouteTableStatusWriter)(nil).PatchRouteTableStatus), varargs...)
}

// MockRouteTableClient is a mock of RouteTableClient interface
type MockRouteTableClient struct {
	ctrl     *gomock.Controller
	recorder *MockRouteTableClientMockRecorder
}

// MockRouteTableClientMockRecorder is the mock recorder for MockRouteTableClient
type MockRouteTableClientMockRecorder struct {
	mock *MockRouteTableClient
}

// NewMockRouteTableClient creates a new mock instance
func NewMockRouteTableClient(ctrl *gomock.Controller) *MockRouteTableClient {
	mock := &MockRouteTableClient{ctrl: ctrl}
	mock.recorder = &MockRouteTableClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouteTableClient) EXPECT() *MockRouteTableClientMockRecorder {
	return m.recorder
}

// GetRouteTable mocks base method
func (m *MockRouteTableClient) GetRouteTable(ctx context.Context, key client.ObjectKey) (*v1beta1.RouteTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteTable", ctx, key)
	ret0, _ := ret[0].(*v1beta1.RouteTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouteTable indicates an expected call of GetRouteTable
func (mr *MockRouteTableClientMockRecorder) GetRouteTable(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteTable", reflect.TypeOf((*MockRouteTableClient)(nil).GetRouteTable), ctx, key)
}

// ListRouteTable mocks base method
func (m *MockRouteTableClient) ListRouteTable(ctx context.Context, opts ...client.ListOption) (*v1beta1.RouteTableList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRouteTable", varargs...)
	ret0, _ := ret[0].(*v1beta1.RouteTableList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRouteTable indicates an expected call of ListRouteTable
func (mr *MockRouteTableClientMockRecorder) ListRouteTable(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRouteTable", reflect.TypeOf((*MockRouteTableClient)(nil).ListRouteTable), varargs...)
}

// CreateRouteTable mocks base method
func (m *MockRouteTableClient) CreateRouteTable(ctx context.Context, obj *v1beta1.RouteTable, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRouteTable indicates an expected call of CreateRouteTable
func (mr *MockRouteTableClientMockRecorder) CreateRouteTable(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRouteTable", reflect.TypeOf((*MockRouteTableClient)(nil).CreateRouteTable), varargs...)
}

// DeleteRouteTable mocks base method
func (m *MockRouteTableClient) DeleteRouteTable(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRouteTable indicates an expected call of DeleteRouteTable
func (mr *MockRouteTableClientMockRecorder) DeleteRouteTable(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteTable", reflect.TypeOf((*MockRouteTableClient)(nil).DeleteRouteTable), varargs...)
}

// UpdateRouteTable mocks base method
func (m *MockRouteTableClient) UpdateRouteTable(ctx context.Context, obj *v1beta1.RouteTable, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRouteTable indicates an expected call of UpdateRouteTable
func (mr *MockRouteTableClientMockRecorder) UpdateRouteTable(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouteTable", reflect.TypeOf((*MockRouteTableClient)(nil).UpdateRouteTable), varargs...)
}

// PatchRouteTable mocks base method
func (m *MockRouteTableClient) PatchRouteTable(ctx context.Context, obj *v1beta1.RouteTable, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRouteTable indicates an expected call of PatchRouteTable
func (mr *MockRouteTableClientMockRecorder) PatchRouteTable(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRouteTable", reflect.TypeOf((*MockRouteTableClient)(nil).PatchRouteTable), varargs...)
}

// DeleteAllOfRouteTable mocks base method
func (m *MockRouteTableClient) DeleteAllOfRouteTable(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfRouteTable indicates an expected call of DeleteAllOfRouteTable
func (mr *MockRouteTableClientMockRecorder) DeleteAllOfRouteTable(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfRouteTable", reflect.TypeOf((*MockRouteTableClient)(nil).DeleteAllOfRouteTable), varargs...)
}

// UpsertRouteTable mocks base method
func (m *MockRouteTableClient) UpsertRouteTable(ctx context.Context, obj *v1beta1.RouteTable, transitionFuncs ...v1beta1.RouteTableTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRouteTable indicates an expected call of UpsertRouteTable
func (mr *MockRouteTableClientMockRecorder) UpsertRouteTable(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRouteTable", reflect.TypeOf((*MockRouteTableClient)(nil).UpsertRouteTable), varargs...)
}

// UpdateRouteTableStatus mocks base method
func (m *MockRouteTableClient) UpdateRouteTableStatus(ctx context.Context, obj *v1beta1.RouteTable, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRouteTableStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRouteTableStatus indicates an expected call of UpdateRouteTableStatus
func (mr *MockRouteTableClientMockRecorder) UpdateRouteTableStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouteTableStatus", reflect.TypeOf((*MockRouteTableClient)(nil).UpdateRouteTableStatus), varargs...)
}

// PatchRouteTableStatus mocks base method
func (m *MockRouteTableClient) PatchRouteTableStatus(ctx context.Context, obj *v1beta1.RouteTable, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRouteTableStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRouteTableStatus indicates an expected call of PatchRouteTableStatus
func (mr *MockRouteTableClientMockRecorder) PatchRouteTableStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRouteTableStatus", reflect.TypeOf((*MockRouteTableClient)(nil).PatchRouteTableStatus), varargs...)
}

// MockMulticlusterRouteTableClient is a mock of MulticlusterRouteTableClient interface
type MockMulticlusterRouteTableClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterRouteTableClientMockRecorder
}

// MockMulticlusterRouteTableClientMockRecorder is the mock recorder for MockMulticlusterRouteTableClient
type MockMulticlusterRouteTableClientMockRecorder struct {
	mock *MockMulticlusterRouteTableClient
}

// NewMockMulticlusterRouteTableClient creates a new mock instance
func NewMockMulticlusterRouteTableClient(ctrl *gomock.Controller) *MockMulticlusterRouteTableClient {
	mock := &MockMulticlusterRouteTableClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterRouteTableClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterRouteTableClient) EXPECT() *MockMulticlusterRouteTableClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockMulticlusterRouteTableClient) Cluster(cluster string) (v1beta1.RouteTableClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1beta1.RouteTableClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster
func (mr *MockMulticlusterRouteTableClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterRouteTableClient)(nil).Cluster), cluster)
}

// MockDelegatedRouteTableReader is a mock of DelegatedRouteTableReader interface
type MockDelegatedRouteTableReader struct {
	ctrl     *gomock.Controller
	recorder *MockDelegatedRouteTableReaderMockRecorder
}

// MockDelegatedRouteTableReaderMockRecorder is the mock recorder for MockDelegatedRouteTableReader
type MockDelegatedRouteTableReaderMockRecorder struct {
	mock *MockDelegatedRouteTableReader
}

// NewMockDelegatedRouteTableReader creates a new mock instance
func NewMockDelegatedRouteTableReader(ctrl *gomock.Controller) *MockDelegatedRouteTableReader {
	mock := &MockDelegatedRouteTableReader{ctrl: ctrl}
	mock.recorder = &MockDelegatedRouteTableReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDelegatedRouteTableReader) EXPECT() *MockDelegatedRouteTableReaderMockRecorder {
	return m.recorder
}

// GetDelegatedRouteTable mocks base method
func (m *MockDelegatedRouteTableReader) GetDelegatedRouteTable(ctx context.Context, key client.ObjectKey) (*v1beta1.DelegatedRouteTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegatedRouteTable", ctx, key)
	ret0, _ := ret[0].(*v1beta1.DelegatedRouteTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegatedRouteTable indicates an expected call of GetDelegatedRouteTable
func (mr *MockDelegatedRouteTableReaderMockRecorder) GetDelegatedRouteTable(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegatedRouteTable", reflect.TypeOf((*MockDelegatedRouteTableReader)(nil).GetDelegatedRouteTable), ctx, key)
}

// ListDelegatedRouteTable mocks base method
func (m *MockDelegatedRouteTableReader) ListDelegatedRouteTable(ctx context.Context, opts ...client.ListOption) (*v1beta1.DelegatedRouteTableList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDelegatedRouteTable", varargs...)
	ret0, _ := ret[0].(*v1beta1.DelegatedRouteTableList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDelegatedRouteTable indicates an expected call of ListDelegatedRouteTable
func (mr *MockDelegatedRouteTableReaderMockRecorder) ListDelegatedRouteTable(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDelegatedRouteTable", reflect.TypeOf((*MockDelegatedRouteTableReader)(nil).ListDelegatedRouteTable), varargs...)
}

// MockDelegatedRouteTableWriter is a mock of DelegatedRouteTableWriter interface
type MockDelegatedRouteTableWriter struct {
	ctrl     *gomock.Controller
	recorder *MockDelegatedRouteTableWriterMockRecorder
}

// MockDelegatedRouteTableWriterMockRecorder is the mock recorder for MockDelegatedRouteTableWriter
type MockDelegatedRouteTableWriterMockRecorder struct {
	mock *MockDelegatedRouteTableWriter
}

// NewMockDelegatedRouteTableWriter creates a new mock instance
func NewMockDelegatedRouteTableWriter(ctrl *gomock.Controller) *MockDelegatedRouteTableWriter {
	mock := &MockDelegatedRouteTableWriter{ctrl: ctrl}
	mock.recorder = &MockDelegatedRouteTableWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDelegatedRouteTableWriter) EXPECT() *MockDelegatedRouteTableWriterMockRecorder {
	return m.recorder
}

// CreateDelegatedRouteTable mocks base method
func (m *MockDelegatedRouteTableWriter) CreateDelegatedRouteTable(ctx context.Context, obj *v1beta1.DelegatedRouteTable, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDelegatedRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDelegatedRouteTable indicates an expected call of CreateDelegatedRouteTable
func (mr *MockDelegatedRouteTableWriterMockRecorder) CreateDelegatedRouteTable(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDelegatedRouteTable", reflect.TypeOf((*MockDelegatedRouteTableWriter)(nil).CreateDelegatedRouteTable), varargs...)
}

// DeleteDelegatedRouteTable mocks base method
func (m *MockDelegatedRouteTableWriter) DeleteDelegatedRouteTable(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDelegatedRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDelegatedRouteTable indicates an expected call of DeleteDelegatedRouteTable
func (mr *MockDelegatedRouteTableWriterMockRecorder) DeleteDelegatedRouteTable(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDelegatedRouteTable", reflect.TypeOf((*MockDelegatedRouteTableWriter)(nil).DeleteDelegatedRouteTable), varargs...)
}

// UpdateDelegatedRouteTable mocks base method
func (m *MockDelegatedRouteTableWriter) UpdateDelegatedRouteTable(ctx context.Context, obj *v1beta1.DelegatedRouteTable, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDelegatedRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDelegatedRouteTable indicates an expected call of UpdateDelegatedRouteTable
func (mr *MockDelegatedRouteTableWriterMockRecorder) UpdateDelegatedRouteTable(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDelegatedRouteTable", reflect.TypeOf((*MockDelegatedRouteTableWriter)(nil).UpdateDelegatedRouteTable), varargs...)
}

// PatchDelegatedRouteTable mocks base method
func (m *MockDelegatedRouteTableWriter) PatchDelegatedRouteTable(ctx context.Context, obj *v1beta1.DelegatedRouteTable, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchDelegatedRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDelegatedRouteTable indicates an expected call of PatchDelegatedRouteTable
func (mr *MockDelegatedRouteTableWriterMockRecorder) PatchDelegatedRouteTable(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDelegatedRouteTable", reflect.TypeOf((*MockDelegatedRouteTableWriter)(nil).PatchDelegatedRouteTable), varargs...)
}

// DeleteAllOfDelegatedRouteTable mocks base method
func (m *MockDelegatedRouteTableWriter) DeleteAllOfDelegatedRouteTable(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfDelegatedRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfDelegatedRouteTable indicates an expected call of DeleteAllOfDelegatedRouteTable
func (mr *MockDelegatedRouteTableWriterMockRecorder) DeleteAllOfDelegatedRouteTable(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfDelegatedRouteTable", reflect.TypeOf((*MockDelegatedRouteTableWriter)(nil).DeleteAllOfDelegatedRouteTable), varargs...)
}

// UpsertDelegatedRouteTable mocks base method
func (m *MockDelegatedRouteTableWriter) UpsertDelegatedRouteTable(ctx context.Context, obj *v1beta1.DelegatedRouteTable, transitionFuncs ...v1beta1.DelegatedRouteTableTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertDelegatedRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertDelegatedRouteTable indicates an expected call of UpsertDelegatedRouteTable
func (mr *MockDelegatedRouteTableWriterMockRecorder) UpsertDelegatedRouteTable(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertDelegatedRouteTable", reflect.TypeOf((*MockDelegatedRouteTableWriter)(nil).UpsertDelegatedRouteTable), varargs...)
}

// MockDelegatedRouteTableStatusWriter is a mock of DelegatedRouteTableStatusWriter interface
type MockDelegatedRouteTableStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockDelegatedRouteTableStatusWriterMockRecorder
}

// MockDelegatedRouteTableStatusWriterMockRecorder is the mock recorder for MockDelegatedRouteTableStatusWriter
type MockDelegatedRouteTableStatusWriterMockRecorder struct {
	mock *MockDelegatedRouteTableStatusWriter
}

// NewMockDelegatedRouteTableStatusWriter creates a new mock instance
func NewMockDelegatedRouteTableStatusWriter(ctrl *gomock.Controller) *MockDelegatedRouteTableStatusWriter {
	mock := &MockDelegatedRouteTableStatusWriter{ctrl: ctrl}
	mock.recorder = &MockDelegatedRouteTableStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDelegatedRouteTableStatusWriter) EXPECT() *MockDelegatedRouteTableStatusWriterMockRecorder {
	return m.recorder
}

// UpdateDelegatedRouteTableStatus mocks base method
func (m *MockDelegatedRouteTableStatusWriter) UpdateDelegatedRouteTableStatus(ctx context.Context, obj *v1beta1.DelegatedRouteTable, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDelegatedRouteTableStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDelegatedRouteTableStatus indicates an expected call of UpdateDelegatedRouteTableStatus
func (mr *MockDelegatedRouteTableStatusWriterMockRecorder) UpdateDelegatedRouteTableStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDelegatedRouteTableStatus", reflect.TypeOf((*MockDelegatedRouteTableStatusWriter)(nil).UpdateDelegatedRouteTableStatus), varargs...)
}

// PatchDelegatedRouteTableStatus mocks base method
func (m *MockDelegatedRouteTableStatusWriter) PatchDelegatedRouteTableStatus(ctx context.Context, obj *v1beta1.DelegatedRouteTable, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchDelegatedRouteTableStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDelegatedRouteTableStatus indicates an expected call of PatchDelegatedRouteTableStatus
func (mr *MockDelegatedRouteTableStatusWriterMockRecorder) PatchDelegatedRouteTableStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDelegatedRouteTableStatus", reflect.TypeOf((*MockDelegatedRouteTableStatusWriter)(nil).PatchDelegatedRouteTableStatus), varargs...)
}

// MockDelegatedRouteTableClient is a mock of DelegatedRouteTableClient interface
type MockDelegatedRouteTableClient struct {
	ctrl     *gomock.Controller
	recorder *MockDelegatedRouteTableClientMockRecorder
}

// MockDelegatedRouteTableClientMockRecorder is the mock recorder for MockDelegatedRouteTableClient
type MockDelegatedRouteTableClientMockRecorder struct {
	mock *MockDelegatedRouteTableClient
}

// NewMockDelegatedRouteTableClient creates a new mock instance
func NewMockDelegatedRouteTableClient(ctrl *gomock.Controller) *MockDelegatedRouteTableClient {
	mock := &MockDelegatedRouteTableClient{ctrl: ctrl}
	mock.recorder = &MockDelegatedRouteTableClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDelegatedRouteTableClient) EXPECT() *MockDelegatedRouteTableClientMockRecorder {
	return m.recorder
}

// GetDelegatedRouteTable mocks base method
func (m *MockDelegatedRouteTableClient) GetDelegatedRouteTable(ctx context.Context, key client.ObjectKey) (*v1beta1.DelegatedRouteTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegatedRouteTable", ctx, key)
	ret0, _ := ret[0].(*v1beta1.DelegatedRouteTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegatedRouteTable indicates an expected call of GetDelegatedRouteTable
func (mr *MockDelegatedRouteTableClientMockRecorder) GetDelegatedRouteTable(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegatedRouteTable", reflect.TypeOf((*MockDelegatedRouteTableClient)(nil).GetDelegatedRouteTable), ctx, key)
}

// ListDelegatedRouteTable mocks base method
func (m *MockDelegatedRouteTableClient) ListDelegatedRouteTable(ctx context.Context, opts ...client.ListOption) (*v1beta1.DelegatedRouteTableList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDelegatedRouteTable", varargs...)
	ret0, _ := ret[0].(*v1beta1.DelegatedRouteTableList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDelegatedRouteTable indicates an expected call of ListDelegatedRouteTable
func (mr *MockDelegatedRouteTableClientMockRecorder) ListDelegatedRouteTable(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDelegatedRouteTable", reflect.TypeOf((*MockDelegatedRouteTableClient)(nil).ListDelegatedRouteTable), varargs...)
}

// CreateDelegatedRouteTable mocks base method
func (m *MockDelegatedRouteTableClient) CreateDelegatedRouteTable(ctx context.Context, obj *v1beta1.DelegatedRouteTable, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDelegatedRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDelegatedRouteTable indicates an expected call of CreateDelegatedRouteTable
func (mr *MockDelegatedRouteTableClientMockRecorder) CreateDelegatedRouteTable(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDelegatedRouteTable", reflect.TypeOf((*MockDelegatedRouteTableClient)(nil).CreateDelegatedRouteTable), varargs...)
}

// DeleteDelegatedRouteTable mocks base method
func (m *MockDelegatedRouteTableClient) DeleteDelegatedRouteTable(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDelegatedRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDelegatedRouteTable indicates an expected call of DeleteDelegatedRouteTable
func (mr *MockDelegatedRouteTableClientMockRecorder) DeleteDelegatedRouteTable(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDelegatedRouteTable", reflect.TypeOf((*MockDelegatedRouteTableClient)(nil).DeleteDelegatedRouteTable), varargs...)
}

// UpdateDelegatedRouteTable mocks base method
func (m *MockDelegatedRouteTableClient) UpdateDelegatedRouteTable(ctx context.Context, obj *v1beta1.DelegatedRouteTable, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDelegatedRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDelegatedRouteTable indicates an expected call of UpdateDelegatedRouteTable
func (mr *MockDelegatedRouteTableClientMockRecorder) UpdateDelegatedRouteTable(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDelegatedRouteTable", reflect.TypeOf((*MockDelegatedRouteTableClient)(nil).UpdateDelegatedRouteTable), varargs...)
}

// PatchDelegatedRouteTable mocks base method
func (m *MockDelegatedRouteTableClient) PatchDelegatedRouteTable(ctx context.Context, obj *v1beta1.DelegatedRouteTable, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchDelegatedRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDelegatedRouteTable indicates an expected call of PatchDelegatedRouteTable
func (mr *MockDelegatedRouteTableClientMockRecorder) PatchDelegatedRouteTable(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDelegatedRouteTable", reflect.TypeOf((*MockDelegatedRouteTableClient)(nil).PatchDelegatedRouteTable), varargs...)
}

// DeleteAllOfDelegatedRouteTable mocks base method
func (m *MockDelegatedRouteTableClient) DeleteAllOfDelegatedRouteTable(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfDelegatedRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfDelegatedRouteTable indicates an expected call of DeleteAllOfDelegatedRouteTable
func (mr *MockDelegatedRouteTableClientMockRecorder) DeleteAllOfDelegatedRouteTable(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfDelegatedRouteTable", reflect.TypeOf((*MockDelegatedRouteTableClient)(nil).DeleteAllOfDelegatedRouteTable), varargs...)
}

// UpsertDelegatedRouteTable mocks base method
func (m *MockDelegatedRouteTableClient) UpsertDelegatedRouteTable(ctx context.Context, obj *v1beta1.DelegatedRouteTable, transitionFuncs ...v1beta1.DelegatedRouteTableTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertDelegatedRouteTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertDelegatedRouteTable indicates an expected call of UpsertDelegatedRouteTable
func (mr *MockDelegatedRouteTableClientMockRecorder) UpsertDelegatedRouteTable(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertDelegatedRouteTable", reflect.TypeOf((*MockDelegatedRouteTableClient)(nil).UpsertDelegatedRouteTable), varargs...)
}

// UpdateDelegatedRouteTableStatus mocks base method
func (m *MockDelegatedRouteTableClient) UpdateDelegatedRouteTableStatus(ctx context.Context, obj *v1beta1.DelegatedRouteTable, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDelegatedRouteTableStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDelegatedRouteTableStatus indicates an expected call of UpdateDelegatedRouteTableStatus
func (mr *MockDelegatedRouteTableClientMockRecorder) UpdateDelegatedRouteTableStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDelegatedRouteTableStatus", reflect.TypeOf((*MockDelegatedRouteTableClient)(nil).UpdateDelegatedRouteTableStatus), varargs...)
}

// PatchDelegatedRouteTableStatus mocks base method
func (m *MockDelegatedRouteTableClient) PatchDelegatedRouteTableStatus(ctx context.Context, obj *v1beta1.DelegatedRouteTable, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchDelegatedRouteTableStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDelegatedRouteTableStatus indicates an expected call of PatchDelegatedRouteTableStatus
func (mr *MockDelegatedRouteTableClientMockRecorder) PatchDelegatedRouteTableStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDelegatedRouteTableStatus", reflect.TypeOf((*MockDelegatedRouteTableClient)(nil).PatchDelegatedRouteTableStatus), varargs...)
}

// MockMulticlusterDelegatedRouteTableClient is a mock of MulticlusterDelegatedRouteTableClient interface
type MockMulticlusterDelegatedRouteTableClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterDelegatedRouteTableClientMockRecorder
}

// MockMulticlusterDelegatedRouteTableClientMockRecorder is the mock recorder for MockMulticlusterDelegatedRouteTableClient
type MockMulticlusterDelegatedRouteTableClientMockRecorder struct {
	mock *MockMulticlusterDelegatedRouteTableClient
}

// NewMockMulticlusterDelegatedRouteTableClient creates a new mock instance
func NewMockMulticlusterDelegatedRouteTableClient(ctrl *gomock.Controller) *MockMulticlusterDelegatedRouteTableClient {
	mock := &MockMulticlusterDelegatedRouteTableClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterDelegatedRouteTableClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterDelegatedRouteTableClient) EXPECT() *MockMulticlusterDelegatedRouteTableClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockMulticlusterDelegatedRouteTableClient) Cluster(cluster string) (v1beta1.DelegatedRouteTableClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1beta1.DelegatedRouteTableClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster
func (mr *MockMulticlusterDelegatedRouteTableClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterDelegatedRouteTableClient)(nil).Cluster), cluster)
}
