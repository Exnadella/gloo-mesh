// Code generated by MockGen. DO NOT EDIT.
// Source: ./multicluster_reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1beta1 "github.com/solo-io/gloo-mesh/pkg/api/networking.enterprise.mesh.gloo.solo.io/v1beta1"
	controller "github.com/solo-io/gloo-mesh/pkg/api/networking.enterprise.mesh.gloo.solo.io/v1beta1/controller"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockMulticlusterWasmDeploymentReconciler is a mock of MulticlusterWasmDeploymentReconciler interface
type MockMulticlusterWasmDeploymentReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterWasmDeploymentReconcilerMockRecorder
}

// MockMulticlusterWasmDeploymentReconcilerMockRecorder is the mock recorder for MockMulticlusterWasmDeploymentReconciler
type MockMulticlusterWasmDeploymentReconcilerMockRecorder struct {
	mock *MockMulticlusterWasmDeploymentReconciler
}

// NewMockMulticlusterWasmDeploymentReconciler creates a new mock instance
func NewMockMulticlusterWasmDeploymentReconciler(ctrl *gomock.Controller) *MockMulticlusterWasmDeploymentReconciler {
	mock := &MockMulticlusterWasmDeploymentReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterWasmDeploymentReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterWasmDeploymentReconciler) EXPECT() *MockMulticlusterWasmDeploymentReconcilerMockRecorder {
	return m.recorder
}

// ReconcileWasmDeployment mocks base method
func (m *MockMulticlusterWasmDeploymentReconciler) ReconcileWasmDeployment(clusterName string, obj *v1beta1.WasmDeployment) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileWasmDeployment", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileWasmDeployment indicates an expected call of ReconcileWasmDeployment
func (mr *MockMulticlusterWasmDeploymentReconcilerMockRecorder) ReconcileWasmDeployment(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileWasmDeployment", reflect.TypeOf((*MockMulticlusterWasmDeploymentReconciler)(nil).ReconcileWasmDeployment), clusterName, obj)
}

// MockMulticlusterWasmDeploymentDeletionReconciler is a mock of MulticlusterWasmDeploymentDeletionReconciler interface
type MockMulticlusterWasmDeploymentDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterWasmDeploymentDeletionReconcilerMockRecorder
}

// MockMulticlusterWasmDeploymentDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterWasmDeploymentDeletionReconciler
type MockMulticlusterWasmDeploymentDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterWasmDeploymentDeletionReconciler
}

// NewMockMulticlusterWasmDeploymentDeletionReconciler creates a new mock instance
func NewMockMulticlusterWasmDeploymentDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterWasmDeploymentDeletionReconciler {
	mock := &MockMulticlusterWasmDeploymentDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterWasmDeploymentDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterWasmDeploymentDeletionReconciler) EXPECT() *MockMulticlusterWasmDeploymentDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileWasmDeploymentDeletion mocks base method
func (m *MockMulticlusterWasmDeploymentDeletionReconciler) ReconcileWasmDeploymentDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileWasmDeploymentDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileWasmDeploymentDeletion indicates an expected call of ReconcileWasmDeploymentDeletion
func (mr *MockMulticlusterWasmDeploymentDeletionReconcilerMockRecorder) ReconcileWasmDeploymentDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileWasmDeploymentDeletion", reflect.TypeOf((*MockMulticlusterWasmDeploymentDeletionReconciler)(nil).ReconcileWasmDeploymentDeletion), clusterName, req)
}

// MockMulticlusterWasmDeploymentReconcileLoop is a mock of MulticlusterWasmDeploymentReconcileLoop interface
type MockMulticlusterWasmDeploymentReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterWasmDeploymentReconcileLoopMockRecorder
}

// MockMulticlusterWasmDeploymentReconcileLoopMockRecorder is the mock recorder for MockMulticlusterWasmDeploymentReconcileLoop
type MockMulticlusterWasmDeploymentReconcileLoopMockRecorder struct {
	mock *MockMulticlusterWasmDeploymentReconcileLoop
}

// NewMockMulticlusterWasmDeploymentReconcileLoop creates a new mock instance
func NewMockMulticlusterWasmDeploymentReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterWasmDeploymentReconcileLoop {
	mock := &MockMulticlusterWasmDeploymentReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterWasmDeploymentReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterWasmDeploymentReconcileLoop) EXPECT() *MockMulticlusterWasmDeploymentReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterWasmDeploymentReconciler mocks base method
func (m *MockMulticlusterWasmDeploymentReconcileLoop) AddMulticlusterWasmDeploymentReconciler(ctx context.Context, rec controller.MulticlusterWasmDeploymentReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterWasmDeploymentReconciler", varargs...)
}

// AddMulticlusterWasmDeploymentReconciler indicates an expected call of AddMulticlusterWasmDeploymentReconciler
func (mr *MockMulticlusterWasmDeploymentReconcileLoopMockRecorder) AddMulticlusterWasmDeploymentReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterWasmDeploymentReconciler", reflect.TypeOf((*MockMulticlusterWasmDeploymentReconcileLoop)(nil).AddMulticlusterWasmDeploymentReconciler), varargs...)
}

// MockMulticlusterVirtualDestinationReconciler is a mock of MulticlusterVirtualDestinationReconciler interface
type MockMulticlusterVirtualDestinationReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterVirtualDestinationReconcilerMockRecorder
}

// MockMulticlusterVirtualDestinationReconcilerMockRecorder is the mock recorder for MockMulticlusterVirtualDestinationReconciler
type MockMulticlusterVirtualDestinationReconcilerMockRecorder struct {
	mock *MockMulticlusterVirtualDestinationReconciler
}

// NewMockMulticlusterVirtualDestinationReconciler creates a new mock instance
func NewMockMulticlusterVirtualDestinationReconciler(ctrl *gomock.Controller) *MockMulticlusterVirtualDestinationReconciler {
	mock := &MockMulticlusterVirtualDestinationReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterVirtualDestinationReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterVirtualDestinationReconciler) EXPECT() *MockMulticlusterVirtualDestinationReconcilerMockRecorder {
	return m.recorder
}

// ReconcileVirtualDestination mocks base method
func (m *MockMulticlusterVirtualDestinationReconciler) ReconcileVirtualDestination(clusterName string, obj *v1beta1.VirtualDestination) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualDestination", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileVirtualDestination indicates an expected call of ReconcileVirtualDestination
func (mr *MockMulticlusterVirtualDestinationReconcilerMockRecorder) ReconcileVirtualDestination(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualDestination", reflect.TypeOf((*MockMulticlusterVirtualDestinationReconciler)(nil).ReconcileVirtualDestination), clusterName, obj)
}

// MockMulticlusterVirtualDestinationDeletionReconciler is a mock of MulticlusterVirtualDestinationDeletionReconciler interface
type MockMulticlusterVirtualDestinationDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterVirtualDestinationDeletionReconcilerMockRecorder
}

// MockMulticlusterVirtualDestinationDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterVirtualDestinationDeletionReconciler
type MockMulticlusterVirtualDestinationDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterVirtualDestinationDeletionReconciler
}

// NewMockMulticlusterVirtualDestinationDeletionReconciler creates a new mock instance
func NewMockMulticlusterVirtualDestinationDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterVirtualDestinationDeletionReconciler {
	mock := &MockMulticlusterVirtualDestinationDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterVirtualDestinationDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterVirtualDestinationDeletionReconciler) EXPECT() *MockMulticlusterVirtualDestinationDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileVirtualDestinationDeletion mocks base method
func (m *MockMulticlusterVirtualDestinationDeletionReconciler) ReconcileVirtualDestinationDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualDestinationDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileVirtualDestinationDeletion indicates an expected call of ReconcileVirtualDestinationDeletion
func (mr *MockMulticlusterVirtualDestinationDeletionReconcilerMockRecorder) ReconcileVirtualDestinationDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualDestinationDeletion", reflect.TypeOf((*MockMulticlusterVirtualDestinationDeletionReconciler)(nil).ReconcileVirtualDestinationDeletion), clusterName, req)
}

// MockMulticlusterVirtualDestinationReconcileLoop is a mock of MulticlusterVirtualDestinationReconcileLoop interface
type MockMulticlusterVirtualDestinationReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterVirtualDestinationReconcileLoopMockRecorder
}

// MockMulticlusterVirtualDestinationReconcileLoopMockRecorder is the mock recorder for MockMulticlusterVirtualDestinationReconcileLoop
type MockMulticlusterVirtualDestinationReconcileLoopMockRecorder struct {
	mock *MockMulticlusterVirtualDestinationReconcileLoop
}

// NewMockMulticlusterVirtualDestinationReconcileLoop creates a new mock instance
func NewMockMulticlusterVirtualDestinationReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterVirtualDestinationReconcileLoop {
	mock := &MockMulticlusterVirtualDestinationReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterVirtualDestinationReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterVirtualDestinationReconcileLoop) EXPECT() *MockMulticlusterVirtualDestinationReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterVirtualDestinationReconciler mocks base method
func (m *MockMulticlusterVirtualDestinationReconcileLoop) AddMulticlusterVirtualDestinationReconciler(ctx context.Context, rec controller.MulticlusterVirtualDestinationReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterVirtualDestinationReconciler", varargs...)
}

// AddMulticlusterVirtualDestinationReconciler indicates an expected call of AddMulticlusterVirtualDestinationReconciler
func (mr *MockMulticlusterVirtualDestinationReconcileLoopMockRecorder) AddMulticlusterVirtualDestinationReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterVirtualDestinationReconciler", reflect.TypeOf((*MockMulticlusterVirtualDestinationReconcileLoop)(nil).AddMulticlusterVirtualDestinationReconciler), varargs...)
}

// MockMulticlusterFederatedGatewayReconciler is a mock of MulticlusterFederatedGatewayReconciler interface
type MockMulticlusterFederatedGatewayReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterFederatedGatewayReconcilerMockRecorder
}

// MockMulticlusterFederatedGatewayReconcilerMockRecorder is the mock recorder for MockMulticlusterFederatedGatewayReconciler
type MockMulticlusterFederatedGatewayReconcilerMockRecorder struct {
	mock *MockMulticlusterFederatedGatewayReconciler
}

// NewMockMulticlusterFederatedGatewayReconciler creates a new mock instance
func NewMockMulticlusterFederatedGatewayReconciler(ctrl *gomock.Controller) *MockMulticlusterFederatedGatewayReconciler {
	mock := &MockMulticlusterFederatedGatewayReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterFederatedGatewayReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterFederatedGatewayReconciler) EXPECT() *MockMulticlusterFederatedGatewayReconcilerMockRecorder {
	return m.recorder
}

// ReconcileFederatedGateway mocks base method
func (m *MockMulticlusterFederatedGatewayReconciler) ReconcileFederatedGateway(clusterName string, obj *v1beta1.FederatedGateway) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileFederatedGateway", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileFederatedGateway indicates an expected call of ReconcileFederatedGateway
func (mr *MockMulticlusterFederatedGatewayReconcilerMockRecorder) ReconcileFederatedGateway(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileFederatedGateway", reflect.TypeOf((*MockMulticlusterFederatedGatewayReconciler)(nil).ReconcileFederatedGateway), clusterName, obj)
}

// MockMulticlusterFederatedGatewayDeletionReconciler is a mock of MulticlusterFederatedGatewayDeletionReconciler interface
type MockMulticlusterFederatedGatewayDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterFederatedGatewayDeletionReconcilerMockRecorder
}

// MockMulticlusterFederatedGatewayDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterFederatedGatewayDeletionReconciler
type MockMulticlusterFederatedGatewayDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterFederatedGatewayDeletionReconciler
}

// NewMockMulticlusterFederatedGatewayDeletionReconciler creates a new mock instance
func NewMockMulticlusterFederatedGatewayDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterFederatedGatewayDeletionReconciler {
	mock := &MockMulticlusterFederatedGatewayDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterFederatedGatewayDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterFederatedGatewayDeletionReconciler) EXPECT() *MockMulticlusterFederatedGatewayDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileFederatedGatewayDeletion mocks base method
func (m *MockMulticlusterFederatedGatewayDeletionReconciler) ReconcileFederatedGatewayDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileFederatedGatewayDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileFederatedGatewayDeletion indicates an expected call of ReconcileFederatedGatewayDeletion
func (mr *MockMulticlusterFederatedGatewayDeletionReconcilerMockRecorder) ReconcileFederatedGatewayDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileFederatedGatewayDeletion", reflect.TypeOf((*MockMulticlusterFederatedGatewayDeletionReconciler)(nil).ReconcileFederatedGatewayDeletion), clusterName, req)
}

// MockMulticlusterFederatedGatewayReconcileLoop is a mock of MulticlusterFederatedGatewayReconcileLoop interface
type MockMulticlusterFederatedGatewayReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterFederatedGatewayReconcileLoopMockRecorder
}

// MockMulticlusterFederatedGatewayReconcileLoopMockRecorder is the mock recorder for MockMulticlusterFederatedGatewayReconcileLoop
type MockMulticlusterFederatedGatewayReconcileLoopMockRecorder struct {
	mock *MockMulticlusterFederatedGatewayReconcileLoop
}

// NewMockMulticlusterFederatedGatewayReconcileLoop creates a new mock instance
func NewMockMulticlusterFederatedGatewayReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterFederatedGatewayReconcileLoop {
	mock := &MockMulticlusterFederatedGatewayReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterFederatedGatewayReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterFederatedGatewayReconcileLoop) EXPECT() *MockMulticlusterFederatedGatewayReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterFederatedGatewayReconciler mocks base method
func (m *MockMulticlusterFederatedGatewayReconcileLoop) AddMulticlusterFederatedGatewayReconciler(ctx context.Context, rec controller.MulticlusterFederatedGatewayReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterFederatedGatewayReconciler", varargs...)
}

// AddMulticlusterFederatedGatewayReconciler indicates an expected call of AddMulticlusterFederatedGatewayReconciler
func (mr *MockMulticlusterFederatedGatewayReconcileLoopMockRecorder) AddMulticlusterFederatedGatewayReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterFederatedGatewayReconciler", reflect.TypeOf((*MockMulticlusterFederatedGatewayReconcileLoop)(nil).AddMulticlusterFederatedGatewayReconciler), varargs...)
}

// MockMulticlusterRouteTableReconciler is a mock of MulticlusterRouteTableReconciler interface
type MockMulticlusterRouteTableReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterRouteTableReconcilerMockRecorder
}

// MockMulticlusterRouteTableReconcilerMockRecorder is the mock recorder for MockMulticlusterRouteTableReconciler
type MockMulticlusterRouteTableReconcilerMockRecorder struct {
	mock *MockMulticlusterRouteTableReconciler
}

// NewMockMulticlusterRouteTableReconciler creates a new mock instance
func NewMockMulticlusterRouteTableReconciler(ctrl *gomock.Controller) *MockMulticlusterRouteTableReconciler {
	mock := &MockMulticlusterRouteTableReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterRouteTableReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterRouteTableReconciler) EXPECT() *MockMulticlusterRouteTableReconcilerMockRecorder {
	return m.recorder
}

// ReconcileRouteTable mocks base method
func (m *MockMulticlusterRouteTableReconciler) ReconcileRouteTable(clusterName string, obj *v1beta1.RouteTable) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRouteTable", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileRouteTable indicates an expected call of ReconcileRouteTable
func (mr *MockMulticlusterRouteTableReconcilerMockRecorder) ReconcileRouteTable(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRouteTable", reflect.TypeOf((*MockMulticlusterRouteTableReconciler)(nil).ReconcileRouteTable), clusterName, obj)
}

// MockMulticlusterRouteTableDeletionReconciler is a mock of MulticlusterRouteTableDeletionReconciler interface
type MockMulticlusterRouteTableDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterRouteTableDeletionReconcilerMockRecorder
}

// MockMulticlusterRouteTableDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterRouteTableDeletionReconciler
type MockMulticlusterRouteTableDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterRouteTableDeletionReconciler
}

// NewMockMulticlusterRouteTableDeletionReconciler creates a new mock instance
func NewMockMulticlusterRouteTableDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterRouteTableDeletionReconciler {
	mock := &MockMulticlusterRouteTableDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterRouteTableDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterRouteTableDeletionReconciler) EXPECT() *MockMulticlusterRouteTableDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileRouteTableDeletion mocks base method
func (m *MockMulticlusterRouteTableDeletionReconciler) ReconcileRouteTableDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRouteTableDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileRouteTableDeletion indicates an expected call of ReconcileRouteTableDeletion
func (mr *MockMulticlusterRouteTableDeletionReconcilerMockRecorder) ReconcileRouteTableDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRouteTableDeletion", reflect.TypeOf((*MockMulticlusterRouteTableDeletionReconciler)(nil).ReconcileRouteTableDeletion), clusterName, req)
}

// MockMulticlusterRouteTableReconcileLoop is a mock of MulticlusterRouteTableReconcileLoop interface
type MockMulticlusterRouteTableReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterRouteTableReconcileLoopMockRecorder
}

// MockMulticlusterRouteTableReconcileLoopMockRecorder is the mock recorder for MockMulticlusterRouteTableReconcileLoop
type MockMulticlusterRouteTableReconcileLoopMockRecorder struct {
	mock *MockMulticlusterRouteTableReconcileLoop
}

// NewMockMulticlusterRouteTableReconcileLoop creates a new mock instance
func NewMockMulticlusterRouteTableReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterRouteTableReconcileLoop {
	mock := &MockMulticlusterRouteTableReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterRouteTableReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterRouteTableReconcileLoop) EXPECT() *MockMulticlusterRouteTableReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterRouteTableReconciler mocks base method
func (m *MockMulticlusterRouteTableReconcileLoop) AddMulticlusterRouteTableReconciler(ctx context.Context, rec controller.MulticlusterRouteTableReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterRouteTableReconciler", varargs...)
}

// AddMulticlusterRouteTableReconciler indicates an expected call of AddMulticlusterRouteTableReconciler
func (mr *MockMulticlusterRouteTableReconcileLoopMockRecorder) AddMulticlusterRouteTableReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterRouteTableReconciler", reflect.TypeOf((*MockMulticlusterRouteTableReconcileLoop)(nil).AddMulticlusterRouteTableReconciler), varargs...)
}

// MockMulticlusterDelegatedRouteTableReconciler is a mock of MulticlusterDelegatedRouteTableReconciler interface
type MockMulticlusterDelegatedRouteTableReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterDelegatedRouteTableReconcilerMockRecorder
}

// MockMulticlusterDelegatedRouteTableReconcilerMockRecorder is the mock recorder for MockMulticlusterDelegatedRouteTableReconciler
type MockMulticlusterDelegatedRouteTableReconcilerMockRecorder struct {
	mock *MockMulticlusterDelegatedRouteTableReconciler
}

// NewMockMulticlusterDelegatedRouteTableReconciler creates a new mock instance
func NewMockMulticlusterDelegatedRouteTableReconciler(ctrl *gomock.Controller) *MockMulticlusterDelegatedRouteTableReconciler {
	mock := &MockMulticlusterDelegatedRouteTableReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterDelegatedRouteTableReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterDelegatedRouteTableReconciler) EXPECT() *MockMulticlusterDelegatedRouteTableReconcilerMockRecorder {
	return m.recorder
}

// ReconcileDelegatedRouteTable mocks base method
func (m *MockMulticlusterDelegatedRouteTableReconciler) ReconcileDelegatedRouteTable(clusterName string, obj *v1beta1.DelegatedRouteTable) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileDelegatedRouteTable", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileDelegatedRouteTable indicates an expected call of ReconcileDelegatedRouteTable
func (mr *MockMulticlusterDelegatedRouteTableReconcilerMockRecorder) ReconcileDelegatedRouteTable(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileDelegatedRouteTable", reflect.TypeOf((*MockMulticlusterDelegatedRouteTableReconciler)(nil).ReconcileDelegatedRouteTable), clusterName, obj)
}

// MockMulticlusterDelegatedRouteTableDeletionReconciler is a mock of MulticlusterDelegatedRouteTableDeletionReconciler interface
type MockMulticlusterDelegatedRouteTableDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterDelegatedRouteTableDeletionReconcilerMockRecorder
}

// MockMulticlusterDelegatedRouteTableDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterDelegatedRouteTableDeletionReconciler
type MockMulticlusterDelegatedRouteTableDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterDelegatedRouteTableDeletionReconciler
}

// NewMockMulticlusterDelegatedRouteTableDeletionReconciler creates a new mock instance
func NewMockMulticlusterDelegatedRouteTableDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterDelegatedRouteTableDeletionReconciler {
	mock := &MockMulticlusterDelegatedRouteTableDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterDelegatedRouteTableDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterDelegatedRouteTableDeletionReconciler) EXPECT() *MockMulticlusterDelegatedRouteTableDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileDelegatedRouteTableDeletion mocks base method
func (m *MockMulticlusterDelegatedRouteTableDeletionReconciler) ReconcileDelegatedRouteTableDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileDelegatedRouteTableDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileDelegatedRouteTableDeletion indicates an expected call of ReconcileDelegatedRouteTableDeletion
func (mr *MockMulticlusterDelegatedRouteTableDeletionReconcilerMockRecorder) ReconcileDelegatedRouteTableDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileDelegatedRouteTableDeletion", reflect.TypeOf((*MockMulticlusterDelegatedRouteTableDeletionReconciler)(nil).ReconcileDelegatedRouteTableDeletion), clusterName, req)
}

// MockMulticlusterDelegatedRouteTableReconcileLoop is a mock of MulticlusterDelegatedRouteTableReconcileLoop interface
type MockMulticlusterDelegatedRouteTableReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterDelegatedRouteTableReconcileLoopMockRecorder
}

// MockMulticlusterDelegatedRouteTableReconcileLoopMockRecorder is the mock recorder for MockMulticlusterDelegatedRouteTableReconcileLoop
type MockMulticlusterDelegatedRouteTableReconcileLoopMockRecorder struct {
	mock *MockMulticlusterDelegatedRouteTableReconcileLoop
}

// NewMockMulticlusterDelegatedRouteTableReconcileLoop creates a new mock instance
func NewMockMulticlusterDelegatedRouteTableReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterDelegatedRouteTableReconcileLoop {
	mock := &MockMulticlusterDelegatedRouteTableReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterDelegatedRouteTableReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterDelegatedRouteTableReconcileLoop) EXPECT() *MockMulticlusterDelegatedRouteTableReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterDelegatedRouteTableReconciler mocks base method
func (m *MockMulticlusterDelegatedRouteTableReconcileLoop) AddMulticlusterDelegatedRouteTableReconciler(ctx context.Context, rec controller.MulticlusterDelegatedRouteTableReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterDelegatedRouteTableReconciler", varargs...)
}

// AddMulticlusterDelegatedRouteTableReconciler indicates an expected call of AddMulticlusterDelegatedRouteTableReconciler
func (mr *MockMulticlusterDelegatedRouteTableReconcileLoopMockRecorder) AddMulticlusterDelegatedRouteTableReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterDelegatedRouteTableReconciler", reflect.TypeOf((*MockMulticlusterDelegatedRouteTableReconcileLoop)(nil).AddMulticlusterDelegatedRouteTableReconciler), varargs...)
}
