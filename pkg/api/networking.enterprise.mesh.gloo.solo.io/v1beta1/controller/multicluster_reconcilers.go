// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./multicluster_reconcilers.go -destination mocks/multicluster_reconcilers.go

// Definitions for the multicluster Kubernetes Controllers
package controller

import (
	"context"

	networking_enterprise_mesh_gloo_solo_io_v1beta1 "github.com/solo-io/gloo-mesh/pkg/api/networking.enterprise.mesh.gloo.solo.io/v1beta1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/multicluster"
	mc_reconcile "github.com/solo-io/skv2/pkg/multicluster/reconcile"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the WasmDeployment Resource across clusters.
// implemented by the user
type MulticlusterWasmDeploymentReconciler interface {
	ReconcileWasmDeployment(clusterName string, obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.WasmDeployment) (reconcile.Result, error)
}

// Reconcile deletion events for the WasmDeployment Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterWasmDeploymentDeletionReconciler interface {
	ReconcileWasmDeploymentDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterWasmDeploymentReconcilerFuncs struct {
	OnReconcileWasmDeployment         func(clusterName string, obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.WasmDeployment) (reconcile.Result, error)
	OnReconcileWasmDeploymentDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterWasmDeploymentReconcilerFuncs) ReconcileWasmDeployment(clusterName string, obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.WasmDeployment) (reconcile.Result, error) {
	if f.OnReconcileWasmDeployment == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileWasmDeployment(clusterName, obj)
}

func (f *MulticlusterWasmDeploymentReconcilerFuncs) ReconcileWasmDeploymentDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileWasmDeploymentDeletion == nil {
		return nil
	}
	return f.OnReconcileWasmDeploymentDeletion(clusterName, req)
}

type MulticlusterWasmDeploymentReconcileLoop interface {
	// AddMulticlusterWasmDeploymentReconciler adds a MulticlusterWasmDeploymentReconciler to the MulticlusterWasmDeploymentReconcileLoop.
	AddMulticlusterWasmDeploymentReconciler(ctx context.Context, rec MulticlusterWasmDeploymentReconciler, predicates ...predicate.Predicate)
}

type multiclusterWasmDeploymentReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterWasmDeploymentReconcileLoop) AddMulticlusterWasmDeploymentReconciler(ctx context.Context, rec MulticlusterWasmDeploymentReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericWasmDeploymentMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterWasmDeploymentReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterWasmDeploymentReconcileLoop {
	return &multiclusterWasmDeploymentReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &networking_enterprise_mesh_gloo_solo_io_v1beta1.WasmDeployment{}, options)}
}

type genericWasmDeploymentMulticlusterReconciler struct {
	reconciler MulticlusterWasmDeploymentReconciler
}

func (g genericWasmDeploymentMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterWasmDeploymentDeletionReconciler); ok {
		return deletionReconciler.ReconcileWasmDeploymentDeletion(cluster, req)
	}
	return nil
}

func (g genericWasmDeploymentMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.WasmDeployment)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: WasmDeployment handler received event for %T", object)
	}
	return g.reconciler.ReconcileWasmDeployment(cluster, obj)
}

// Reconcile Upsert events for the VirtualDestination Resource across clusters.
// implemented by the user
type MulticlusterVirtualDestinationReconciler interface {
	ReconcileVirtualDestination(clusterName string, obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualDestination) (reconcile.Result, error)
}

// Reconcile deletion events for the VirtualDestination Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterVirtualDestinationDeletionReconciler interface {
	ReconcileVirtualDestinationDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterVirtualDestinationReconcilerFuncs struct {
	OnReconcileVirtualDestination         func(clusterName string, obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualDestination) (reconcile.Result, error)
	OnReconcileVirtualDestinationDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterVirtualDestinationReconcilerFuncs) ReconcileVirtualDestination(clusterName string, obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualDestination) (reconcile.Result, error) {
	if f.OnReconcileVirtualDestination == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileVirtualDestination(clusterName, obj)
}

func (f *MulticlusterVirtualDestinationReconcilerFuncs) ReconcileVirtualDestinationDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileVirtualDestinationDeletion == nil {
		return nil
	}
	return f.OnReconcileVirtualDestinationDeletion(clusterName, req)
}

type MulticlusterVirtualDestinationReconcileLoop interface {
	// AddMulticlusterVirtualDestinationReconciler adds a MulticlusterVirtualDestinationReconciler to the MulticlusterVirtualDestinationReconcileLoop.
	AddMulticlusterVirtualDestinationReconciler(ctx context.Context, rec MulticlusterVirtualDestinationReconciler, predicates ...predicate.Predicate)
}

type multiclusterVirtualDestinationReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterVirtualDestinationReconcileLoop) AddMulticlusterVirtualDestinationReconciler(ctx context.Context, rec MulticlusterVirtualDestinationReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericVirtualDestinationMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterVirtualDestinationReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterVirtualDestinationReconcileLoop {
	return &multiclusterVirtualDestinationReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualDestination{}, options)}
}

type genericVirtualDestinationMulticlusterReconciler struct {
	reconciler MulticlusterVirtualDestinationReconciler
}

func (g genericVirtualDestinationMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterVirtualDestinationDeletionReconciler); ok {
		return deletionReconciler.ReconcileVirtualDestinationDeletion(cluster, req)
	}
	return nil
}

func (g genericVirtualDestinationMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.VirtualDestination)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: VirtualDestination handler received event for %T", object)
	}
	return g.reconciler.ReconcileVirtualDestination(cluster, obj)
}

// Reconcile Upsert events for the FederatedGateway Resource across clusters.
// implemented by the user
type MulticlusterFederatedGatewayReconciler interface {
	ReconcileFederatedGateway(clusterName string, obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.FederatedGateway) (reconcile.Result, error)
}

// Reconcile deletion events for the FederatedGateway Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterFederatedGatewayDeletionReconciler interface {
	ReconcileFederatedGatewayDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterFederatedGatewayReconcilerFuncs struct {
	OnReconcileFederatedGateway         func(clusterName string, obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.FederatedGateway) (reconcile.Result, error)
	OnReconcileFederatedGatewayDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterFederatedGatewayReconcilerFuncs) ReconcileFederatedGateway(clusterName string, obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.FederatedGateway) (reconcile.Result, error) {
	if f.OnReconcileFederatedGateway == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileFederatedGateway(clusterName, obj)
}

func (f *MulticlusterFederatedGatewayReconcilerFuncs) ReconcileFederatedGatewayDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileFederatedGatewayDeletion == nil {
		return nil
	}
	return f.OnReconcileFederatedGatewayDeletion(clusterName, req)
}

type MulticlusterFederatedGatewayReconcileLoop interface {
	// AddMulticlusterFederatedGatewayReconciler adds a MulticlusterFederatedGatewayReconciler to the MulticlusterFederatedGatewayReconcileLoop.
	AddMulticlusterFederatedGatewayReconciler(ctx context.Context, rec MulticlusterFederatedGatewayReconciler, predicates ...predicate.Predicate)
}

type multiclusterFederatedGatewayReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterFederatedGatewayReconcileLoop) AddMulticlusterFederatedGatewayReconciler(ctx context.Context, rec MulticlusterFederatedGatewayReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericFederatedGatewayMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterFederatedGatewayReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterFederatedGatewayReconcileLoop {
	return &multiclusterFederatedGatewayReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &networking_enterprise_mesh_gloo_solo_io_v1beta1.FederatedGateway{}, options)}
}

type genericFederatedGatewayMulticlusterReconciler struct {
	reconciler MulticlusterFederatedGatewayReconciler
}

func (g genericFederatedGatewayMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterFederatedGatewayDeletionReconciler); ok {
		return deletionReconciler.ReconcileFederatedGatewayDeletion(cluster, req)
	}
	return nil
}

func (g genericFederatedGatewayMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.FederatedGateway)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: FederatedGateway handler received event for %T", object)
	}
	return g.reconciler.ReconcileFederatedGateway(cluster, obj)
}

// Reconcile Upsert events for the RouteTable Resource across clusters.
// implemented by the user
type MulticlusterRouteTableReconciler interface {
	ReconcileRouteTable(clusterName string, obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.RouteTable) (reconcile.Result, error)
}

// Reconcile deletion events for the RouteTable Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterRouteTableDeletionReconciler interface {
	ReconcileRouteTableDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterRouteTableReconcilerFuncs struct {
	OnReconcileRouteTable         func(clusterName string, obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.RouteTable) (reconcile.Result, error)
	OnReconcileRouteTableDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterRouteTableReconcilerFuncs) ReconcileRouteTable(clusterName string, obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.RouteTable) (reconcile.Result, error) {
	if f.OnReconcileRouteTable == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileRouteTable(clusterName, obj)
}

func (f *MulticlusterRouteTableReconcilerFuncs) ReconcileRouteTableDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileRouteTableDeletion == nil {
		return nil
	}
	return f.OnReconcileRouteTableDeletion(clusterName, req)
}

type MulticlusterRouteTableReconcileLoop interface {
	// AddMulticlusterRouteTableReconciler adds a MulticlusterRouteTableReconciler to the MulticlusterRouteTableReconcileLoop.
	AddMulticlusterRouteTableReconciler(ctx context.Context, rec MulticlusterRouteTableReconciler, predicates ...predicate.Predicate)
}

type multiclusterRouteTableReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterRouteTableReconcileLoop) AddMulticlusterRouteTableReconciler(ctx context.Context, rec MulticlusterRouteTableReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericRouteTableMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterRouteTableReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterRouteTableReconcileLoop {
	return &multiclusterRouteTableReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &networking_enterprise_mesh_gloo_solo_io_v1beta1.RouteTable{}, options)}
}

type genericRouteTableMulticlusterReconciler struct {
	reconciler MulticlusterRouteTableReconciler
}

func (g genericRouteTableMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterRouteTableDeletionReconciler); ok {
		return deletionReconciler.ReconcileRouteTableDeletion(cluster, req)
	}
	return nil
}

func (g genericRouteTableMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.RouteTable)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: RouteTable handler received event for %T", object)
	}
	return g.reconciler.ReconcileRouteTable(cluster, obj)
}

// Reconcile Upsert events for the DelegatedRouteTable Resource across clusters.
// implemented by the user
type MulticlusterDelegatedRouteTableReconciler interface {
	ReconcileDelegatedRouteTable(clusterName string, obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.DelegatedRouteTable) (reconcile.Result, error)
}

// Reconcile deletion events for the DelegatedRouteTable Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterDelegatedRouteTableDeletionReconciler interface {
	ReconcileDelegatedRouteTableDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterDelegatedRouteTableReconcilerFuncs struct {
	OnReconcileDelegatedRouteTable         func(clusterName string, obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.DelegatedRouteTable) (reconcile.Result, error)
	OnReconcileDelegatedRouteTableDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterDelegatedRouteTableReconcilerFuncs) ReconcileDelegatedRouteTable(clusterName string, obj *networking_enterprise_mesh_gloo_solo_io_v1beta1.DelegatedRouteTable) (reconcile.Result, error) {
	if f.OnReconcileDelegatedRouteTable == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileDelegatedRouteTable(clusterName, obj)
}

func (f *MulticlusterDelegatedRouteTableReconcilerFuncs) ReconcileDelegatedRouteTableDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileDelegatedRouteTableDeletion == nil {
		return nil
	}
	return f.OnReconcileDelegatedRouteTableDeletion(clusterName, req)
}

type MulticlusterDelegatedRouteTableReconcileLoop interface {
	// AddMulticlusterDelegatedRouteTableReconciler adds a MulticlusterDelegatedRouteTableReconciler to the MulticlusterDelegatedRouteTableReconcileLoop.
	AddMulticlusterDelegatedRouteTableReconciler(ctx context.Context, rec MulticlusterDelegatedRouteTableReconciler, predicates ...predicate.Predicate)
}

type multiclusterDelegatedRouteTableReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterDelegatedRouteTableReconcileLoop) AddMulticlusterDelegatedRouteTableReconciler(ctx context.Context, rec MulticlusterDelegatedRouteTableReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericDelegatedRouteTableMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterDelegatedRouteTableReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterDelegatedRouteTableReconcileLoop {
	return &multiclusterDelegatedRouteTableReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &networking_enterprise_mesh_gloo_solo_io_v1beta1.DelegatedRouteTable{}, options)}
}

type genericDelegatedRouteTableMulticlusterReconciler struct {
	reconciler MulticlusterDelegatedRouteTableReconciler
}

func (g genericDelegatedRouteTableMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterDelegatedRouteTableDeletionReconciler); ok {
		return deletionReconciler.ReconcileDelegatedRouteTableDeletion(cluster, req)
	}
	return nil
}

func (g genericDelegatedRouteTableMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*networking_enterprise_mesh_gloo_solo_io_v1beta1.DelegatedRouteTable)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: DelegatedRouteTable handler received event for %T", object)
	}
	return g.reconciler.ReconcileDelegatedRouteTable(cluster, obj)
}
