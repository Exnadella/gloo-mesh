// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients.go

// Package mock_v1alpha1 is a generated GoMock package.
package mock_v1alpha1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/gloo-mesh/pkg/api/networking.enterprise.mesh.gloo.solo.io/v1alpha1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockMulticlusterClientset is a mock of MulticlusterClientset interface
type MockMulticlusterClientset struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterClientsetMockRecorder
}

// MockMulticlusterClientsetMockRecorder is the mock recorder for MockMulticlusterClientset
type MockMulticlusterClientsetMockRecorder struct {
	mock *MockMulticlusterClientset
}

// NewMockMulticlusterClientset creates a new mock instance
func NewMockMulticlusterClientset(ctrl *gomock.Controller) *MockMulticlusterClientset {
	mock := &MockMulticlusterClientset{ctrl: ctrl}
	mock.recorder = &MockMulticlusterClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterClientset) EXPECT() *MockMulticlusterClientsetMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockMulticlusterClientset) Cluster(cluster string) (v1alpha1.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha1.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster
func (mr *MockMulticlusterClientsetMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterClientset)(nil).Cluster), cluster)
}

// MockClientset is a mock of Clientset interface
type MockClientset struct {
	ctrl     *gomock.Controller
	recorder *MockClientsetMockRecorder
}

// MockClientsetMockRecorder is the mock recorder for MockClientset
type MockClientsetMockRecorder struct {
	mock *MockClientset
}

// NewMockClientset creates a new mock instance
func NewMockClientset(ctrl *gomock.Controller) *MockClientset {
	mock := &MockClientset{ctrl: ctrl}
	mock.recorder = &MockClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientset) EXPECT() *MockClientsetMockRecorder {
	return m.recorder
}

// WasmDeployments mocks base method
func (m *MockClientset) WasmDeployments() v1alpha1.WasmDeploymentClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WasmDeployments")
	ret0, _ := ret[0].(v1alpha1.WasmDeploymentClient)
	return ret0
}

// WasmDeployments indicates an expected call of WasmDeployments
func (mr *MockClientsetMockRecorder) WasmDeployments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WasmDeployments", reflect.TypeOf((*MockClientset)(nil).WasmDeployments))
}

// GlobalServices mocks base method
func (m *MockClientset) GlobalServices() v1alpha1.GlobalServiceClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GlobalServices")
	ret0, _ := ret[0].(v1alpha1.GlobalServiceClient)
	return ret0
}

// GlobalServices indicates an expected call of GlobalServices
func (mr *MockClientsetMockRecorder) GlobalServices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GlobalServices", reflect.TypeOf((*MockClientset)(nil).GlobalServices))
}

// MockWasmDeploymentReader is a mock of WasmDeploymentReader interface
type MockWasmDeploymentReader struct {
	ctrl     *gomock.Controller
	recorder *MockWasmDeploymentReaderMockRecorder
}

// MockWasmDeploymentReaderMockRecorder is the mock recorder for MockWasmDeploymentReader
type MockWasmDeploymentReaderMockRecorder struct {
	mock *MockWasmDeploymentReader
}

// NewMockWasmDeploymentReader creates a new mock instance
func NewMockWasmDeploymentReader(ctrl *gomock.Controller) *MockWasmDeploymentReader {
	mock := &MockWasmDeploymentReader{ctrl: ctrl}
	mock.recorder = &MockWasmDeploymentReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWasmDeploymentReader) EXPECT() *MockWasmDeploymentReaderMockRecorder {
	return m.recorder
}

// GetWasmDeployment mocks base method
func (m *MockWasmDeploymentReader) GetWasmDeployment(ctx context.Context, key client.ObjectKey) (*v1alpha1.WasmDeployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWasmDeployment", ctx, key)
	ret0, _ := ret[0].(*v1alpha1.WasmDeployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWasmDeployment indicates an expected call of GetWasmDeployment
func (mr *MockWasmDeploymentReaderMockRecorder) GetWasmDeployment(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWasmDeployment", reflect.TypeOf((*MockWasmDeploymentReader)(nil).GetWasmDeployment), ctx, key)
}

// ListWasmDeployment mocks base method
func (m *MockWasmDeploymentReader) ListWasmDeployment(ctx context.Context, opts ...client.ListOption) (*v1alpha1.WasmDeploymentList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWasmDeployment", varargs...)
	ret0, _ := ret[0].(*v1alpha1.WasmDeploymentList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWasmDeployment indicates an expected call of ListWasmDeployment
func (mr *MockWasmDeploymentReaderMockRecorder) ListWasmDeployment(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWasmDeployment", reflect.TypeOf((*MockWasmDeploymentReader)(nil).ListWasmDeployment), varargs...)
}

// MockWasmDeploymentWriter is a mock of WasmDeploymentWriter interface
type MockWasmDeploymentWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWasmDeploymentWriterMockRecorder
}

// MockWasmDeploymentWriterMockRecorder is the mock recorder for MockWasmDeploymentWriter
type MockWasmDeploymentWriterMockRecorder struct {
	mock *MockWasmDeploymentWriter
}

// NewMockWasmDeploymentWriter creates a new mock instance
func NewMockWasmDeploymentWriter(ctrl *gomock.Controller) *MockWasmDeploymentWriter {
	mock := &MockWasmDeploymentWriter{ctrl: ctrl}
	mock.recorder = &MockWasmDeploymentWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWasmDeploymentWriter) EXPECT() *MockWasmDeploymentWriterMockRecorder {
	return m.recorder
}

// CreateWasmDeployment mocks base method
func (m *MockWasmDeploymentWriter) CreateWasmDeployment(ctx context.Context, obj *v1alpha1.WasmDeployment, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWasmDeployment", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWasmDeployment indicates an expected call of CreateWasmDeployment
func (mr *MockWasmDeploymentWriterMockRecorder) CreateWasmDeployment(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWasmDeployment", reflect.TypeOf((*MockWasmDeploymentWriter)(nil).CreateWasmDeployment), varargs...)
}

// DeleteWasmDeployment mocks base method
func (m *MockWasmDeploymentWriter) DeleteWasmDeployment(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWasmDeployment", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWasmDeployment indicates an expected call of DeleteWasmDeployment
func (mr *MockWasmDeploymentWriterMockRecorder) DeleteWasmDeployment(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWasmDeployment", reflect.TypeOf((*MockWasmDeploymentWriter)(nil).DeleteWasmDeployment), varargs...)
}

// UpdateWasmDeployment mocks base method
func (m *MockWasmDeploymentWriter) UpdateWasmDeployment(ctx context.Context, obj *v1alpha1.WasmDeployment, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWasmDeployment", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWasmDeployment indicates an expected call of UpdateWasmDeployment
func (mr *MockWasmDeploymentWriterMockRecorder) UpdateWasmDeployment(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWasmDeployment", reflect.TypeOf((*MockWasmDeploymentWriter)(nil).UpdateWasmDeployment), varargs...)
}

// PatchWasmDeployment mocks base method
func (m *MockWasmDeploymentWriter) PatchWasmDeployment(ctx context.Context, obj *v1alpha1.WasmDeployment, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchWasmDeployment", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchWasmDeployment indicates an expected call of PatchWasmDeployment
func (mr *MockWasmDeploymentWriterMockRecorder) PatchWasmDeployment(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchWasmDeployment", reflect.TypeOf((*MockWasmDeploymentWriter)(nil).PatchWasmDeployment), varargs...)
}

// DeleteAllOfWasmDeployment mocks base method
func (m *MockWasmDeploymentWriter) DeleteAllOfWasmDeployment(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfWasmDeployment", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfWasmDeployment indicates an expected call of DeleteAllOfWasmDeployment
func (mr *MockWasmDeploymentWriterMockRecorder) DeleteAllOfWasmDeployment(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfWasmDeployment", reflect.TypeOf((*MockWasmDeploymentWriter)(nil).DeleteAllOfWasmDeployment), varargs...)
}

// UpsertWasmDeployment mocks base method
func (m *MockWasmDeploymentWriter) UpsertWasmDeployment(ctx context.Context, obj *v1alpha1.WasmDeployment, transitionFuncs ...v1alpha1.WasmDeploymentTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertWasmDeployment", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertWasmDeployment indicates an expected call of UpsertWasmDeployment
func (mr *MockWasmDeploymentWriterMockRecorder) UpsertWasmDeployment(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertWasmDeployment", reflect.TypeOf((*MockWasmDeploymentWriter)(nil).UpsertWasmDeployment), varargs...)
}

// MockWasmDeploymentStatusWriter is a mock of WasmDeploymentStatusWriter interface
type MockWasmDeploymentStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWasmDeploymentStatusWriterMockRecorder
}

// MockWasmDeploymentStatusWriterMockRecorder is the mock recorder for MockWasmDeploymentStatusWriter
type MockWasmDeploymentStatusWriterMockRecorder struct {
	mock *MockWasmDeploymentStatusWriter
}

// NewMockWasmDeploymentStatusWriter creates a new mock instance
func NewMockWasmDeploymentStatusWriter(ctrl *gomock.Controller) *MockWasmDeploymentStatusWriter {
	mock := &MockWasmDeploymentStatusWriter{ctrl: ctrl}
	mock.recorder = &MockWasmDeploymentStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWasmDeploymentStatusWriter) EXPECT() *MockWasmDeploymentStatusWriterMockRecorder {
	return m.recorder
}

// UpdateWasmDeploymentStatus mocks base method
func (m *MockWasmDeploymentStatusWriter) UpdateWasmDeploymentStatus(ctx context.Context, obj *v1alpha1.WasmDeployment, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWasmDeploymentStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWasmDeploymentStatus indicates an expected call of UpdateWasmDeploymentStatus
func (mr *MockWasmDeploymentStatusWriterMockRecorder) UpdateWasmDeploymentStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWasmDeploymentStatus", reflect.TypeOf((*MockWasmDeploymentStatusWriter)(nil).UpdateWasmDeploymentStatus), varargs...)
}

// PatchWasmDeploymentStatus mocks base method
func (m *MockWasmDeploymentStatusWriter) PatchWasmDeploymentStatus(ctx context.Context, obj *v1alpha1.WasmDeployment, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchWasmDeploymentStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchWasmDeploymentStatus indicates an expected call of PatchWasmDeploymentStatus
func (mr *MockWasmDeploymentStatusWriterMockRecorder) PatchWasmDeploymentStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchWasmDeploymentStatus", reflect.TypeOf((*MockWasmDeploymentStatusWriter)(nil).PatchWasmDeploymentStatus), varargs...)
}

// MockWasmDeploymentClient is a mock of WasmDeploymentClient interface
type MockWasmDeploymentClient struct {
	ctrl     *gomock.Controller
	recorder *MockWasmDeploymentClientMockRecorder
}

// MockWasmDeploymentClientMockRecorder is the mock recorder for MockWasmDeploymentClient
type MockWasmDeploymentClientMockRecorder struct {
	mock *MockWasmDeploymentClient
}

// NewMockWasmDeploymentClient creates a new mock instance
func NewMockWasmDeploymentClient(ctrl *gomock.Controller) *MockWasmDeploymentClient {
	mock := &MockWasmDeploymentClient{ctrl: ctrl}
	mock.recorder = &MockWasmDeploymentClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWasmDeploymentClient) EXPECT() *MockWasmDeploymentClientMockRecorder {
	return m.recorder
}

// GetWasmDeployment mocks base method
func (m *MockWasmDeploymentClient) GetWasmDeployment(ctx context.Context, key client.ObjectKey) (*v1alpha1.WasmDeployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWasmDeployment", ctx, key)
	ret0, _ := ret[0].(*v1alpha1.WasmDeployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWasmDeployment indicates an expected call of GetWasmDeployment
func (mr *MockWasmDeploymentClientMockRecorder) GetWasmDeployment(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWasmDeployment", reflect.TypeOf((*MockWasmDeploymentClient)(nil).GetWasmDeployment), ctx, key)
}

// ListWasmDeployment mocks base method
func (m *MockWasmDeploymentClient) ListWasmDeployment(ctx context.Context, opts ...client.ListOption) (*v1alpha1.WasmDeploymentList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWasmDeployment", varargs...)
	ret0, _ := ret[0].(*v1alpha1.WasmDeploymentList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWasmDeployment indicates an expected call of ListWasmDeployment
func (mr *MockWasmDeploymentClientMockRecorder) ListWasmDeployment(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWasmDeployment", reflect.TypeOf((*MockWasmDeploymentClient)(nil).ListWasmDeployment), varargs...)
}

// CreateWasmDeployment mocks base method
func (m *MockWasmDeploymentClient) CreateWasmDeployment(ctx context.Context, obj *v1alpha1.WasmDeployment, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWasmDeployment", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWasmDeployment indicates an expected call of CreateWasmDeployment
func (mr *MockWasmDeploymentClientMockRecorder) CreateWasmDeployment(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWasmDeployment", reflect.TypeOf((*MockWasmDeploymentClient)(nil).CreateWasmDeployment), varargs...)
}

// DeleteWasmDeployment mocks base method
func (m *MockWasmDeploymentClient) DeleteWasmDeployment(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWasmDeployment", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWasmDeployment indicates an expected call of DeleteWasmDeployment
func (mr *MockWasmDeploymentClientMockRecorder) DeleteWasmDeployment(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWasmDeployment", reflect.TypeOf((*MockWasmDeploymentClient)(nil).DeleteWasmDeployment), varargs...)
}

// UpdateWasmDeployment mocks base method
func (m *MockWasmDeploymentClient) UpdateWasmDeployment(ctx context.Context, obj *v1alpha1.WasmDeployment, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWasmDeployment", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWasmDeployment indicates an expected call of UpdateWasmDeployment
func (mr *MockWasmDeploymentClientMockRecorder) UpdateWasmDeployment(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWasmDeployment", reflect.TypeOf((*MockWasmDeploymentClient)(nil).UpdateWasmDeployment), varargs...)
}

// PatchWasmDeployment mocks base method
func (m *MockWasmDeploymentClient) PatchWasmDeployment(ctx context.Context, obj *v1alpha1.WasmDeployment, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchWasmDeployment", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchWasmDeployment indicates an expected call of PatchWasmDeployment
func (mr *MockWasmDeploymentClientMockRecorder) PatchWasmDeployment(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchWasmDeployment", reflect.TypeOf((*MockWasmDeploymentClient)(nil).PatchWasmDeployment), varargs...)
}

// DeleteAllOfWasmDeployment mocks base method
func (m *MockWasmDeploymentClient) DeleteAllOfWasmDeployment(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfWasmDeployment", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfWasmDeployment indicates an expected call of DeleteAllOfWasmDeployment
func (mr *MockWasmDeploymentClientMockRecorder) DeleteAllOfWasmDeployment(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfWasmDeployment", reflect.TypeOf((*MockWasmDeploymentClient)(nil).DeleteAllOfWasmDeployment), varargs...)
}

// UpsertWasmDeployment mocks base method
func (m *MockWasmDeploymentClient) UpsertWasmDeployment(ctx context.Context, obj *v1alpha1.WasmDeployment, transitionFuncs ...v1alpha1.WasmDeploymentTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertWasmDeployment", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertWasmDeployment indicates an expected call of UpsertWasmDeployment
func (mr *MockWasmDeploymentClientMockRecorder) UpsertWasmDeployment(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertWasmDeployment", reflect.TypeOf((*MockWasmDeploymentClient)(nil).UpsertWasmDeployment), varargs...)
}

// UpdateWasmDeploymentStatus mocks base method
func (m *MockWasmDeploymentClient) UpdateWasmDeploymentStatus(ctx context.Context, obj *v1alpha1.WasmDeployment, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWasmDeploymentStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWasmDeploymentStatus indicates an expected call of UpdateWasmDeploymentStatus
func (mr *MockWasmDeploymentClientMockRecorder) UpdateWasmDeploymentStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWasmDeploymentStatus", reflect.TypeOf((*MockWasmDeploymentClient)(nil).UpdateWasmDeploymentStatus), varargs...)
}

// PatchWasmDeploymentStatus mocks base method
func (m *MockWasmDeploymentClient) PatchWasmDeploymentStatus(ctx context.Context, obj *v1alpha1.WasmDeployment, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchWasmDeploymentStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchWasmDeploymentStatus indicates an expected call of PatchWasmDeploymentStatus
func (mr *MockWasmDeploymentClientMockRecorder) PatchWasmDeploymentStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchWasmDeploymentStatus", reflect.TypeOf((*MockWasmDeploymentClient)(nil).PatchWasmDeploymentStatus), varargs...)
}

// MockMulticlusterWasmDeploymentClient is a mock of MulticlusterWasmDeploymentClient interface
type MockMulticlusterWasmDeploymentClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterWasmDeploymentClientMockRecorder
}

// MockMulticlusterWasmDeploymentClientMockRecorder is the mock recorder for MockMulticlusterWasmDeploymentClient
type MockMulticlusterWasmDeploymentClientMockRecorder struct {
	mock *MockMulticlusterWasmDeploymentClient
}

// NewMockMulticlusterWasmDeploymentClient creates a new mock instance
func NewMockMulticlusterWasmDeploymentClient(ctrl *gomock.Controller) *MockMulticlusterWasmDeploymentClient {
	mock := &MockMulticlusterWasmDeploymentClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterWasmDeploymentClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterWasmDeploymentClient) EXPECT() *MockMulticlusterWasmDeploymentClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockMulticlusterWasmDeploymentClient) Cluster(cluster string) (v1alpha1.WasmDeploymentClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha1.WasmDeploymentClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster
func (mr *MockMulticlusterWasmDeploymentClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterWasmDeploymentClient)(nil).Cluster), cluster)
}

// MockGlobalServiceReader is a mock of GlobalServiceReader interface
type MockGlobalServiceReader struct {
	ctrl     *gomock.Controller
	recorder *MockGlobalServiceReaderMockRecorder
}

// MockGlobalServiceReaderMockRecorder is the mock recorder for MockGlobalServiceReader
type MockGlobalServiceReaderMockRecorder struct {
	mock *MockGlobalServiceReader
}

// NewMockGlobalServiceReader creates a new mock instance
func NewMockGlobalServiceReader(ctrl *gomock.Controller) *MockGlobalServiceReader {
	mock := &MockGlobalServiceReader{ctrl: ctrl}
	mock.recorder = &MockGlobalServiceReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGlobalServiceReader) EXPECT() *MockGlobalServiceReaderMockRecorder {
	return m.recorder
}

// GetGlobalService mocks base method
func (m *MockGlobalServiceReader) GetGlobalService(ctx context.Context, key client.ObjectKey) (*v1alpha1.GlobalService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobalService", ctx, key)
	ret0, _ := ret[0].(*v1alpha1.GlobalService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlobalService indicates an expected call of GetGlobalService
func (mr *MockGlobalServiceReaderMockRecorder) GetGlobalService(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalService", reflect.TypeOf((*MockGlobalServiceReader)(nil).GetGlobalService), ctx, key)
}

// ListGlobalService mocks base method
func (m *MockGlobalServiceReader) ListGlobalService(ctx context.Context, opts ...client.ListOption) (*v1alpha1.GlobalServiceList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGlobalService", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GlobalServiceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGlobalService indicates an expected call of ListGlobalService
func (mr *MockGlobalServiceReaderMockRecorder) ListGlobalService(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGlobalService", reflect.TypeOf((*MockGlobalServiceReader)(nil).ListGlobalService), varargs...)
}

// MockGlobalServiceWriter is a mock of GlobalServiceWriter interface
type MockGlobalServiceWriter struct {
	ctrl     *gomock.Controller
	recorder *MockGlobalServiceWriterMockRecorder
}

// MockGlobalServiceWriterMockRecorder is the mock recorder for MockGlobalServiceWriter
type MockGlobalServiceWriterMockRecorder struct {
	mock *MockGlobalServiceWriter
}

// NewMockGlobalServiceWriter creates a new mock instance
func NewMockGlobalServiceWriter(ctrl *gomock.Controller) *MockGlobalServiceWriter {
	mock := &MockGlobalServiceWriter{ctrl: ctrl}
	mock.recorder = &MockGlobalServiceWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGlobalServiceWriter) EXPECT() *MockGlobalServiceWriterMockRecorder {
	return m.recorder
}

// CreateGlobalService mocks base method
func (m *MockGlobalServiceWriter) CreateGlobalService(ctx context.Context, obj *v1alpha1.GlobalService, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGlobalService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGlobalService indicates an expected call of CreateGlobalService
func (mr *MockGlobalServiceWriterMockRecorder) CreateGlobalService(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGlobalService", reflect.TypeOf((*MockGlobalServiceWriter)(nil).CreateGlobalService), varargs...)
}

// DeleteGlobalService mocks base method
func (m *MockGlobalServiceWriter) DeleteGlobalService(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGlobalService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGlobalService indicates an expected call of DeleteGlobalService
func (mr *MockGlobalServiceWriterMockRecorder) DeleteGlobalService(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGlobalService", reflect.TypeOf((*MockGlobalServiceWriter)(nil).DeleteGlobalService), varargs...)
}

// UpdateGlobalService mocks base method
func (m *MockGlobalServiceWriter) UpdateGlobalService(ctx context.Context, obj *v1alpha1.GlobalService, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGlobalService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGlobalService indicates an expected call of UpdateGlobalService
func (mr *MockGlobalServiceWriterMockRecorder) UpdateGlobalService(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalService", reflect.TypeOf((*MockGlobalServiceWriter)(nil).UpdateGlobalService), varargs...)
}

// PatchGlobalService mocks base method
func (m *MockGlobalServiceWriter) PatchGlobalService(ctx context.Context, obj *v1alpha1.GlobalService, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGlobalService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGlobalService indicates an expected call of PatchGlobalService
func (mr *MockGlobalServiceWriterMockRecorder) PatchGlobalService(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGlobalService", reflect.TypeOf((*MockGlobalServiceWriter)(nil).PatchGlobalService), varargs...)
}

// DeleteAllOfGlobalService mocks base method
func (m *MockGlobalServiceWriter) DeleteAllOfGlobalService(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfGlobalService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfGlobalService indicates an expected call of DeleteAllOfGlobalService
func (mr *MockGlobalServiceWriterMockRecorder) DeleteAllOfGlobalService(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfGlobalService", reflect.TypeOf((*MockGlobalServiceWriter)(nil).DeleteAllOfGlobalService), varargs...)
}

// UpsertGlobalService mocks base method
func (m *MockGlobalServiceWriter) UpsertGlobalService(ctx context.Context, obj *v1alpha1.GlobalService, transitionFuncs ...v1alpha1.GlobalServiceTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertGlobalService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertGlobalService indicates an expected call of UpsertGlobalService
func (mr *MockGlobalServiceWriterMockRecorder) UpsertGlobalService(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertGlobalService", reflect.TypeOf((*MockGlobalServiceWriter)(nil).UpsertGlobalService), varargs...)
}

// MockGlobalServiceStatusWriter is a mock of GlobalServiceStatusWriter interface
type MockGlobalServiceStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockGlobalServiceStatusWriterMockRecorder
}

// MockGlobalServiceStatusWriterMockRecorder is the mock recorder for MockGlobalServiceStatusWriter
type MockGlobalServiceStatusWriterMockRecorder struct {
	mock *MockGlobalServiceStatusWriter
}

// NewMockGlobalServiceStatusWriter creates a new mock instance
func NewMockGlobalServiceStatusWriter(ctrl *gomock.Controller) *MockGlobalServiceStatusWriter {
	mock := &MockGlobalServiceStatusWriter{ctrl: ctrl}
	mock.recorder = &MockGlobalServiceStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGlobalServiceStatusWriter) EXPECT() *MockGlobalServiceStatusWriterMockRecorder {
	return m.recorder
}

// UpdateGlobalServiceStatus mocks base method
func (m *MockGlobalServiceStatusWriter) UpdateGlobalServiceStatus(ctx context.Context, obj *v1alpha1.GlobalService, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGlobalServiceStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGlobalServiceStatus indicates an expected call of UpdateGlobalServiceStatus
func (mr *MockGlobalServiceStatusWriterMockRecorder) UpdateGlobalServiceStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalServiceStatus", reflect.TypeOf((*MockGlobalServiceStatusWriter)(nil).UpdateGlobalServiceStatus), varargs...)
}

// PatchGlobalServiceStatus mocks base method
func (m *MockGlobalServiceStatusWriter) PatchGlobalServiceStatus(ctx context.Context, obj *v1alpha1.GlobalService, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGlobalServiceStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGlobalServiceStatus indicates an expected call of PatchGlobalServiceStatus
func (mr *MockGlobalServiceStatusWriterMockRecorder) PatchGlobalServiceStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGlobalServiceStatus", reflect.TypeOf((*MockGlobalServiceStatusWriter)(nil).PatchGlobalServiceStatus), varargs...)
}

// MockGlobalServiceClient is a mock of GlobalServiceClient interface
type MockGlobalServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockGlobalServiceClientMockRecorder
}

// MockGlobalServiceClientMockRecorder is the mock recorder for MockGlobalServiceClient
type MockGlobalServiceClientMockRecorder struct {
	mock *MockGlobalServiceClient
}

// NewMockGlobalServiceClient creates a new mock instance
func NewMockGlobalServiceClient(ctrl *gomock.Controller) *MockGlobalServiceClient {
	mock := &MockGlobalServiceClient{ctrl: ctrl}
	mock.recorder = &MockGlobalServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGlobalServiceClient) EXPECT() *MockGlobalServiceClientMockRecorder {
	return m.recorder
}

// GetGlobalService mocks base method
func (m *MockGlobalServiceClient) GetGlobalService(ctx context.Context, key client.ObjectKey) (*v1alpha1.GlobalService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobalService", ctx, key)
	ret0, _ := ret[0].(*v1alpha1.GlobalService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlobalService indicates an expected call of GetGlobalService
func (mr *MockGlobalServiceClientMockRecorder) GetGlobalService(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalService", reflect.TypeOf((*MockGlobalServiceClient)(nil).GetGlobalService), ctx, key)
}

// ListGlobalService mocks base method
func (m *MockGlobalServiceClient) ListGlobalService(ctx context.Context, opts ...client.ListOption) (*v1alpha1.GlobalServiceList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGlobalService", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GlobalServiceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGlobalService indicates an expected call of ListGlobalService
func (mr *MockGlobalServiceClientMockRecorder) ListGlobalService(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGlobalService", reflect.TypeOf((*MockGlobalServiceClient)(nil).ListGlobalService), varargs...)
}

// CreateGlobalService mocks base method
func (m *MockGlobalServiceClient) CreateGlobalService(ctx context.Context, obj *v1alpha1.GlobalService, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGlobalService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGlobalService indicates an expected call of CreateGlobalService
func (mr *MockGlobalServiceClientMockRecorder) CreateGlobalService(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGlobalService", reflect.TypeOf((*MockGlobalServiceClient)(nil).CreateGlobalService), varargs...)
}

// DeleteGlobalService mocks base method
func (m *MockGlobalServiceClient) DeleteGlobalService(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGlobalService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGlobalService indicates an expected call of DeleteGlobalService
func (mr *MockGlobalServiceClientMockRecorder) DeleteGlobalService(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGlobalService", reflect.TypeOf((*MockGlobalServiceClient)(nil).DeleteGlobalService), varargs...)
}

// UpdateGlobalService mocks base method
func (m *MockGlobalServiceClient) UpdateGlobalService(ctx context.Context, obj *v1alpha1.GlobalService, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGlobalService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGlobalService indicates an expected call of UpdateGlobalService
func (mr *MockGlobalServiceClientMockRecorder) UpdateGlobalService(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalService", reflect.TypeOf((*MockGlobalServiceClient)(nil).UpdateGlobalService), varargs...)
}

// PatchGlobalService mocks base method
func (m *MockGlobalServiceClient) PatchGlobalService(ctx context.Context, obj *v1alpha1.GlobalService, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGlobalService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGlobalService indicates an expected call of PatchGlobalService
func (mr *MockGlobalServiceClientMockRecorder) PatchGlobalService(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGlobalService", reflect.TypeOf((*MockGlobalServiceClient)(nil).PatchGlobalService), varargs...)
}

// DeleteAllOfGlobalService mocks base method
func (m *MockGlobalServiceClient) DeleteAllOfGlobalService(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfGlobalService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfGlobalService indicates an expected call of DeleteAllOfGlobalService
func (mr *MockGlobalServiceClientMockRecorder) DeleteAllOfGlobalService(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfGlobalService", reflect.TypeOf((*MockGlobalServiceClient)(nil).DeleteAllOfGlobalService), varargs...)
}

// UpsertGlobalService mocks base method
func (m *MockGlobalServiceClient) UpsertGlobalService(ctx context.Context, obj *v1alpha1.GlobalService, transitionFuncs ...v1alpha1.GlobalServiceTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertGlobalService", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertGlobalService indicates an expected call of UpsertGlobalService
func (mr *MockGlobalServiceClientMockRecorder) UpsertGlobalService(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertGlobalService", reflect.TypeOf((*MockGlobalServiceClient)(nil).UpsertGlobalService), varargs...)
}

// UpdateGlobalServiceStatus mocks base method
func (m *MockGlobalServiceClient) UpdateGlobalServiceStatus(ctx context.Context, obj *v1alpha1.GlobalService, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGlobalServiceStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGlobalServiceStatus indicates an expected call of UpdateGlobalServiceStatus
func (mr *MockGlobalServiceClientMockRecorder) UpdateGlobalServiceStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalServiceStatus", reflect.TypeOf((*MockGlobalServiceClient)(nil).UpdateGlobalServiceStatus), varargs...)
}

// PatchGlobalServiceStatus mocks base method
func (m *MockGlobalServiceClient) PatchGlobalServiceStatus(ctx context.Context, obj *v1alpha1.GlobalService, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGlobalServiceStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGlobalServiceStatus indicates an expected call of PatchGlobalServiceStatus
func (mr *MockGlobalServiceClientMockRecorder) PatchGlobalServiceStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGlobalServiceStatus", reflect.TypeOf((*MockGlobalServiceClient)(nil).PatchGlobalServiceStatus), varargs...)
}

// MockMulticlusterGlobalServiceClient is a mock of MulticlusterGlobalServiceClient interface
type MockMulticlusterGlobalServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGlobalServiceClientMockRecorder
}

// MockMulticlusterGlobalServiceClientMockRecorder is the mock recorder for MockMulticlusterGlobalServiceClient
type MockMulticlusterGlobalServiceClientMockRecorder struct {
	mock *MockMulticlusterGlobalServiceClient
}

// NewMockMulticlusterGlobalServiceClient creates a new mock instance
func NewMockMulticlusterGlobalServiceClient(ctrl *gomock.Controller) *MockMulticlusterGlobalServiceClient {
	mock := &MockMulticlusterGlobalServiceClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGlobalServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterGlobalServiceClient) EXPECT() *MockMulticlusterGlobalServiceClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockMulticlusterGlobalServiceClient) Cluster(cluster string) (v1alpha1.GlobalServiceClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha1.GlobalServiceClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster
func (mr *MockMulticlusterGlobalServiceClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterGlobalServiceClient)(nil).Cluster), cluster)
}
