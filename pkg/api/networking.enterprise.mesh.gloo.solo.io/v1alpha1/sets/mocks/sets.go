// Code generated by MockGen. DO NOT EDIT.
// Source: ./sets.go

// Package mock_v1alpha1sets is a generated GoMock package.
package mock_v1alpha1sets

import (
	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/gloo-mesh/pkg/api/networking.enterprise.mesh.gloo.solo.io/v1alpha1"
	v1alpha1sets "github.com/solo-io/gloo-mesh/pkg/api/networking.enterprise.mesh.gloo.solo.io/v1alpha1/sets"
	sets "github.com/solo-io/skv2/contrib/pkg/sets"
	ezkube "github.com/solo-io/skv2/pkg/ezkube"
	sets0 "k8s.io/apimachinery/pkg/util/sets"
	reflect "reflect"
)

// MockWasmDeploymentSet is a mock of WasmDeploymentSet interface
type MockWasmDeploymentSet struct {
	ctrl     *gomock.Controller
	recorder *MockWasmDeploymentSetMockRecorder
}

// MockWasmDeploymentSetMockRecorder is the mock recorder for MockWasmDeploymentSet
type MockWasmDeploymentSetMockRecorder struct {
	mock *MockWasmDeploymentSet
}

// NewMockWasmDeploymentSet creates a new mock instance
func NewMockWasmDeploymentSet(ctrl *gomock.Controller) *MockWasmDeploymentSet {
	mock := &MockWasmDeploymentSet{ctrl: ctrl}
	mock.recorder = &MockWasmDeploymentSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWasmDeploymentSet) EXPECT() *MockWasmDeploymentSetMockRecorder {
	return m.recorder
}

// Keys mocks base method
func (m *MockWasmDeploymentSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys
func (mr *MockWasmDeploymentSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockWasmDeploymentSet)(nil).Keys))
}

// List mocks base method
func (m *MockWasmDeploymentSet) List(filterResource ...func(*v1alpha1.WasmDeployment) bool) []*v1alpha1.WasmDeployment {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v1alpha1.WasmDeployment)
	return ret0
}

// List indicates an expected call of List
func (mr *MockWasmDeploymentSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockWasmDeploymentSet)(nil).List), filterResource...)
}

// Map mocks base method
func (m *MockWasmDeploymentSet) Map() map[string]*v1alpha1.WasmDeployment {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v1alpha1.WasmDeployment)
	return ret0
}

// Map indicates an expected call of Map
func (mr *MockWasmDeploymentSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockWasmDeploymentSet)(nil).Map))
}

// Insert mocks base method
func (m *MockWasmDeploymentSet) Insert(wasmDeployment ...*v1alpha1.WasmDeployment) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range wasmDeployment {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert
func (mr *MockWasmDeploymentSetMockRecorder) Insert(wasmDeployment ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockWasmDeploymentSet)(nil).Insert), wasmDeployment...)
}

// Equal mocks base method
func (m *MockWasmDeploymentSet) Equal(wasmDeploymentSet v1alpha1sets.WasmDeploymentSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", wasmDeploymentSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal
func (mr *MockWasmDeploymentSetMockRecorder) Equal(wasmDeploymentSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockWasmDeploymentSet)(nil).Equal), wasmDeploymentSet)
}

// Has mocks base method
func (m *MockWasmDeploymentSet) Has(wasmDeployment ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", wasmDeployment)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has
func (mr *MockWasmDeploymentSetMockRecorder) Has(wasmDeployment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockWasmDeploymentSet)(nil).Has), wasmDeployment)
}

// Delete mocks base method
func (m *MockWasmDeploymentSet) Delete(wasmDeployment ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", wasmDeployment)
}

// Delete indicates an expected call of Delete
func (mr *MockWasmDeploymentSetMockRecorder) Delete(wasmDeployment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWasmDeploymentSet)(nil).Delete), wasmDeployment)
}

// Union mocks base method
func (m *MockWasmDeploymentSet) Union(set v1alpha1sets.WasmDeploymentSet) v1alpha1sets.WasmDeploymentSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v1alpha1sets.WasmDeploymentSet)
	return ret0
}

// Union indicates an expected call of Union
func (mr *MockWasmDeploymentSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockWasmDeploymentSet)(nil).Union), set)
}

// Difference mocks base method
func (m *MockWasmDeploymentSet) Difference(set v1alpha1sets.WasmDeploymentSet) v1alpha1sets.WasmDeploymentSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v1alpha1sets.WasmDeploymentSet)
	return ret0
}

// Difference indicates an expected call of Difference
func (mr *MockWasmDeploymentSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockWasmDeploymentSet)(nil).Difference), set)
}

// Intersection mocks base method
func (m *MockWasmDeploymentSet) Intersection(set v1alpha1sets.WasmDeploymentSet) v1alpha1sets.WasmDeploymentSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v1alpha1sets.WasmDeploymentSet)
	return ret0
}

// Intersection indicates an expected call of Intersection
func (mr *MockWasmDeploymentSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockWasmDeploymentSet)(nil).Intersection), set)
}

// Find mocks base method
func (m *MockWasmDeploymentSet) Find(id ezkube.ResourceId) (*v1alpha1.WasmDeployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v1alpha1.WasmDeployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockWasmDeploymentSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockWasmDeploymentSet)(nil).Find), id)
}

// Length mocks base method
func (m *MockWasmDeploymentSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length
func (mr *MockWasmDeploymentSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockWasmDeploymentSet)(nil).Length))
}

// Generic mocks base method
func (m *MockWasmDeploymentSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockWasmDeploymentSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockWasmDeploymentSet)(nil).Generic))
}

// Delta mocks base method
func (m *MockWasmDeploymentSet) Delta(newSet v1alpha1sets.WasmDeploymentSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta
func (mr *MockWasmDeploymentSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockWasmDeploymentSet)(nil).Delta), newSet)
}

// MockGlobalServiceSet is a mock of GlobalServiceSet interface
type MockGlobalServiceSet struct {
	ctrl     *gomock.Controller
	recorder *MockGlobalServiceSetMockRecorder
}

// MockGlobalServiceSetMockRecorder is the mock recorder for MockGlobalServiceSet
type MockGlobalServiceSetMockRecorder struct {
	mock *MockGlobalServiceSet
}

// NewMockGlobalServiceSet creates a new mock instance
func NewMockGlobalServiceSet(ctrl *gomock.Controller) *MockGlobalServiceSet {
	mock := &MockGlobalServiceSet{ctrl: ctrl}
	mock.recorder = &MockGlobalServiceSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGlobalServiceSet) EXPECT() *MockGlobalServiceSetMockRecorder {
	return m.recorder
}

// Keys mocks base method
func (m *MockGlobalServiceSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys
func (mr *MockGlobalServiceSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockGlobalServiceSet)(nil).Keys))
}

// List mocks base method
func (m *MockGlobalServiceSet) List(filterResource ...func(*v1alpha1.GlobalService) bool) []*v1alpha1.GlobalService {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v1alpha1.GlobalService)
	return ret0
}

// List indicates an expected call of List
func (mr *MockGlobalServiceSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockGlobalServiceSet)(nil).List), filterResource...)
}

// Map mocks base method
func (m *MockGlobalServiceSet) Map() map[string]*v1alpha1.GlobalService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v1alpha1.GlobalService)
	return ret0
}

// Map indicates an expected call of Map
func (mr *MockGlobalServiceSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockGlobalServiceSet)(nil).Map))
}

// Insert mocks base method
func (m *MockGlobalServiceSet) Insert(globalService ...*v1alpha1.GlobalService) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range globalService {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert
func (mr *MockGlobalServiceSetMockRecorder) Insert(globalService ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockGlobalServiceSet)(nil).Insert), globalService...)
}

// Equal mocks base method
func (m *MockGlobalServiceSet) Equal(globalServiceSet v1alpha1sets.GlobalServiceSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", globalServiceSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal
func (mr *MockGlobalServiceSetMockRecorder) Equal(globalServiceSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockGlobalServiceSet)(nil).Equal), globalServiceSet)
}

// Has mocks base method
func (m *MockGlobalServiceSet) Has(globalService ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", globalService)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has
func (mr *MockGlobalServiceSetMockRecorder) Has(globalService interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockGlobalServiceSet)(nil).Has), globalService)
}

// Delete mocks base method
func (m *MockGlobalServiceSet) Delete(globalService ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", globalService)
}

// Delete indicates an expected call of Delete
func (mr *MockGlobalServiceSetMockRecorder) Delete(globalService interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGlobalServiceSet)(nil).Delete), globalService)
}

// Union mocks base method
func (m *MockGlobalServiceSet) Union(set v1alpha1sets.GlobalServiceSet) v1alpha1sets.GlobalServiceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v1alpha1sets.GlobalServiceSet)
	return ret0
}

// Union indicates an expected call of Union
func (mr *MockGlobalServiceSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockGlobalServiceSet)(nil).Union), set)
}

// Difference mocks base method
func (m *MockGlobalServiceSet) Difference(set v1alpha1sets.GlobalServiceSet) v1alpha1sets.GlobalServiceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v1alpha1sets.GlobalServiceSet)
	return ret0
}

// Difference indicates an expected call of Difference
func (mr *MockGlobalServiceSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockGlobalServiceSet)(nil).Difference), set)
}

// Intersection mocks base method
func (m *MockGlobalServiceSet) Intersection(set v1alpha1sets.GlobalServiceSet) v1alpha1sets.GlobalServiceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v1alpha1sets.GlobalServiceSet)
	return ret0
}

// Intersection indicates an expected call of Intersection
func (mr *MockGlobalServiceSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockGlobalServiceSet)(nil).Intersection), set)
}

// Find mocks base method
func (m *MockGlobalServiceSet) Find(id ezkube.ResourceId) (*v1alpha1.GlobalService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v1alpha1.GlobalService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockGlobalServiceSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockGlobalServiceSet)(nil).Find), id)
}

// Length mocks base method
func (m *MockGlobalServiceSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length
func (mr *MockGlobalServiceSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockGlobalServiceSet)(nil).Length))
}

// Generic mocks base method
func (m *MockGlobalServiceSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic
func (mr *MockGlobalServiceSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockGlobalServiceSet)(nil).Generic))
}

// Delta mocks base method
func (m *MockGlobalServiceSet) Delta(newSet v1alpha1sets.GlobalServiceSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta
func (mr *MockGlobalServiceSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockGlobalServiceSet)(nil).Delta), newSet)
}
