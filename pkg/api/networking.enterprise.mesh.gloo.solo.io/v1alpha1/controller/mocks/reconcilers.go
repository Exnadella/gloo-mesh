// Code generated by MockGen. DO NOT EDIT.
// Source: ./reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/gloo-mesh/pkg/api/networking.enterprise.mesh.gloo.solo.io/v1alpha1"
	controller "github.com/solo-io/gloo-mesh/pkg/api/networking.enterprise.mesh.gloo.solo.io/v1alpha1/controller"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	reflect "reflect"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockWasmDeploymentReconciler is a mock of WasmDeploymentReconciler interface
type MockWasmDeploymentReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockWasmDeploymentReconcilerMockRecorder
}

// MockWasmDeploymentReconcilerMockRecorder is the mock recorder for MockWasmDeploymentReconciler
type MockWasmDeploymentReconcilerMockRecorder struct {
	mock *MockWasmDeploymentReconciler
}

// NewMockWasmDeploymentReconciler creates a new mock instance
func NewMockWasmDeploymentReconciler(ctrl *gomock.Controller) *MockWasmDeploymentReconciler {
	mock := &MockWasmDeploymentReconciler{ctrl: ctrl}
	mock.recorder = &MockWasmDeploymentReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWasmDeploymentReconciler) EXPECT() *MockWasmDeploymentReconcilerMockRecorder {
	return m.recorder
}

// ReconcileWasmDeployment mocks base method
func (m *MockWasmDeploymentReconciler) ReconcileWasmDeployment(obj *v1alpha1.WasmDeployment) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileWasmDeployment", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileWasmDeployment indicates an expected call of ReconcileWasmDeployment
func (mr *MockWasmDeploymentReconcilerMockRecorder) ReconcileWasmDeployment(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileWasmDeployment", reflect.TypeOf((*MockWasmDeploymentReconciler)(nil).ReconcileWasmDeployment), obj)
}

// MockWasmDeploymentDeletionReconciler is a mock of WasmDeploymentDeletionReconciler interface
type MockWasmDeploymentDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockWasmDeploymentDeletionReconcilerMockRecorder
}

// MockWasmDeploymentDeletionReconcilerMockRecorder is the mock recorder for MockWasmDeploymentDeletionReconciler
type MockWasmDeploymentDeletionReconcilerMockRecorder struct {
	mock *MockWasmDeploymentDeletionReconciler
}

// NewMockWasmDeploymentDeletionReconciler creates a new mock instance
func NewMockWasmDeploymentDeletionReconciler(ctrl *gomock.Controller) *MockWasmDeploymentDeletionReconciler {
	mock := &MockWasmDeploymentDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockWasmDeploymentDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWasmDeploymentDeletionReconciler) EXPECT() *MockWasmDeploymentDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileWasmDeploymentDeletion mocks base method
func (m *MockWasmDeploymentDeletionReconciler) ReconcileWasmDeploymentDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileWasmDeploymentDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileWasmDeploymentDeletion indicates an expected call of ReconcileWasmDeploymentDeletion
func (mr *MockWasmDeploymentDeletionReconcilerMockRecorder) ReconcileWasmDeploymentDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileWasmDeploymentDeletion", reflect.TypeOf((*MockWasmDeploymentDeletionReconciler)(nil).ReconcileWasmDeploymentDeletion), req)
}

// MockWasmDeploymentFinalizer is a mock of WasmDeploymentFinalizer interface
type MockWasmDeploymentFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockWasmDeploymentFinalizerMockRecorder
}

// MockWasmDeploymentFinalizerMockRecorder is the mock recorder for MockWasmDeploymentFinalizer
type MockWasmDeploymentFinalizerMockRecorder struct {
	mock *MockWasmDeploymentFinalizer
}

// NewMockWasmDeploymentFinalizer creates a new mock instance
func NewMockWasmDeploymentFinalizer(ctrl *gomock.Controller) *MockWasmDeploymentFinalizer {
	mock := &MockWasmDeploymentFinalizer{ctrl: ctrl}
	mock.recorder = &MockWasmDeploymentFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWasmDeploymentFinalizer) EXPECT() *MockWasmDeploymentFinalizerMockRecorder {
	return m.recorder
}

// ReconcileWasmDeployment mocks base method
func (m *MockWasmDeploymentFinalizer) ReconcileWasmDeployment(obj *v1alpha1.WasmDeployment) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileWasmDeployment", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileWasmDeployment indicates an expected call of ReconcileWasmDeployment
func (mr *MockWasmDeploymentFinalizerMockRecorder) ReconcileWasmDeployment(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileWasmDeployment", reflect.TypeOf((*MockWasmDeploymentFinalizer)(nil).ReconcileWasmDeployment), obj)
}

// WasmDeploymentFinalizerName mocks base method
func (m *MockWasmDeploymentFinalizer) WasmDeploymentFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WasmDeploymentFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// WasmDeploymentFinalizerName indicates an expected call of WasmDeploymentFinalizerName
func (mr *MockWasmDeploymentFinalizerMockRecorder) WasmDeploymentFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WasmDeploymentFinalizerName", reflect.TypeOf((*MockWasmDeploymentFinalizer)(nil).WasmDeploymentFinalizerName))
}

// FinalizeWasmDeployment mocks base method
func (m *MockWasmDeploymentFinalizer) FinalizeWasmDeployment(obj *v1alpha1.WasmDeployment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeWasmDeployment", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeWasmDeployment indicates an expected call of FinalizeWasmDeployment
func (mr *MockWasmDeploymentFinalizerMockRecorder) FinalizeWasmDeployment(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeWasmDeployment", reflect.TypeOf((*MockWasmDeploymentFinalizer)(nil).FinalizeWasmDeployment), obj)
}

// MockWasmDeploymentReconcileLoop is a mock of WasmDeploymentReconcileLoop interface
type MockWasmDeploymentReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockWasmDeploymentReconcileLoopMockRecorder
}

// MockWasmDeploymentReconcileLoopMockRecorder is the mock recorder for MockWasmDeploymentReconcileLoop
type MockWasmDeploymentReconcileLoopMockRecorder struct {
	mock *MockWasmDeploymentReconcileLoop
}

// NewMockWasmDeploymentReconcileLoop creates a new mock instance
func NewMockWasmDeploymentReconcileLoop(ctrl *gomock.Controller) *MockWasmDeploymentReconcileLoop {
	mock := &MockWasmDeploymentReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockWasmDeploymentReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWasmDeploymentReconcileLoop) EXPECT() *MockWasmDeploymentReconcileLoopMockRecorder {
	return m.recorder
}

// RunWasmDeploymentReconciler mocks base method
func (m *MockWasmDeploymentReconcileLoop) RunWasmDeploymentReconciler(ctx context.Context, rec controller.WasmDeploymentReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunWasmDeploymentReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunWasmDeploymentReconciler indicates an expected call of RunWasmDeploymentReconciler
func (mr *MockWasmDeploymentReconcileLoopMockRecorder) RunWasmDeploymentReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWasmDeploymentReconciler", reflect.TypeOf((*MockWasmDeploymentReconcileLoop)(nil).RunWasmDeploymentReconciler), varargs...)
}

// MockGlobalServiceReconciler is a mock of GlobalServiceReconciler interface
type MockGlobalServiceReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockGlobalServiceReconcilerMockRecorder
}

// MockGlobalServiceReconcilerMockRecorder is the mock recorder for MockGlobalServiceReconciler
type MockGlobalServiceReconcilerMockRecorder struct {
	mock *MockGlobalServiceReconciler
}

// NewMockGlobalServiceReconciler creates a new mock instance
func NewMockGlobalServiceReconciler(ctrl *gomock.Controller) *MockGlobalServiceReconciler {
	mock := &MockGlobalServiceReconciler{ctrl: ctrl}
	mock.recorder = &MockGlobalServiceReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGlobalServiceReconciler) EXPECT() *MockGlobalServiceReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGlobalService mocks base method
func (m *MockGlobalServiceReconciler) ReconcileGlobalService(obj *v1alpha1.GlobalService) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGlobalService", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileGlobalService indicates an expected call of ReconcileGlobalService
func (mr *MockGlobalServiceReconcilerMockRecorder) ReconcileGlobalService(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGlobalService", reflect.TypeOf((*MockGlobalServiceReconciler)(nil).ReconcileGlobalService), obj)
}

// MockGlobalServiceDeletionReconciler is a mock of GlobalServiceDeletionReconciler interface
type MockGlobalServiceDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockGlobalServiceDeletionReconcilerMockRecorder
}

// MockGlobalServiceDeletionReconcilerMockRecorder is the mock recorder for MockGlobalServiceDeletionReconciler
type MockGlobalServiceDeletionReconcilerMockRecorder struct {
	mock *MockGlobalServiceDeletionReconciler
}

// NewMockGlobalServiceDeletionReconciler creates a new mock instance
func NewMockGlobalServiceDeletionReconciler(ctrl *gomock.Controller) *MockGlobalServiceDeletionReconciler {
	mock := &MockGlobalServiceDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockGlobalServiceDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGlobalServiceDeletionReconciler) EXPECT() *MockGlobalServiceDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGlobalServiceDeletion mocks base method
func (m *MockGlobalServiceDeletionReconciler) ReconcileGlobalServiceDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGlobalServiceDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileGlobalServiceDeletion indicates an expected call of ReconcileGlobalServiceDeletion
func (mr *MockGlobalServiceDeletionReconcilerMockRecorder) ReconcileGlobalServiceDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGlobalServiceDeletion", reflect.TypeOf((*MockGlobalServiceDeletionReconciler)(nil).ReconcileGlobalServiceDeletion), req)
}

// MockGlobalServiceFinalizer is a mock of GlobalServiceFinalizer interface
type MockGlobalServiceFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockGlobalServiceFinalizerMockRecorder
}

// MockGlobalServiceFinalizerMockRecorder is the mock recorder for MockGlobalServiceFinalizer
type MockGlobalServiceFinalizerMockRecorder struct {
	mock *MockGlobalServiceFinalizer
}

// NewMockGlobalServiceFinalizer creates a new mock instance
func NewMockGlobalServiceFinalizer(ctrl *gomock.Controller) *MockGlobalServiceFinalizer {
	mock := &MockGlobalServiceFinalizer{ctrl: ctrl}
	mock.recorder = &MockGlobalServiceFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGlobalServiceFinalizer) EXPECT() *MockGlobalServiceFinalizerMockRecorder {
	return m.recorder
}

// ReconcileGlobalService mocks base method
func (m *MockGlobalServiceFinalizer) ReconcileGlobalService(obj *v1alpha1.GlobalService) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGlobalService", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileGlobalService indicates an expected call of ReconcileGlobalService
func (mr *MockGlobalServiceFinalizerMockRecorder) ReconcileGlobalService(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGlobalService", reflect.TypeOf((*MockGlobalServiceFinalizer)(nil).ReconcileGlobalService), obj)
}

// GlobalServiceFinalizerName mocks base method
func (m *MockGlobalServiceFinalizer) GlobalServiceFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GlobalServiceFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GlobalServiceFinalizerName indicates an expected call of GlobalServiceFinalizerName
func (mr *MockGlobalServiceFinalizerMockRecorder) GlobalServiceFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GlobalServiceFinalizerName", reflect.TypeOf((*MockGlobalServiceFinalizer)(nil).GlobalServiceFinalizerName))
}

// FinalizeGlobalService mocks base method
func (m *MockGlobalServiceFinalizer) FinalizeGlobalService(obj *v1alpha1.GlobalService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeGlobalService", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeGlobalService indicates an expected call of FinalizeGlobalService
func (mr *MockGlobalServiceFinalizerMockRecorder) FinalizeGlobalService(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeGlobalService", reflect.TypeOf((*MockGlobalServiceFinalizer)(nil).FinalizeGlobalService), obj)
}

// MockGlobalServiceReconcileLoop is a mock of GlobalServiceReconcileLoop interface
type MockGlobalServiceReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockGlobalServiceReconcileLoopMockRecorder
}

// MockGlobalServiceReconcileLoopMockRecorder is the mock recorder for MockGlobalServiceReconcileLoop
type MockGlobalServiceReconcileLoopMockRecorder struct {
	mock *MockGlobalServiceReconcileLoop
}

// NewMockGlobalServiceReconcileLoop creates a new mock instance
func NewMockGlobalServiceReconcileLoop(ctrl *gomock.Controller) *MockGlobalServiceReconcileLoop {
	mock := &MockGlobalServiceReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockGlobalServiceReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGlobalServiceReconcileLoop) EXPECT() *MockGlobalServiceReconcileLoopMockRecorder {
	return m.recorder
}

// RunGlobalServiceReconciler mocks base method
func (m *MockGlobalServiceReconcileLoop) RunGlobalServiceReconciler(ctx context.Context, rec controller.GlobalServiceReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunGlobalServiceReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunGlobalServiceReconciler indicates an expected call of RunGlobalServiceReconciler
func (mr *MockGlobalServiceReconcileLoopMockRecorder) RunGlobalServiceReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunGlobalServiceReconciler", reflect.TypeOf((*MockGlobalServiceReconcileLoop)(nil).RunGlobalServiceReconciler), varargs...)
}
