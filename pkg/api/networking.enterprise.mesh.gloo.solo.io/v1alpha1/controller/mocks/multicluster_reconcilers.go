// Code generated by MockGen. DO NOT EDIT.
// Source: ./multicluster_reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/gloo-mesh/pkg/api/networking.enterprise.mesh.gloo.solo.io/v1alpha1"
	controller "github.com/solo-io/gloo-mesh/pkg/api/networking.enterprise.mesh.gloo.solo.io/v1alpha1/controller"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockMulticlusterWasmDeploymentReconciler is a mock of MulticlusterWasmDeploymentReconciler interface
type MockMulticlusterWasmDeploymentReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterWasmDeploymentReconcilerMockRecorder
}

// MockMulticlusterWasmDeploymentReconcilerMockRecorder is the mock recorder for MockMulticlusterWasmDeploymentReconciler
type MockMulticlusterWasmDeploymentReconcilerMockRecorder struct {
	mock *MockMulticlusterWasmDeploymentReconciler
}

// NewMockMulticlusterWasmDeploymentReconciler creates a new mock instance
func NewMockMulticlusterWasmDeploymentReconciler(ctrl *gomock.Controller) *MockMulticlusterWasmDeploymentReconciler {
	mock := &MockMulticlusterWasmDeploymentReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterWasmDeploymentReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterWasmDeploymentReconciler) EXPECT() *MockMulticlusterWasmDeploymentReconcilerMockRecorder {
	return m.recorder
}

// ReconcileWasmDeployment mocks base method
func (m *MockMulticlusterWasmDeploymentReconciler) ReconcileWasmDeployment(clusterName string, obj *v1alpha1.WasmDeployment) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileWasmDeployment", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileWasmDeployment indicates an expected call of ReconcileWasmDeployment
func (mr *MockMulticlusterWasmDeploymentReconcilerMockRecorder) ReconcileWasmDeployment(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileWasmDeployment", reflect.TypeOf((*MockMulticlusterWasmDeploymentReconciler)(nil).ReconcileWasmDeployment), clusterName, obj)
}

// MockMulticlusterWasmDeploymentDeletionReconciler is a mock of MulticlusterWasmDeploymentDeletionReconciler interface
type MockMulticlusterWasmDeploymentDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterWasmDeploymentDeletionReconcilerMockRecorder
}

// MockMulticlusterWasmDeploymentDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterWasmDeploymentDeletionReconciler
type MockMulticlusterWasmDeploymentDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterWasmDeploymentDeletionReconciler
}

// NewMockMulticlusterWasmDeploymentDeletionReconciler creates a new mock instance
func NewMockMulticlusterWasmDeploymentDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterWasmDeploymentDeletionReconciler {
	mock := &MockMulticlusterWasmDeploymentDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterWasmDeploymentDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterWasmDeploymentDeletionReconciler) EXPECT() *MockMulticlusterWasmDeploymentDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileWasmDeploymentDeletion mocks base method
func (m *MockMulticlusterWasmDeploymentDeletionReconciler) ReconcileWasmDeploymentDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileWasmDeploymentDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileWasmDeploymentDeletion indicates an expected call of ReconcileWasmDeploymentDeletion
func (mr *MockMulticlusterWasmDeploymentDeletionReconcilerMockRecorder) ReconcileWasmDeploymentDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileWasmDeploymentDeletion", reflect.TypeOf((*MockMulticlusterWasmDeploymentDeletionReconciler)(nil).ReconcileWasmDeploymentDeletion), clusterName, req)
}

// MockMulticlusterWasmDeploymentReconcileLoop is a mock of MulticlusterWasmDeploymentReconcileLoop interface
type MockMulticlusterWasmDeploymentReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterWasmDeploymentReconcileLoopMockRecorder
}

// MockMulticlusterWasmDeploymentReconcileLoopMockRecorder is the mock recorder for MockMulticlusterWasmDeploymentReconcileLoop
type MockMulticlusterWasmDeploymentReconcileLoopMockRecorder struct {
	mock *MockMulticlusterWasmDeploymentReconcileLoop
}

// NewMockMulticlusterWasmDeploymentReconcileLoop creates a new mock instance
func NewMockMulticlusterWasmDeploymentReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterWasmDeploymentReconcileLoop {
	mock := &MockMulticlusterWasmDeploymentReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterWasmDeploymentReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterWasmDeploymentReconcileLoop) EXPECT() *MockMulticlusterWasmDeploymentReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterWasmDeploymentReconciler mocks base method
func (m *MockMulticlusterWasmDeploymentReconcileLoop) AddMulticlusterWasmDeploymentReconciler(ctx context.Context, rec controller.MulticlusterWasmDeploymentReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterWasmDeploymentReconciler", varargs...)
}

// AddMulticlusterWasmDeploymentReconciler indicates an expected call of AddMulticlusterWasmDeploymentReconciler
func (mr *MockMulticlusterWasmDeploymentReconcileLoopMockRecorder) AddMulticlusterWasmDeploymentReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterWasmDeploymentReconciler", reflect.TypeOf((*MockMulticlusterWasmDeploymentReconcileLoop)(nil).AddMulticlusterWasmDeploymentReconciler), varargs...)
}

// MockMulticlusterGlobalServiceReconciler is a mock of MulticlusterGlobalServiceReconciler interface
type MockMulticlusterGlobalServiceReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGlobalServiceReconcilerMockRecorder
}

// MockMulticlusterGlobalServiceReconcilerMockRecorder is the mock recorder for MockMulticlusterGlobalServiceReconciler
type MockMulticlusterGlobalServiceReconcilerMockRecorder struct {
	mock *MockMulticlusterGlobalServiceReconciler
}

// NewMockMulticlusterGlobalServiceReconciler creates a new mock instance
func NewMockMulticlusterGlobalServiceReconciler(ctrl *gomock.Controller) *MockMulticlusterGlobalServiceReconciler {
	mock := &MockMulticlusterGlobalServiceReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGlobalServiceReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterGlobalServiceReconciler) EXPECT() *MockMulticlusterGlobalServiceReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGlobalService mocks base method
func (m *MockMulticlusterGlobalServiceReconciler) ReconcileGlobalService(clusterName string, obj *v1alpha1.GlobalService) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGlobalService", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileGlobalService indicates an expected call of ReconcileGlobalService
func (mr *MockMulticlusterGlobalServiceReconcilerMockRecorder) ReconcileGlobalService(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGlobalService", reflect.TypeOf((*MockMulticlusterGlobalServiceReconciler)(nil).ReconcileGlobalService), clusterName, obj)
}

// MockMulticlusterGlobalServiceDeletionReconciler is a mock of MulticlusterGlobalServiceDeletionReconciler interface
type MockMulticlusterGlobalServiceDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGlobalServiceDeletionReconcilerMockRecorder
}

// MockMulticlusterGlobalServiceDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterGlobalServiceDeletionReconciler
type MockMulticlusterGlobalServiceDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterGlobalServiceDeletionReconciler
}

// NewMockMulticlusterGlobalServiceDeletionReconciler creates a new mock instance
func NewMockMulticlusterGlobalServiceDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterGlobalServiceDeletionReconciler {
	mock := &MockMulticlusterGlobalServiceDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGlobalServiceDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterGlobalServiceDeletionReconciler) EXPECT() *MockMulticlusterGlobalServiceDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGlobalServiceDeletion mocks base method
func (m *MockMulticlusterGlobalServiceDeletionReconciler) ReconcileGlobalServiceDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGlobalServiceDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileGlobalServiceDeletion indicates an expected call of ReconcileGlobalServiceDeletion
func (mr *MockMulticlusterGlobalServiceDeletionReconcilerMockRecorder) ReconcileGlobalServiceDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGlobalServiceDeletion", reflect.TypeOf((*MockMulticlusterGlobalServiceDeletionReconciler)(nil).ReconcileGlobalServiceDeletion), clusterName, req)
}

// MockMulticlusterGlobalServiceReconcileLoop is a mock of MulticlusterGlobalServiceReconcileLoop interface
type MockMulticlusterGlobalServiceReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGlobalServiceReconcileLoopMockRecorder
}

// MockMulticlusterGlobalServiceReconcileLoopMockRecorder is the mock recorder for MockMulticlusterGlobalServiceReconcileLoop
type MockMulticlusterGlobalServiceReconcileLoopMockRecorder struct {
	mock *MockMulticlusterGlobalServiceReconcileLoop
}

// NewMockMulticlusterGlobalServiceReconcileLoop creates a new mock instance
func NewMockMulticlusterGlobalServiceReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterGlobalServiceReconcileLoop {
	mock := &MockMulticlusterGlobalServiceReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGlobalServiceReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterGlobalServiceReconcileLoop) EXPECT() *MockMulticlusterGlobalServiceReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterGlobalServiceReconciler mocks base method
func (m *MockMulticlusterGlobalServiceReconcileLoop) AddMulticlusterGlobalServiceReconciler(ctx context.Context, rec controller.MulticlusterGlobalServiceReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterGlobalServiceReconciler", varargs...)
}

// AddMulticlusterGlobalServiceReconciler indicates an expected call of AddMulticlusterGlobalServiceReconciler
func (mr *MockMulticlusterGlobalServiceReconcileLoopMockRecorder) AddMulticlusterGlobalServiceReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterGlobalServiceReconciler", reflect.TypeOf((*MockMulticlusterGlobalServiceReconcileLoop)(nil).AddMulticlusterGlobalServiceReconciler), varargs...)
}
