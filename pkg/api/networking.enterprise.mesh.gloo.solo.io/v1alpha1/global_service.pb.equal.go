// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/gloo-mesh/api/enterprise/networking/v1alpha1/global_service.proto

package v1alpha1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"

	v1alpha2 "github.com/solo-io/gloo-mesh/pkg/api/networking.mesh.gloo.solo.io/v1alpha2"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)

	_ = v1alpha2.ApprovalState(0)
)

// Equal function
func (m *GlobalServiceSpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GlobalServiceSpec)
	if !ok {
		that2, ok := that.(GlobalServiceSpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetHostname(), target.GetHostname()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetPort()).(equality.Equalizer); ok {
		if !h.Equal(target.GetPort()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetPort(), target.GetPort()) {
			return false
		}
	}

	if len(m.GetTrafficTargetSelectors()) != len(target.GetTrafficTargetSelectors()) {
		return false
	}
	for idx, v := range m.GetTrafficTargetSelectors() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetTrafficTargetSelectors()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetTrafficTargetSelectors()[idx]) {
				return false
			}
		}

	}

	switch m.ExportTo.(type) {

	case *GlobalServiceSpec_VirtualMesh:

		if h, ok := interface{}(m.GetVirtualMesh()).(equality.Equalizer); ok {
			if !h.Equal(target.GetVirtualMesh()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetVirtualMesh(), target.GetVirtualMesh()) {
				return false
			}
		}

	case *GlobalServiceSpec_Meshes:

		if h, ok := interface{}(m.GetMeshes()).(equality.Equalizer); ok {
			if !h.Equal(target.GetMeshes()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetMeshes(), target.GetMeshes()) {
				return false
			}
		}

	}

	switch m.FailoverConfig.(type) {

	case *GlobalServiceSpec_BackingServices:

		if h, ok := interface{}(m.GetBackingServices()).(equality.Equalizer); ok {
			if !h.Equal(target.GetBackingServices()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetBackingServices(), target.GetBackingServices()) {
				return false
			}
		}

	case *GlobalServiceSpec_LocalityConfig_:

		if h, ok := interface{}(m.GetLocalityConfig()).(equality.Equalizer); ok {
			if !h.Equal(target.GetLocalityConfig()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetLocalityConfig(), target.GetLocalityConfig()) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *GlobalServiceStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GlobalServiceStatus)
	if !ok {
		that2, ok := that.(GlobalServiceStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetObservedGeneration() != target.GetObservedGeneration() {
		return false
	}

	if m.GetState() != target.GetState() {
		return false
	}

	if len(m.GetMeshes()) != len(target.GetMeshes()) {
		return false
	}
	for k, v := range m.GetMeshes() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetMeshes()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetMeshes()[k]) {
				return false
			}
		}

	}

	if len(m.GetErrors()) != len(target.GetErrors()) {
		return false
	}
	for idx, v := range m.GetErrors() {

		if strings.Compare(v, target.GetErrors()[idx]) != 0 {
			return false
		}

	}

	return true
}

// Equal function
func (m *GlobalServiceSpec_MeshList) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GlobalServiceSpec_MeshList)
	if !ok {
		that2, ok := that.(GlobalServiceSpec_MeshList)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetMeshRefs()) != len(target.GetMeshRefs()) {
		return false
	}
	for idx, v := range m.GetMeshRefs() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetMeshRefs()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetMeshRefs()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *GlobalServiceSpec_BackingServiceList) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GlobalServiceSpec_BackingServiceList)
	if !ok {
		that2, ok := that.(GlobalServiceSpec_BackingServiceList)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetBackingServices()) != len(target.GetBackingServices()) {
		return false
	}
	for idx, v := range m.GetBackingServices() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetBackingServices()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetBackingServices()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *GlobalServiceSpec_LocalityConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GlobalServiceSpec_LocalityConfig)
	if !ok {
		that2, ok := that.(GlobalServiceSpec_LocalityConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetLocalities()) != len(target.GetLocalities()) {
		return false
	}
	for idx, v := range m.GetLocalities() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetLocalities()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetLocalities()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *GlobalServiceSpec_Locality) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GlobalServiceSpec_Locality)
	if !ok {
		that2, ok := that.(GlobalServiceSpec_Locality)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetFrom(), target.GetFrom()) != 0 {
		return false
	}

	if len(m.GetTo()) != len(target.GetTo()) {
		return false
	}
	for idx, v := range m.GetTo() {

		if strings.Compare(v, target.GetTo()[idx]) != 0 {
			return false
		}

	}

	return true
}

// Equal function
func (m *GlobalServiceSpec_Port) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GlobalServiceSpec_Port)
	if !ok {
		that2, ok := that.(GlobalServiceSpec_Port)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetNumber() != target.GetNumber() {
		return false
	}

	if strings.Compare(m.GetProtocol(), target.GetProtocol()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *GlobalServiceSpec_BackingService) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GlobalServiceSpec_BackingService)
	if !ok {
		that2, ok := that.(GlobalServiceSpec_BackingService)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	switch m.BackingServiceType.(type) {

	case *GlobalServiceSpec_BackingService_KubeService:

		if h, ok := interface{}(m.GetKubeService()).(equality.Equalizer); ok {
			if !h.Equal(target.GetKubeService()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetKubeService(), target.GetKubeService()) {
				return false
			}
		}

	}

	return true
}
